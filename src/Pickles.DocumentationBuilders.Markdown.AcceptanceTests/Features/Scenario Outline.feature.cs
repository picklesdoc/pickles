// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.7.0.0
//      SpecFlow Generator Version:3.7.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace PicklesDoc.Pickles.DocumentationBuilders.Markdown.AcceptanceTests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.7.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Scenario Outlines")]
    public partial class ScenarioOutlinesFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "Scenario Outline.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Scenario Outlines", "    In order to document the Scenario Outlines\r\n    As a reader of the generated " +
                    "documentation\r\n    I want the scenario outlines to appear with steps and example" +
                    "s below the feature heading.", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Output has simple scenario outline")]
        public virtual void OutputHasSimpleScenarioOutline()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Output has simple scenario outline", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 8
    testRunner.Given("I have a feature called \'My Scenario Outline Feature\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 10
    testRunner.And("I have a scenario outline called \'Scenario Outline with Single Example\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                            "Keyword",
                            "Step"});
                table11.AddRow(new string[] {
                            "Given",
                            "I have a simple given step for <data_one>"});
                table11.AddRow(new string[] {
                            "And",
                            "I have second given for <data_two>"});
#line 12
    testRunner.And("I have the scenario steps", ((string)(null)), table11, "And ");
#line hidden
                TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                            "Scenario",
                            "data_one",
                            "data_two"});
                table12.AddRow(new string[] {
                            "First",
                            "one",
                            "wun"});
                table12.AddRow(new string[] {
                            "Second",
                            "two",
                            "too"});
                table12.AddRow(new string[] {
                            "Third",
                            "three",
                            "tree"});
#line 17
    testRunner.And("I have an examples table", ((string)(null)), table12, "And ");
#line hidden
#line 23
    testRunner.When("I generate Markdown output", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                            "Content"});
                table13.AddRow(new string[] {
                            "#### Scenario Outline: Scenario Outline with Single Example"});
                table13.AddRow(new string[] {
                            ">"});
                table13.AddRow(new string[] {
                            "> **Given** I have a simple given step for \\<data_one\\>"});
                table13.AddRow(new string[] {
                            ">"});
                table13.AddRow(new string[] {
                            "> **And** I have second given for \\<data_two\\>"});
                table13.AddRow(new string[] {
                            ">"});
                table13.AddRow(new string[] {
                            "> Examples:"});
                table13.AddRow(new string[] {
                            ">"});
                table13.AddRow(new string[] {
                            "> | Scenario | data_one | data_two |"});
                table13.AddRow(new string[] {
                            "> | --- | --- | --- |"});
                table13.AddRow(new string[] {
                            "> | First | one | wun |"});
                table13.AddRow(new string[] {
                            "> | Second | two | too |"});
                table13.AddRow(new string[] {
                            "> | Third | three | tree |"});
#line 25
    testRunner.Then("the Markdown output has the lines in the following order", ((string)(null)), table13, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Output has table step scenario outline")]
        public virtual void OutputHasTableStepScenarioOutline()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Output has table step scenario outline", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 41
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 43
    testRunner.Given("I have a feature called \'My Scenario Outline Feature\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 45
    testRunner.And("I have a scenario outline called \'Scenario Outline with table step\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                            "TableColA",
                            "TableColb"});
                table14.AddRow(new string[] {
                            "<data_one>",
                            "TDB1"});
                table14.AddRow(new string[] {
                            "TDA2",
                            "<data_two>"});
#line 47
    testRunner.And("I have the scenario step with table \'Given I have a table\'", ((string)(null)), table14, "And ");
#line hidden
                TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                            "Scenario",
                            "data_one",
                            "data_two"});
                table15.AddRow(new string[] {
                            "First",
                            "one",
                            "wun"});
                table15.AddRow(new string[] {
                            "Second",
                            "two",
                            "too"});
                table15.AddRow(new string[] {
                            "Third",
                            "three",
                            "tree"});
#line 52
    testRunner.And("I have an examples table", ((string)(null)), table15, "And ");
#line hidden
#line 58
    testRunner.When("I generate Markdown output", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                            "Content"});
                table16.AddRow(new string[] {
                            "#### Scenario Outline: Scenario Outline with table step"});
                table16.AddRow(new string[] {
                            ">"});
                table16.AddRow(new string[] {
                            "> **Given** I have a table"});
                table16.AddRow(new string[] {
                            ">"});
                table16.AddRow(new string[] {
                            "> | TableColA | TableColb |"});
                table16.AddRow(new string[] {
                            "> | --- | --- |"});
                table16.AddRow(new string[] {
                            "> | \\<data_one\\> | TDB1 |"});
                table16.AddRow(new string[] {
                            "> | TDA2 | \\<data_two\\> |"});
                table16.AddRow(new string[] {
                            ">"});
                table16.AddRow(new string[] {
                            "> Examples:"});
                table16.AddRow(new string[] {
                            ">"});
                table16.AddRow(new string[] {
                            "> | Scenario | data_one | data_two |"});
                table16.AddRow(new string[] {
                            "> | --- | --- | --- |"});
                table16.AddRow(new string[] {
                            "> | First | one | wun |"});
                table16.AddRow(new string[] {
                            "> | Second | two | too |"});
                table16.AddRow(new string[] {
                            "> | Third | three | tree |"});
#line 60
    testRunner.Then("the Markdown output has the lines in the following order", ((string)(null)), table16, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
