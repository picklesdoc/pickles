<?xml version="1.0" encoding="utf-8"?>
<assemblies>
  <assembly name="C:\Git\pickles\test-harness\xunit2\bin\Debug\xunit2Harness.DLL" environment="64-bit .NET 4.0.30319.42000 [collection-per-class, non-parallel]" test-framework="xUnit.net 2.1.0.3179" run-date="2018-08-29" run-time="14:10:40" config-file="C:\Git\pickles\test-harness\xunit2\bin\Debug\xunit2Harness.dll.config" total="71" passed="40" failed="30" skipped="1" time="1.513" errors="0">
    <errors />
    <collection total="3" passed="0" failed="3" skipped="0" name="Test collection for Pickles.TestHarness.xunit2.NotAutomatedAtAllFeature" time="0.023">
      <test name="Pickles.TestHarness.xunit2.NotAutomatedAtAllFeature.NotAutomatedScenario2" type="Pickles.TestHarness.xunit2.NotAutomatedAtAllFeature" method="NotAutomatedScenario2" time="0.0076627" result="Fail">
        <traits>
          <trait name="FeatureTitle" value="Not Automated At All" />
          <trait name="Description" value="Not automated scenario 2" />
        </traits>
        <failure exception-type="TechTalk.SpecFlow.SpecFlowException">
          <message><![CDATA[TechTalk.SpecFlow.SpecFlowException : Test pending: No matching step definition found for one or more steps.\r\nusing System;\r\nusing TechTalk.SpecFlow;\r\n\r\nnamespace MyNamespace\r\n{\r\n    [Binding]\r\n    public class StepDefinitions\r\n    {\r\n        [Given(@"unimplemented step")]\r\n        public void GivenUnimplementedStep()\r\n        {\r\n            ScenarioContext.Current.Pending();\r\n        }\r\n        \r\n        [When(@"unimplemented step")]\r\n        public void WhenUnimplementedStep()\r\n        {\r\n            ScenarioContext.Current.Pending();\r\n        }\r\n        \r\n        [Then(@"unimplemented step")]\r\n        public void ThenUnimplementedStep()\r\n        {\r\n            ScenarioContext.Current.Pending();\r\n        }\r\n    }\r\n}\r\n]]></message>
          <stack-trace><![CDATA[   at TechTalk.SpecFlow.UnitTestProvider.XUnitRuntimeProvider.TestPending(String message)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at Pickles.TestHarness.xunit2.NotAutomatedAtAllFeature.ScenarioCleanup()
   at Pickles.TestHarness.xunit2.NotAutomatedAtAllFeature.NotAutomatedScenario2() in C:\Git\pickles\test-harness\xunit2\NotAutomatedAtAll.feature:line 14]]></stack-trace>
        </failure>
      </test>
      <test name="Pickles.TestHarness.xunit2.NotAutomatedAtAllFeature.NotAutomatedScenario3" type="Pickles.TestHarness.xunit2.NotAutomatedAtAllFeature" method="NotAutomatedScenario3" time="0.0074265" result="Fail">
        <traits>
          <trait name="FeatureTitle" value="Not Automated At All" />
          <trait name="Description" value="Not automated scenario 3" />
        </traits>
        <failure exception-type="TechTalk.SpecFlow.SpecFlowException">
          <message><![CDATA[TechTalk.SpecFlow.SpecFlowException : Test pending: No matching step definition found for one or more steps.\r\nusing System;\r\nusing TechTalk.SpecFlow;\r\n\r\nnamespace MyNamespace\r\n{\r\n    [Binding]\r\n    public class StepDefinitions\r\n    {\r\n        [Given(@"unimplemented step")]\r\n        public void GivenUnimplementedStep()\r\n        {\r\n            ScenarioContext.Current.Pending();\r\n        }\r\n        \r\n        [When(@"unimplemented step")]\r\n        public void WhenUnimplementedStep()\r\n        {\r\n            ScenarioContext.Current.Pending();\r\n        }\r\n        \r\n        [Then(@"unimplemented step")]\r\n        public void ThenUnimplementedStep()\r\n        {\r\n            ScenarioContext.Current.Pending();\r\n        }\r\n    }\r\n}\r\n]]></message>
          <stack-trace><![CDATA[   at TechTalk.SpecFlow.UnitTestProvider.XUnitRuntimeProvider.TestPending(String message)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at Pickles.TestHarness.xunit2.NotAutomatedAtAllFeature.ScenarioCleanup()
   at Pickles.TestHarness.xunit2.NotAutomatedAtAllFeature.NotAutomatedScenario3() in C:\Git\pickles\test-harness\xunit2\NotAutomatedAtAll.feature:line 19]]></stack-trace>
        </failure>
      </test>
      <test name="Pickles.TestHarness.xunit2.NotAutomatedAtAllFeature.NotAutomatedScenario1" type="Pickles.TestHarness.xunit2.NotAutomatedAtAllFeature" method="NotAutomatedScenario1" time="0.0080797" result="Fail">
        <traits>
          <trait name="FeatureTitle" value="Not Automated At All" />
          <trait name="Description" value="Not automated scenario 1" />
        </traits>
        <failure exception-type="TechTalk.SpecFlow.SpecFlowException">
          <message><![CDATA[TechTalk.SpecFlow.SpecFlowException : Test pending: No matching step definition found for one or more steps.\r\nusing System;\r\nusing TechTalk.SpecFlow;\r\n\r\nnamespace MyNamespace\r\n{\r\n    [Binding]\r\n    public class StepDefinitions\r\n    {\r\n        [Given(@"unimplemented step")]\r\n        public void GivenUnimplementedStep()\r\n        {\r\n            ScenarioContext.Current.Pending();\r\n        }\r\n        \r\n        [When(@"unimplemented step")]\r\n        public void WhenUnimplementedStep()\r\n        {\r\n            ScenarioContext.Current.Pending();\r\n        }\r\n        \r\n        [Then(@"unimplemented step")]\r\n        public void ThenUnimplementedStep()\r\n        {\r\n            ScenarioContext.Current.Pending();\r\n        }\r\n    }\r\n}\r\n]]></message>
          <stack-trace><![CDATA[   at TechTalk.SpecFlow.UnitTestProvider.XUnitRuntimeProvider.TestPending(String message)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at Pickles.TestHarness.xunit2.NotAutomatedAtAllFeature.ScenarioCleanup()
   at Pickles.TestHarness.xunit2.NotAutomatedAtAllFeature.NotAutomatedScenario1() in C:\Git\pickles\test-harness\xunit2\NotAutomatedAtAll.feature:line 9]]></stack-trace>
        </failure>
      </test>
    </collection>
    <collection total="3" passed="1" failed="2" skipped="0" name="Test collection for Pickles.TestHarness.xunit2.MinimalFeatures.FailingFeature" time="0.012">
      <test name="Pickles.TestHarness.xunit2.MinimalFeatures.FailingFeature.FailingFeaturePassingScenario" type="Pickles.TestHarness.xunit2.MinimalFeatures.FailingFeature" method="FailingFeaturePassingScenario" time="0.0008929" result="Pass">
        <traits>
          <trait name="FeatureTitle" value="Failing" />
          <trait name="Description" value="Failing Feature Passing Scenario" />
        </traits>
      </test>
      <test name="Pickles.TestHarness.xunit2.MinimalFeatures.FailingFeature.FailingFeatureFailingScenario" type="Pickles.TestHarness.xunit2.MinimalFeatures.FailingFeature" method="FailingFeatureFailingScenario" time="0.0018802" result="Fail">
        <traits>
          <trait name="FeatureTitle" value="Failing" />
          <trait name="Description" value="Failing Feature Failing Scenario" />
        </traits>
        <failure exception-type="NFluent.FluentCheckException">
          <message><![CDATA[NFluent.FluentCheckException : \nThe checked value is different from the expected one.\nThe checked value:\n\t[True]\nThe expected value:\n\t[False]]]></message>
          <stack-trace><![CDATA[   at NFluent.Helpers.EqualityHelper.IsEqualTo(Object instance, Object expected)
   at NFluent.Extensibility.Checker`2.ExecuteCheck(Action action, String negatedExceptionMessage)
   at AutomationLayer.MarkTestAs.Failing() in C:\Git\pickles\test-harness\AutomationLayer\MarkTestAs.cs:line 15
   at AutomationLayer.MinimalFeatures.MinimalSteps.ThenFailingStep() in C:\Git\pickles\test-harness\AutomationLayer\MinimalFeatures\MinimalSteps.cs:line 24
   at TechTalk.SpecFlow.Bindings.BindingInvoker.InvokeBinding(IBinding binding, IContextManager contextManager, Object[] arguments, ITestTracer testTracer, TimeSpan& duration)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStepMatch(BindingMatch match, Object[] arguments)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep(StepInstance stepInstance)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at Pickles.TestHarness.xunit2.MinimalFeatures.FailingFeature.ScenarioCleanup()
   at Pickles.TestHarness.xunit2.MinimalFeatures.FailingFeature.FailingFeatureFailingScenario() in C:\Git\pickles\test-harness\xunit2\Minimal Features\Failing.feature:line 10]]></stack-trace>
        </failure>
      </test>
      <test name="Pickles.TestHarness.xunit2.MinimalFeatures.FailingFeature.FailingFeatureInconclusiveScenario" type="Pickles.TestHarness.xunit2.MinimalFeatures.FailingFeature" method="FailingFeatureInconclusiveScenario" time="0.0094078" result="Fail">
        <traits>
          <trait name="FeatureTitle" value="Failing" />
          <trait name="Description" value="Failing Feature Inconclusive Scenario" />
        </traits>
        <failure exception-type="TechTalk.SpecFlow.SpecFlowException">
          <message><![CDATA[TechTalk.SpecFlow.SpecFlowException : Test pending: One or more step definitions are not implemented yet.\r\n  MinimalSteps.ThenInconclusiveStep()]]></message>
          <stack-trace><![CDATA[   at TechTalk.SpecFlow.UnitTestProvider.XUnitRuntimeProvider.TestPending(String message)
   at Pickles.TestHarness.xunit2.MinimalFeatures.FailingFeature.ScenarioCleanup()
   at Pickles.TestHarness.xunit2.MinimalFeatures.FailingFeature.FailingFeatureInconclusiveScenario() in C:\Git\pickles\test-harness\xunit2\Minimal Features\Failing.feature:line 7]]></stack-trace>
        </failure>
      </test>
    </collection>
    <collection total="40" passed="21" failed="19" skipped="0" name="Test collection for Pickles.TestHarness.xunit2.ScenarioOutlinesFeature" time="0.053">
      <test name="Pickles.TestHarness.xunit2.ScenarioOutlinesFeature.ThisIsAScenarioOutlineWhereAllScenariosPass(result: &quot;pass_1&quot;, exampleTags: [])" type="Pickles.TestHarness.xunit2.ScenarioOutlinesFeature" method="ThisIsAScenarioOutlineWhereAllScenariosPass" time="0.0012641" result="Pass">
        <traits>
          <trait name="FeatureTitle" value="Scenario Outlines" />
          <trait name="Description" value="This is a scenario outline where all scenarios pass" />
        </traits>
      </test>
      <test name="Pickles.TestHarness.xunit2.ScenarioOutlinesFeature.ThisIsAScenarioOutlineWhereAllScenariosPass(result: &quot;pass_2&quot;, exampleTags: [])" type="Pickles.TestHarness.xunit2.ScenarioOutlinesFeature" method="ThisIsAScenarioOutlineWhereAllScenariosPass" time="0.0002149" result="Pass">
        <traits>
          <trait name="FeatureTitle" value="Scenario Outlines" />
          <trait name="Description" value="This is a scenario outline where all scenarios pass" />
        </traits>
      </test>
      <test name="Pickles.TestHarness.xunit2.ScenarioOutlinesFeature.ThisIsAScenarioOutlineWhereAllScenariosPass(result: &quot;pass_3&quot;, exampleTags: [])" type="Pickles.TestHarness.xunit2.ScenarioOutlinesFeature" method="ThisIsAScenarioOutlineWhereAllScenariosPass" time="0.0001718" result="Pass">
        <traits>
          <trait name="FeatureTitle" value="Scenario Outlines" />
          <trait name="Description" value="This is a scenario outline where all scenarios pass" />
        </traits>
      </test>
      <test name="Pickles.TestHarness.xunit2.ScenarioOutlinesFeature.ThisIsAScenarioOutlineWhereOneScenarioFails(result: &quot;pass_1&quot;, exampleTags: [])" type="Pickles.TestHarness.xunit2.ScenarioOutlinesFeature" method="ThisIsAScenarioOutlineWhereOneScenarioFails" time="0.0004384" result="Pass">
        <traits>
          <trait name="FeatureTitle" value="Scenario Outlines" />
          <trait name="Description" value="This is a scenario outline where one scenario fails" />
        </traits>
      </test>
      <test name="Pickles.TestHarness.xunit2.ScenarioOutlinesFeature.ThisIsAScenarioOutlineWhereOneScenarioFails(result: &quot;pass_2&quot;, exampleTags: [])" type="Pickles.TestHarness.xunit2.ScenarioOutlinesFeature" method="ThisIsAScenarioOutlineWhereOneScenarioFails" time="0.0001432" result="Pass">
        <traits>
          <trait name="FeatureTitle" value="Scenario Outlines" />
          <trait name="Description" value="This is a scenario outline where one scenario fails" />
        </traits>
      </test>
      <test name="Pickles.TestHarness.xunit2.ScenarioOutlinesFeature.ThisIsAScenarioOutlineWhereOneScenarioFails(result: &quot;fail_1&quot;, exampleTags: [])" type="Pickles.TestHarness.xunit2.ScenarioOutlinesFeature" method="ThisIsAScenarioOutlineWhereOneScenarioFails" time="0.0040003" result="Fail">
        <traits>
          <trait name="FeatureTitle" value="Scenario Outlines" />
          <trait name="Description" value="This is a scenario outline where one scenario fails" />
        </traits>
        <failure exception-type="NFluent.FluentCheckException">
          <message><![CDATA[NFluent.FluentCheckException : \nThe checked value is different from the expected one.\nThe checked value:\n\t[True]\nThe expected value:\n\t[False]]]></message>
          <stack-trace><![CDATA[   at NFluent.Helpers.EqualityHelper.IsEqualTo(Object instance, Object expected)
   at NFluent.Extensibility.Checker`2.ExecuteCheck(Action action, String negatedExceptionMessage)
   at AutomationLayer.MarkTestAs.Failing() in C:\Git\pickles\test-harness\AutomationLayer\MarkTestAs.cs:line 15
   at AutomationLayer.ScenarioOutlineSteps.ThenTheScenarioWill(String result) in C:\Git\pickles\test-harness\AutomationLayer\ScenarioOutlineSteps.cs:line 19
   at TechTalk.SpecFlow.Bindings.BindingInvoker.InvokeBinding(IBinding binding, IContextManager contextManager, Object[] arguments, ITestTracer testTracer, TimeSpan& duration)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStepMatch(BindingMatch match, Object[] arguments)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep(StepInstance stepInstance)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at Pickles.TestHarness.xunit2.ScenarioOutlinesFeature.ScenarioCleanup()
   at Pickles.TestHarness.xunit2.ScenarioOutlinesFeature.ThisIsAScenarioOutlineWhereOneScenarioFails(String result, String[] exampleTags) in C:\Git\pickles\test-harness\xunit2\ScenarioOutlines.feature:line 34]]></stack-trace>
        </failure>
      </test>
      <test name="Pickles.TestHarness.xunit2.ScenarioOutlinesFeature.DealCorrectlyWithOverlongExampleValues(value1: &quot;Please enter a valid two letter country code (e.g.&quot;..., value2: &quot;This is just a very very very veery long error mes&quot;..., exampleTags: [])" type="Pickles.TestHarness.xunit2.ScenarioOutlinesFeature" method="DealCorrectlyWithOverlongExampleValues" time="0.0016796" result="Pass">
        <traits>
          <trait name="FeatureTitle" value="Scenario Outlines" />
          <trait name="Description" value="Deal correctly with overlong example values" />
        </traits>
      </test>
      <test name="Pickles.TestHarness.xunit2.ScenarioOutlinesFeature.ThisIsAScenarioOutlineWhereOneScenarioIsInconclusive(result: &quot;pass_1&quot;, exampleTags: [])" type="Pickles.TestHarness.xunit2.ScenarioOutlinesFeature" method="ThisIsAScenarioOutlineWhereOneScenarioIsInconclusive" time="0.0004568" result="Pass">
        <traits>
          <trait name="FeatureTitle" value="Scenario Outlines" />
          <trait name="Description" value="This is a scenario outline where one scenario is inconclusive" />
        </traits>
      </test>
      <test name="Pickles.TestHarness.xunit2.ScenarioOutlinesFeature.ThisIsAScenarioOutlineWhereOneScenarioIsInconclusive(result: &quot;pass_2&quot;, exampleTags: [])" type="Pickles.TestHarness.xunit2.ScenarioOutlinesFeature" method="ThisIsAScenarioOutlineWhereOneScenarioIsInconclusive" time="0.0001415" result="Pass">
        <traits>
          <trait name="FeatureTitle" value="Scenario Outlines" />
          <trait name="Description" value="This is a scenario outline where one scenario is inconclusive" />
        </traits>
      </test>
      <test name="Pickles.TestHarness.xunit2.ScenarioOutlinesFeature.ThisIsAScenarioOutlineWhereOneScenarioIsInconclusive(result: &quot;inconclusive_1&quot;, exampleTags: [])" type="Pickles.TestHarness.xunit2.ScenarioOutlinesFeature" method="ThisIsAScenarioOutlineWhereOneScenarioIsInconclusive" time="0.0013136" result="Fail">
        <traits>
          <trait name="FeatureTitle" value="Scenario Outlines" />
          <trait name="Description" value="This is a scenario outline where one scenario is inconclusive" />
        </traits>
        <failure exception-type="TechTalk.SpecFlow.SpecFlowException">
          <message><![CDATA[TechTalk.SpecFlow.SpecFlowException : Test pending: One or more step definitions are not implemented yet.\r\n  ScenarioOutlineSteps.ThenTheScenarioWill("inconclusive_1")]]></message>
          <stack-trace><![CDATA[   at TechTalk.SpecFlow.UnitTestProvider.XUnitRuntimeProvider.TestPending(String message)
   at Pickles.TestHarness.xunit2.ScenarioOutlinesFeature.ScenarioCleanup()
   at Pickles.TestHarness.xunit2.ScenarioOutlinesFeature.ThisIsAScenarioOutlineWhereOneScenarioIsInconclusive(String result, String[] exampleTags) in C:\Git\pickles\test-harness\xunit2\ScenarioOutlines.feature:line 21]]></stack-trace>
        </failure>
      </test>
      <test name="Pickles.TestHarness.xunit2.ScenarioOutlinesFeature.AndWeCanGoTotallyBonkersWithMultipleExampleSections_(result: &quot;pass_1&quot;, exampleTags: [])" type="Pickles.TestHarness.xunit2.ScenarioOutlinesFeature" method="AndWeCanGoTotallyBonkersWithMultipleExampleSections_" time="0.0005729" result="Pass">
        <traits>
          <trait name="FeatureTitle" value="Scenario Outlines" />
          <trait name="Description" value="And we can go totally bonkers with multiple example sections." />
        </traits>
      </test>
      <test name="Pickles.TestHarness.xunit2.ScenarioOutlinesFeature.AndWeCanGoTotallyBonkersWithMultipleExampleSections_(result: &quot;pass_2&quot;, exampleTags: [])" type="Pickles.TestHarness.xunit2.ScenarioOutlinesFeature" method="AndWeCanGoTotallyBonkersWithMultipleExampleSections_" time="0.0001445" result="Pass">
        <traits>
          <trait name="FeatureTitle" value="Scenario Outlines" />
          <trait name="Description" value="And we can go totally bonkers with multiple example sections." />
        </traits>
      </test>
      <test name="Pickles.TestHarness.xunit2.ScenarioOutlinesFeature.AndWeCanGoTotallyBonkersWithMultipleExampleSections_(result: &quot;inconclusive_1&quot;, exampleTags: [])" type="Pickles.TestHarness.xunit2.ScenarioOutlinesFeature" method="AndWeCanGoTotallyBonkersWithMultipleExampleSections_" time="0.0034204" result="Fail">
        <traits>
          <trait name="FeatureTitle" value="Scenario Outlines" />
          <trait name="Description" value="And we can go totally bonkers with multiple example sections." />
        </traits>
        <failure exception-type="TechTalk.SpecFlow.SpecFlowException">
          <message><![CDATA[TechTalk.SpecFlow.SpecFlowException : Test pending: One or more step definitions are not implemented yet.\r\n  ScenarioOutlineSteps.ThenTheScenarioWill("inconclusive_1")]]></message>
          <stack-trace><![CDATA[   at TechTalk.SpecFlow.UnitTestProvider.XUnitRuntimeProvider.TestPending(String message)
   at Pickles.TestHarness.xunit2.ScenarioOutlinesFeature.ScenarioCleanup()
   at Pickles.TestHarness.xunit2.ScenarioOutlinesFeature.AndWeCanGoTotallyBonkersWithMultipleExampleSections_(String result, String[] exampleTags) in C:\Git\pickles\test-harness\xunit2\ScenarioOutlines.feature:line 45]]></stack-trace>
        </failure>
      </test>
      <test name="Pickles.TestHarness.xunit2.ScenarioOutlinesFeature.AndWeCanGoTotallyBonkersWithMultipleExampleSections_(result: &quot;inconclusive_2&quot;, exampleTags: [])" type="Pickles.TestHarness.xunit2.ScenarioOutlinesFeature" method="AndWeCanGoTotallyBonkersWithMultipleExampleSections_" time="0.0012615" result="Fail">
        <traits>
          <trait name="FeatureTitle" value="Scenario Outlines" />
          <trait name="Description" value="And we can go totally bonkers with multiple example sections." />
        </traits>
        <failure exception-type="TechTalk.SpecFlow.SpecFlowException">
          <message><![CDATA[TechTalk.SpecFlow.SpecFlowException : Test pending: One or more step definitions are not implemented yet.\r\n  ScenarioOutlineSteps.ThenTheScenarioWill("inconclusive_2")]]></message>
          <stack-trace><![CDATA[   at TechTalk.SpecFlow.UnitTestProvider.XUnitRuntimeProvider.TestPending(String message)
   at Pickles.TestHarness.xunit2.ScenarioOutlinesFeature.ScenarioCleanup()
   at Pickles.TestHarness.xunit2.ScenarioOutlinesFeature.AndWeCanGoTotallyBonkersWithMultipleExampleSections_(String result, String[] exampleTags) in C:\Git\pickles\test-harness\xunit2\ScenarioOutlines.feature:line 45]]></stack-trace>
        </failure>
      </test>
      <test name="Pickles.TestHarness.xunit2.ScenarioOutlinesFeature.AndWeCanGoTotallyBonkersWithMultipleExampleSections_(result: &quot;fail_1&quot;, exampleTags: [])" type="Pickles.TestHarness.xunit2.ScenarioOutlinesFeature" method="AndWeCanGoTotallyBonkersWithMultipleExampleSections_" time="0.0010179" result="Fail">
        <traits>
          <trait name="FeatureTitle" value="Scenario Outlines" />
          <trait name="Description" value="And we can go totally bonkers with multiple example sections." />
        </traits>
        <failure exception-type="NFluent.FluentCheckException">
          <message><![CDATA[NFluent.FluentCheckException : \nThe checked value is different from the expected one.\nThe checked value:\n\t[True]\nThe expected value:\n\t[False]]]></message>
          <stack-trace><![CDATA[   at NFluent.Helpers.EqualityHelper.IsEqualTo(Object instance, Object expected)
   at NFluent.Extensibility.Checker`2.ExecuteCheck(Action action, String negatedExceptionMessage)
   at AutomationLayer.MarkTestAs.Failing() in C:\Git\pickles\test-harness\AutomationLayer\MarkTestAs.cs:line 15
   at AutomationLayer.ScenarioOutlineSteps.ThenTheScenarioWill(String result) in C:\Git\pickles\test-harness\AutomationLayer\ScenarioOutlineSteps.cs:line 19
   at TechTalk.SpecFlow.Bindings.BindingInvoker.InvokeBinding(IBinding binding, IContextManager contextManager, Object[] arguments, ITestTracer testTracer, TimeSpan& duration)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStepMatch(BindingMatch match, Object[] arguments)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep(StepInstance stepInstance)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at Pickles.TestHarness.xunit2.ScenarioOutlinesFeature.ScenarioCleanup()
   at Pickles.TestHarness.xunit2.ScenarioOutlinesFeature.AndWeCanGoTotallyBonkersWithMultipleExampleSections_(String result, String[] exampleTags) in C:\Git\pickles\test-harness\xunit2\ScenarioOutlines.feature:line 45]]></stack-trace>
        </failure>
      </test>
      <test name="Pickles.TestHarness.xunit2.ScenarioOutlinesFeature.AndWeCanGoTotallyBonkersWithMultipleExampleSections_(result: &quot;fail_2&quot;, exampleTags: [])" type="Pickles.TestHarness.xunit2.ScenarioOutlinesFeature" method="AndWeCanGoTotallyBonkersWithMultipleExampleSections_" time="0.0021574" result="Fail">
        <traits>
          <trait name="FeatureTitle" value="Scenario Outlines" />
          <trait name="Description" value="And we can go totally bonkers with multiple example sections." />
        </traits>
        <failure exception-type="NFluent.FluentCheckException">
          <message><![CDATA[NFluent.FluentCheckException : \nThe checked value is different from the expected one.\nThe checked value:\n\t[True]\nThe expected value:\n\t[False]]]></message>
          <stack-trace><![CDATA[   at NFluent.Helpers.EqualityHelper.IsEqualTo(Object instance, Object expected)
   at NFluent.Extensibility.Checker`2.ExecuteCheck(Action action, String negatedExceptionMessage)
   at AutomationLayer.MarkTestAs.Failing() in C:\Git\pickles\test-harness\AutomationLayer\MarkTestAs.cs:line 15
   at AutomationLayer.ScenarioOutlineSteps.ThenTheScenarioWill(String result) in C:\Git\pickles\test-harness\AutomationLayer\ScenarioOutlineSteps.cs:line 19
   at TechTalk.SpecFlow.Bindings.BindingInvoker.InvokeBinding(IBinding binding, IContextManager contextManager, Object[] arguments, ITestTracer testTracer, TimeSpan& duration)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStepMatch(BindingMatch match, Object[] arguments)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep(StepInstance stepInstance)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at Pickles.TestHarness.xunit2.ScenarioOutlinesFeature.ScenarioCleanup()
   at Pickles.TestHarness.xunit2.ScenarioOutlinesFeature.AndWeCanGoTotallyBonkersWithMultipleExampleSections_(String result, String[] exampleTags) in C:\Git\pickles\test-harness\xunit2\ScenarioOutlines.feature:line 45]]></stack-trace>
        </failure>
      </test>
      <test name="Pickles.TestHarness.xunit2.ScenarioOutlinesFeature.DealWithDuplicateValues(result: &quot;pass&quot;, exampleTags: [])" type="Pickles.TestHarness.xunit2.ScenarioOutlinesFeature" method="DealWithDuplicateValues" time="0.0005493" result="Pass">
        <traits>
          <trait name="FeatureTitle" value="Scenario Outlines" />
          <trait name="Description" value="Deal with duplicate values" />
        </traits>
      </test>
      <test name="Pickles.TestHarness.xunit2.ScenarioOutlinesFeature.DealWithDuplicateValues(result: &quot;fail&quot;, exampleTags: [])" type="Pickles.TestHarness.xunit2.ScenarioOutlinesFeature" method="DealWithDuplicateValues" time="0.0010346" result="Fail">
        <traits>
          <trait name="FeatureTitle" value="Scenario Outlines" />
          <trait name="Description" value="Deal with duplicate values" />
        </traits>
        <failure exception-type="NFluent.FluentCheckException">
          <message><![CDATA[NFluent.FluentCheckException : \nThe checked value is different from the expected one.\nThe checked value:\n\t[True]\nThe expected value:\n\t[False]]]></message>
          <stack-trace><![CDATA[   at NFluent.Helpers.EqualityHelper.IsEqualTo(Object instance, Object expected)
   at NFluent.Extensibility.Checker`2.ExecuteCheck(Action action, String negatedExceptionMessage)
   at AutomationLayer.MarkTestAs.Failing() in C:\Git\pickles\test-harness\AutomationLayer\MarkTestAs.cs:line 15
   at AutomationLayer.ScenarioOutlineSteps.ThenTheScenarioWill(String result) in C:\Git\pickles\test-harness\AutomationLayer\ScenarioOutlineSteps.cs:line 19
   at TechTalk.SpecFlow.Bindings.BindingInvoker.InvokeBinding(IBinding binding, IContextManager contextManager, Object[] arguments, ITestTracer testTracer, TimeSpan& duration)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStepMatch(BindingMatch match, Object[] arguments)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep(StepInstance stepInstance)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at Pickles.TestHarness.xunit2.ScenarioOutlinesFeature.ScenarioCleanup()
   at Pickles.TestHarness.xunit2.ScenarioOutlinesFeature.DealWithDuplicateValues(String result, String[] exampleTags) in C:\Git\pickles\test-harness\xunit2\ScenarioOutlines.feature:line 91]]></stack-trace>
        </failure>
      </test>
      <test name="Pickles.TestHarness.xunit2.ScenarioOutlinesFeature.DealWithDuplicateValues(result: &quot;inconclusive&quot;, exampleTags: [])" type="Pickles.TestHarness.xunit2.ScenarioOutlinesFeature" method="DealWithDuplicateValues" time="0.0037511" result="Fail">
        <traits>
          <trait name="FeatureTitle" value="Scenario Outlines" />
          <trait name="Description" value="Deal with duplicate values" />
        </traits>
        <failure exception-type="TechTalk.SpecFlow.SpecFlowException">
          <message><![CDATA[TechTalk.SpecFlow.SpecFlowException : Test pending: One or more step definitions are not implemented yet.\r\n  ScenarioOutlineSteps.ThenTheScenarioWill("inconclusive")]]></message>
          <stack-trace><![CDATA[   at TechTalk.SpecFlow.UnitTestProvider.XUnitRuntimeProvider.TestPending(String message)
   at Pickles.TestHarness.xunit2.ScenarioOutlinesFeature.ScenarioCleanup()
   at Pickles.TestHarness.xunit2.ScenarioOutlinesFeature.DealWithDuplicateValues(String result, String[] exampleTags) in C:\Git\pickles\test-harness\xunit2\ScenarioOutlines.feature:line 91]]></stack-trace>
        </failure>
      </test>
      <test name="Pickles.TestHarness.xunit2.ScenarioOutlinesFeature.DealWithDuplicateValues(result: &quot;pass&quot;, exampleTags: [])" type="Pickles.TestHarness.xunit2.ScenarioOutlinesFeature" method="DealWithDuplicateValues" time="0.000209" result="Pass">
        <traits>
          <trait name="FeatureTitle" value="Scenario Outlines" />
          <trait name="Description" value="Deal with duplicate values" />
        </traits>
      </test>
      <test name="Pickles.TestHarness.xunit2.ScenarioOutlinesFeature.DealWithDuplicateValues(result: &quot;fail&quot;, exampleTags: [])" type="Pickles.TestHarness.xunit2.ScenarioOutlinesFeature" method="DealWithDuplicateValues" time="0.0010528" result="Fail">
        <traits>
          <trait name="FeatureTitle" value="Scenario Outlines" />
          <trait name="Description" value="Deal with duplicate values" />
        </traits>
        <failure exception-type="NFluent.FluentCheckException">
          <message><![CDATA[NFluent.FluentCheckException : \nThe checked value is different from the expected one.\nThe checked value:\n\t[True]\nThe expected value:\n\t[False]]]></message>
          <stack-trace><![CDATA[   at NFluent.Helpers.EqualityHelper.IsEqualTo(Object instance, Object expected)
   at NFluent.Extensibility.Checker`2.ExecuteCheck(Action action, String negatedExceptionMessage)
   at AutomationLayer.MarkTestAs.Failing() in C:\Git\pickles\test-harness\AutomationLayer\MarkTestAs.cs:line 15
   at AutomationLayer.ScenarioOutlineSteps.ThenTheScenarioWill(String result) in C:\Git\pickles\test-harness\AutomationLayer\ScenarioOutlineSteps.cs:line 19
   at TechTalk.SpecFlow.Bindings.BindingInvoker.InvokeBinding(IBinding binding, IContextManager contextManager, Object[] arguments, ITestTracer testTracer, TimeSpan& duration)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStepMatch(BindingMatch match, Object[] arguments)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep(StepInstance stepInstance)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at Pickles.TestHarness.xunit2.ScenarioOutlinesFeature.ScenarioCleanup()
   at Pickles.TestHarness.xunit2.ScenarioOutlinesFeature.DealWithDuplicateValues(String result, String[] exampleTags) in C:\Git\pickles\test-harness\xunit2\ScenarioOutlines.feature:line 91]]></stack-trace>
        </failure>
      </test>
      <test name="Pickles.TestHarness.xunit2.ScenarioOutlinesFeature.DealCorrectlyWithParenthesisInTheExamples(overlyDescriptiveField: &quot;This is a description (and more)&quot;, exampleTags: [])" type="Pickles.TestHarness.xunit2.ScenarioOutlinesFeature" method="DealCorrectlyWithParenthesisInTheExamples" time="0.0014902" result="Pass">
        <traits>
          <trait name="FeatureTitle" value="Scenario Outlines" />
          <trait name="Description" value="Deal correctly with parenthesis in the examples" />
        </traits>
      </test>
      <test name="Pickles.TestHarness.xunit2.ScenarioOutlinesFeature.DealCorrectlyWithBackslashesInTheExamples(filePath: &quot;c:\Temp\&quot;, exampleTags: [])" type="Pickles.TestHarness.xunit2.ScenarioOutlinesFeature" method="DealCorrectlyWithBackslashesInTheExamples" time="0.0010695" result="Pass">
        <traits>
          <trait name="FeatureTitle" value="Scenario Outlines" />
          <trait name="Description" value="Deal correctly with backslashes in the examples" />
        </traits>
      </test>
      <test name="Pickles.TestHarness.xunit2.ScenarioOutlinesFeature.DealWithMultipleNamedExampleSectionsWithDuplicateValues(result: &quot;pass&quot;, exampleTags: [])" type="Pickles.TestHarness.xunit2.ScenarioOutlinesFeature" method="DealWithMultipleNamedExampleSectionsWithDuplicateValues" time="0.0004573" result="Pass">
        <traits>
          <trait name="FeatureTitle" value="Scenario Outlines" />
          <trait name="Description" value="Deal with multiple named example sections with duplicate values" />
        </traits>
      </test>
      <test name="Pickles.TestHarness.xunit2.ScenarioOutlinesFeature.DealWithMultipleNamedExampleSectionsWithDuplicateValues(result: &quot;fail&quot;, exampleTags: [])" type="Pickles.TestHarness.xunit2.ScenarioOutlinesFeature" method="DealWithMultipleNamedExampleSectionsWithDuplicateValues" time="0.0038342" result="Fail">
        <traits>
          <trait name="FeatureTitle" value="Scenario Outlines" />
          <trait name="Description" value="Deal with multiple named example sections with duplicate values" />
        </traits>
        <failure exception-type="NFluent.FluentCheckException">
          <message><![CDATA[NFluent.FluentCheckException : \nThe checked value is different from the expected one.\nThe checked value:\n\t[True]\nThe expected value:\n\t[False]]]></message>
          <stack-trace><![CDATA[   at NFluent.Helpers.EqualityHelper.IsEqualTo(Object instance, Object expected)
   at NFluent.Extensibility.Checker`2.ExecuteCheck(Action action, String negatedExceptionMessage)
   at AutomationLayer.MarkTestAs.Failing() in C:\Git\pickles\test-harness\AutomationLayer\MarkTestAs.cs:line 15
   at AutomationLayer.ScenarioOutlineSteps.ThenTheScenarioWill(String result) in C:\Git\pickles\test-harness\AutomationLayer\ScenarioOutlineSteps.cs:line 19
   at TechTalk.SpecFlow.Bindings.BindingInvoker.InvokeBinding(IBinding binding, IContextManager contextManager, Object[] arguments, ITestTracer testTracer, TimeSpan& duration)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStepMatch(BindingMatch match, Object[] arguments)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep(StepInstance stepInstance)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at Pickles.TestHarness.xunit2.ScenarioOutlinesFeature.ScenarioCleanup()
   at Pickles.TestHarness.xunit2.ScenarioOutlinesFeature.DealWithMultipleNamedExampleSectionsWithDuplicateValues(String result, String[] exampleTags) in C:\Git\pickles\test-harness\xunit2\ScenarioOutlines.feature:line 130]]></stack-trace>
        </failure>
      </test>
      <test name="Pickles.TestHarness.xunit2.ScenarioOutlinesFeature.DealWithMultipleNamedExampleSectionsWithDuplicateValues(result: &quot;pass&quot;, exampleTags: [])" type="Pickles.TestHarness.xunit2.ScenarioOutlinesFeature" method="DealWithMultipleNamedExampleSectionsWithDuplicateValues" time="0.0002768" result="Pass">
        <traits>
          <trait name="FeatureTitle" value="Scenario Outlines" />
          <trait name="Description" value="Deal with multiple named example sections with duplicate values" />
        </traits>
      </test>
      <test name="Pickles.TestHarness.xunit2.ScenarioOutlinesFeature.DealWithMultipleNamedExampleSectionsWithDuplicateValues(result: &quot;fail&quot;, exampleTags: [])" type="Pickles.TestHarness.xunit2.ScenarioOutlinesFeature" method="DealWithMultipleNamedExampleSectionsWithDuplicateValues" time="0.0010541" result="Fail">
        <traits>
          <trait name="FeatureTitle" value="Scenario Outlines" />
          <trait name="Description" value="Deal with multiple named example sections with duplicate values" />
        </traits>
        <failure exception-type="NFluent.FluentCheckException">
          <message><![CDATA[NFluent.FluentCheckException : \nThe checked value is different from the expected one.\nThe checked value:\n\t[True]\nThe expected value:\n\t[False]]]></message>
          <stack-trace><![CDATA[   at NFluent.Helpers.EqualityHelper.IsEqualTo(Object instance, Object expected)
   at NFluent.Extensibility.Checker`2.ExecuteCheck(Action action, String negatedExceptionMessage)
   at AutomationLayer.MarkTestAs.Failing() in C:\Git\pickles\test-harness\AutomationLayer\MarkTestAs.cs:line 15
   at AutomationLayer.ScenarioOutlineSteps.ThenTheScenarioWill(String result) in C:\Git\pickles\test-harness\AutomationLayer\ScenarioOutlineSteps.cs:line 19
   at TechTalk.SpecFlow.Bindings.BindingInvoker.InvokeBinding(IBinding binding, IContextManager contextManager, Object[] arguments, ITestTracer testTracer, TimeSpan& duration)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStepMatch(BindingMatch match, Object[] arguments)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep(StepInstance stepInstance)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at Pickles.TestHarness.xunit2.ScenarioOutlinesFeature.ScenarioCleanup()
   at Pickles.TestHarness.xunit2.ScenarioOutlinesFeature.DealWithMultipleNamedExampleSectionsWithDuplicateValues(String result, String[] exampleTags) in C:\Git\pickles\test-harness\xunit2\ScenarioOutlines.feature:line 130]]></stack-trace>
        </failure>
      </test>
      <test name="Pickles.TestHarness.xunit2.ScenarioOutlinesFeature.DealWithMultipleNamedExampleSectionsWithDuplicateValues(result: &quot;inconclusive&quot;, exampleTags: [])" type="Pickles.TestHarness.xunit2.ScenarioOutlinesFeature" method="DealWithMultipleNamedExampleSectionsWithDuplicateValues" time="0.0012803" result="Fail">
        <traits>
          <trait name="FeatureTitle" value="Scenario Outlines" />
          <trait name="Description" value="Deal with multiple named example sections with duplicate values" />
        </traits>
        <failure exception-type="TechTalk.SpecFlow.SpecFlowException">
          <message><![CDATA[TechTalk.SpecFlow.SpecFlowException : Test pending: One or more step definitions are not implemented yet.\r\n  ScenarioOutlineSteps.ThenTheScenarioWill("inconclusive")]]></message>
          <stack-trace><![CDATA[   at TechTalk.SpecFlow.UnitTestProvider.XUnitRuntimeProvider.TestPending(String message)
   at Pickles.TestHarness.xunit2.ScenarioOutlinesFeature.ScenarioCleanup()
   at Pickles.TestHarness.xunit2.ScenarioOutlinesFeature.DealWithMultipleNamedExampleSectionsWithDuplicateValues(String result, String[] exampleTags) in C:\Git\pickles\test-harness\xunit2\ScenarioOutlines.feature:line 130]]></stack-trace>
        </failure>
      </test>
      <test name="Pickles.TestHarness.xunit2.ScenarioOutlinesFeature.DealWithMultipleNamedExampleSectionsWithDuplicateValues(result: &quot;fail&quot;, exampleTags: [])" type="Pickles.TestHarness.xunit2.ScenarioOutlinesFeature" method="DealWithMultipleNamedExampleSectionsWithDuplicateValues" time="0.001451" result="Fail">
        <traits>
          <trait name="FeatureTitle" value="Scenario Outlines" />
          <trait name="Description" value="Deal with multiple named example sections with duplicate values" />
        </traits>
        <failure exception-type="NFluent.FluentCheckException">
          <message><![CDATA[NFluent.FluentCheckException : \nThe checked value is different from the expected one.\nThe checked value:\n\t[True]\nThe expected value:\n\t[False]]]></message>
          <stack-trace><![CDATA[   at NFluent.Helpers.EqualityHelper.IsEqualTo(Object instance, Object expected)
   at NFluent.Extensibility.Checker`2.ExecuteCheck(Action action, String negatedExceptionMessage)
   at AutomationLayer.MarkTestAs.Failing() in C:\Git\pickles\test-harness\AutomationLayer\MarkTestAs.cs:line 15
   at AutomationLayer.ScenarioOutlineSteps.ThenTheScenarioWill(String result) in C:\Git\pickles\test-harness\AutomationLayer\ScenarioOutlineSteps.cs:line 19
   at TechTalk.SpecFlow.Bindings.BindingInvoker.InvokeBinding(IBinding binding, IContextManager contextManager, Object[] arguments, ITestTracer testTracer, TimeSpan& duration)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStepMatch(BindingMatch match, Object[] arguments)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep(StepInstance stepInstance)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at Pickles.TestHarness.xunit2.ScenarioOutlinesFeature.ScenarioCleanup()
   at Pickles.TestHarness.xunit2.ScenarioOutlinesFeature.DealWithMultipleNamedExampleSectionsWithDuplicateValues(String result, String[] exampleTags) in C:\Git\pickles\test-harness\xunit2\ScenarioOutlines.feature:line 130]]></stack-trace>
        </failure>
      </test>
      <test name="Pickles.TestHarness.xunit2.ScenarioOutlinesFeature.DealWithMultipleNamedExampleSectionsWithDuplicateValues(result: &quot;pass&quot;, exampleTags: [])" type="Pickles.TestHarness.xunit2.ScenarioOutlinesFeature" method="DealWithMultipleNamedExampleSectionsWithDuplicateValues" time="0.0001945" result="Pass">
        <traits>
          <trait name="FeatureTitle" value="Scenario Outlines" />
          <trait name="Description" value="Deal with multiple named example sections with duplicate values" />
        </traits>
      </test>
      <test name="Pickles.TestHarness.xunit2.ScenarioOutlinesFeature.DealWithMultipleExampleSectionsWithDuplicateValues(result: &quot;pass&quot;, exampleTags: [])" type="Pickles.TestHarness.xunit2.ScenarioOutlinesFeature" method="DealWithMultipleExampleSectionsWithDuplicateValues" time="0.0005891" result="Pass">
        <traits>
          <trait name="FeatureTitle" value="Scenario Outlines" />
          <trait name="Description" value="Deal with multiple example sections with duplicate values" />
        </traits>
      </test>
      <test name="Pickles.TestHarness.xunit2.ScenarioOutlinesFeature.DealWithMultipleExampleSectionsWithDuplicateValues(result: &quot;fail&quot;, exampleTags: [])" type="Pickles.TestHarness.xunit2.ScenarioOutlinesFeature" method="DealWithMultipleExampleSectionsWithDuplicateValues" time="0.003554" result="Fail">
        <traits>
          <trait name="FeatureTitle" value="Scenario Outlines" />
          <trait name="Description" value="Deal with multiple example sections with duplicate values" />
        </traits>
        <failure exception-type="NFluent.FluentCheckException">
          <message><![CDATA[NFluent.FluentCheckException : \nThe checked value is different from the expected one.\nThe checked value:\n\t[True]\nThe expected value:\n\t[False]]]></message>
          <stack-trace><![CDATA[   at NFluent.Helpers.EqualityHelper.IsEqualTo(Object instance, Object expected)
   at NFluent.Extensibility.Checker`2.ExecuteCheck(Action action, String negatedExceptionMessage)
   at AutomationLayer.MarkTestAs.Failing() in C:\Git\pickles\test-harness\AutomationLayer\MarkTestAs.cs:line 15
   at AutomationLayer.ScenarioOutlineSteps.ThenTheScenarioWill(String result) in C:\Git\pickles\test-harness\AutomationLayer\ScenarioOutlineSteps.cs:line 19
   at TechTalk.SpecFlow.Bindings.BindingInvoker.InvokeBinding(IBinding binding, IContextManager contextManager, Object[] arguments, ITestTracer testTracer, TimeSpan& duration)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStepMatch(BindingMatch match, Object[] arguments)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep(StepInstance stepInstance)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at Pickles.TestHarness.xunit2.ScenarioOutlinesFeature.ScenarioCleanup()
   at Pickles.TestHarness.xunit2.ScenarioOutlinesFeature.DealWithMultipleExampleSectionsWithDuplicateValues(String result, String[] exampleTags) in C:\Git\pickles\test-harness\xunit2\ScenarioOutlines.feature:line 102]]></stack-trace>
        </failure>
      </test>
      <test name="Pickles.TestHarness.xunit2.ScenarioOutlinesFeature.DealWithMultipleExampleSectionsWithDuplicateValues(result: &quot;pass&quot;, exampleTags: [])" type="Pickles.TestHarness.xunit2.ScenarioOutlinesFeature" method="DealWithMultipleExampleSectionsWithDuplicateValues" time="0.0002798" result="Pass">
        <traits>
          <trait name="FeatureTitle" value="Scenario Outlines" />
          <trait name="Description" value="Deal with multiple example sections with duplicate values" />
        </traits>
      </test>
      <test name="Pickles.TestHarness.xunit2.ScenarioOutlinesFeature.DealWithMultipleExampleSectionsWithDuplicateValues(result: &quot;fail&quot;, exampleTags: [])" type="Pickles.TestHarness.xunit2.ScenarioOutlinesFeature" method="DealWithMultipleExampleSectionsWithDuplicateValues" time="0.0047909" result="Fail">
        <traits>
          <trait name="FeatureTitle" value="Scenario Outlines" />
          <trait name="Description" value="Deal with multiple example sections with duplicate values" />
        </traits>
        <failure exception-type="NFluent.FluentCheckException">
          <message><![CDATA[NFluent.FluentCheckException : \nThe checked value is different from the expected one.\nThe checked value:\n\t[True]\nThe expected value:\n\t[False]]]></message>
          <stack-trace><![CDATA[   at NFluent.Helpers.EqualityHelper.IsEqualTo(Object instance, Object expected)
   at NFluent.Extensibility.Checker`2.ExecuteCheck(Action action, String negatedExceptionMessage)
   at AutomationLayer.MarkTestAs.Failing() in C:\Git\pickles\test-harness\AutomationLayer\MarkTestAs.cs:line 15
   at AutomationLayer.ScenarioOutlineSteps.ThenTheScenarioWill(String result) in C:\Git\pickles\test-harness\AutomationLayer\ScenarioOutlineSteps.cs:line 19
   at TechTalk.SpecFlow.Bindings.BindingInvoker.InvokeBinding(IBinding binding, IContextManager contextManager, Object[] arguments, ITestTracer testTracer, TimeSpan& duration)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStepMatch(BindingMatch match, Object[] arguments)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep(StepInstance stepInstance)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at Pickles.TestHarness.xunit2.ScenarioOutlinesFeature.ScenarioCleanup()
   at Pickles.TestHarness.xunit2.ScenarioOutlinesFeature.DealWithMultipleExampleSectionsWithDuplicateValues(String result, String[] exampleTags) in C:\Git\pickles\test-harness\xunit2\ScenarioOutlines.feature:line 102]]></stack-trace>
        </failure>
      </test>
      <test name="Pickles.TestHarness.xunit2.ScenarioOutlinesFeature.DealWithMultipleExampleSectionsWithDuplicateValues(result: &quot;inconclusive&quot;, exampleTags: [])" type="Pickles.TestHarness.xunit2.ScenarioOutlinesFeature" method="DealWithMultipleExampleSectionsWithDuplicateValues" time="0.0014314" result="Fail">
        <traits>
          <trait name="FeatureTitle" value="Scenario Outlines" />
          <trait name="Description" value="Deal with multiple example sections with duplicate values" />
        </traits>
        <failure exception-type="TechTalk.SpecFlow.SpecFlowException">
          <message><![CDATA[TechTalk.SpecFlow.SpecFlowException : Test pending: One or more step definitions are not implemented yet.\r\n  ScenarioOutlineSteps.ThenTheScenarioWill("inconclusive")]]></message>
          <stack-trace><![CDATA[   at TechTalk.SpecFlow.UnitTestProvider.XUnitRuntimeProvider.TestPending(String message)
   at Pickles.TestHarness.xunit2.ScenarioOutlinesFeature.ScenarioCleanup()
   at Pickles.TestHarness.xunit2.ScenarioOutlinesFeature.DealWithMultipleExampleSectionsWithDuplicateValues(String result, String[] exampleTags) in C:\Git\pickles\test-harness\xunit2\ScenarioOutlines.feature:line 102]]></stack-trace>
        </failure>
      </test>
      <test name="Pickles.TestHarness.xunit2.ScenarioOutlinesFeature.DealWithMultipleExampleSectionsWithDuplicateValues(result: &quot;fail&quot;, exampleTags: [])" type="Pickles.TestHarness.xunit2.ScenarioOutlinesFeature" method="DealWithMultipleExampleSectionsWithDuplicateValues" time="0.0010222" result="Fail">
        <traits>
          <trait name="FeatureTitle" value="Scenario Outlines" />
          <trait name="Description" value="Deal with multiple example sections with duplicate values" />
        </traits>
        <failure exception-type="NFluent.FluentCheckException">
          <message><![CDATA[NFluent.FluentCheckException : \nThe checked value is different from the expected one.\nThe checked value:\n\t[True]\nThe expected value:\n\t[False]]]></message>
          <stack-trace><![CDATA[   at NFluent.Helpers.EqualityHelper.IsEqualTo(Object instance, Object expected)
   at NFluent.Extensibility.Checker`2.ExecuteCheck(Action action, String negatedExceptionMessage)
   at AutomationLayer.MarkTestAs.Failing() in C:\Git\pickles\test-harness\AutomationLayer\MarkTestAs.cs:line 15
   at AutomationLayer.ScenarioOutlineSteps.ThenTheScenarioWill(String result) in C:\Git\pickles\test-harness\AutomationLayer\ScenarioOutlineSteps.cs:line 19
   at TechTalk.SpecFlow.Bindings.BindingInvoker.InvokeBinding(IBinding binding, IContextManager contextManager, Object[] arguments, ITestTracer testTracer, TimeSpan& duration)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStepMatch(BindingMatch match, Object[] arguments)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep(StepInstance stepInstance)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at Pickles.TestHarness.xunit2.ScenarioOutlinesFeature.ScenarioCleanup()
   at Pickles.TestHarness.xunit2.ScenarioOutlinesFeature.DealWithMultipleExampleSectionsWithDuplicateValues(String result, String[] exampleTags) in C:\Git\pickles\test-harness\xunit2\ScenarioOutlines.feature:line 102]]></stack-trace>
        </failure>
      </test>
      <test name="Pickles.TestHarness.xunit2.ScenarioOutlinesFeature.DealWithMultipleExampleSectionsWithDuplicateValues(result: &quot;pass&quot;, exampleTags: [])" type="Pickles.TestHarness.xunit2.ScenarioOutlinesFeature" method="DealWithMultipleExampleSectionsWithDuplicateValues" time="0.0024869" result="Pass">
        <traits>
          <trait name="FeatureTitle" value="Scenario Outlines" />
          <trait name="Description" value="Deal with multiple example sections with duplicate values" />
        </traits>
      </test>
      <test name="Pickles.TestHarness.xunit2.ScenarioOutlinesFeature.DealWithMultipleNamedExampleSectionsWithoutDuplicateValues(result: &quot;pass&quot;, exampleTags: [])" type="Pickles.TestHarness.xunit2.ScenarioOutlinesFeature" method="DealWithMultipleNamedExampleSectionsWithoutDuplicateValues" time="0.0004692" result="Pass">
        <traits>
          <trait name="FeatureTitle" value="Scenario Outlines" />
          <trait name="Description" value="Deal with multiple named example sections without duplicate values" />
        </traits>
      </test>
      <test name="Pickles.TestHarness.xunit2.ScenarioOutlinesFeature.DealWithMultipleNamedExampleSectionsWithoutDuplicateValues(result: &quot;fail&quot;, exampleTags: [])" type="Pickles.TestHarness.xunit2.ScenarioOutlinesFeature" method="DealWithMultipleNamedExampleSectionsWithoutDuplicateValues" time="0.0011992" result="Fail">
        <traits>
          <trait name="FeatureTitle" value="Scenario Outlines" />
          <trait name="Description" value="Deal with multiple named example sections without duplicate values" />
        </traits>
        <failure exception-type="NFluent.FluentCheckException">
          <message><![CDATA[NFluent.FluentCheckException : \nThe checked value is different from the expected one.\nThe checked value:\n\t[True]\nThe expected value:\n\t[False]]]></message>
          <stack-trace><![CDATA[   at NFluent.Helpers.EqualityHelper.IsEqualTo(Object instance, Object expected)
   at NFluent.Extensibility.Checker`2.ExecuteCheck(Action action, String negatedExceptionMessage)
   at AutomationLayer.MarkTestAs.Failing() in C:\Git\pickles\test-harness\AutomationLayer\MarkTestAs.cs:line 15
   at AutomationLayer.ScenarioOutlineSteps.ThenTheScenarioWill(String result) in C:\Git\pickles\test-harness\AutomationLayer\ScenarioOutlineSteps.cs:line 19
   at TechTalk.SpecFlow.Bindings.BindingInvoker.InvokeBinding(IBinding binding, IContextManager contextManager, Object[] arguments, ITestTracer testTracer, TimeSpan& duration)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStepMatch(BindingMatch match, Object[] arguments)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep(StepInstance stepInstance)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at Pickles.TestHarness.xunit2.ScenarioOutlinesFeature.ScenarioCleanup()
   at Pickles.TestHarness.xunit2.ScenarioOutlinesFeature.DealWithMultipleNamedExampleSectionsWithoutDuplicateValues(String result, String[] exampleTags) in C:\Git\pickles\test-harness\xunit2\ScenarioOutlines.feature:line 118]]></stack-trace>
        </failure>
      </test>
      <test name="Pickles.TestHarness.xunit2.ScenarioOutlinesFeature.DealWithMultipleNamedExampleSectionsWithoutDuplicateValues(result: &quot;inconclusive&quot;, exampleTags: [])" type="Pickles.TestHarness.xunit2.ScenarioOutlinesFeature" method="DealWithMultipleNamedExampleSectionsWithoutDuplicateValues" time="0.0012875" result="Fail">
        <traits>
          <trait name="FeatureTitle" value="Scenario Outlines" />
          <trait name="Description" value="Deal with multiple named example sections without duplicate values" />
        </traits>
        <failure exception-type="TechTalk.SpecFlow.SpecFlowException">
          <message><![CDATA[TechTalk.SpecFlow.SpecFlowException : Test pending: One or more step definitions are not implemented yet.\r\n  ScenarioOutlineSteps.ThenTheScenarioWill("inconclusive")]]></message>
          <stack-trace><![CDATA[   at TechTalk.SpecFlow.UnitTestProvider.XUnitRuntimeProvider.TestPending(String message)
   at Pickles.TestHarness.xunit2.ScenarioOutlinesFeature.ScenarioCleanup()
   at Pickles.TestHarness.xunit2.ScenarioOutlinesFeature.DealWithMultipleNamedExampleSectionsWithoutDuplicateValues(String result, String[] exampleTags) in C:\Git\pickles\test-harness\xunit2\ScenarioOutlines.feature:line 118]]></stack-trace>
        </failure>
      </test>
    </collection>
    <collection total="1" passed="1" failed="0" skipped="0" name="Test collection for Pickles.TestHarness.xunit2.MinimalFeatures.PassingFeature" time="0.003">
      <test name="Pickles.TestHarness.xunit2.MinimalFeatures.PassingFeature.PassingFeaturePassingScenario" type="Pickles.TestHarness.xunit2.MinimalFeatures.PassingFeature" method="PassingFeaturePassingScenario" time="0.0029853" result="Pass">
        <traits>
          <trait name="FeatureTitle" value="Passing" />
          <trait name="Description" value="Passing Feature Passing Scenario" />
        </traits>
      </test>
    </collection>
    <collection total="13" passed="13" failed="0" skipped="0" name="Test collection for Pickles.TestHarness.xunit2.ScenariosWithSpecialCharactersFeature" time="0.354">
      <test name="Pickles.TestHarness.xunit2.ScenariosWithSpecialCharactersFeature.ThisIsAScenarioOutlineWithParenthesesHyphenAndComma10_2030_40(result: &quot;pass_1&quot;, exampleTags: [])" type="Pickles.TestHarness.xunit2.ScenariosWithSpecialCharactersFeature" method="ThisIsAScenarioOutlineWithParenthesesHyphenAndComma10_2030_40" time="0.1972197" result="Pass">
        <traits>
          <trait name="FeatureTitle" value="Scenarios With Special Characters" />
          <trait name="Description" value="This is a scenario outline with parentheses, hyphen and comma (10-20, 30-40)" />
        </traits>
      </test>
      <test name="Pickles.TestHarness.xunit2.ScenariosWithSpecialCharactersFeature.ThisIsAScenarioOutlineWithAmpersand(result: &quot;pass_1&quot;, exampleTags: [])" type="Pickles.TestHarness.xunit2.ScenariosWithSpecialCharactersFeature" method="ThisIsAScenarioOutlineWithAmpersand" time="0.0014871" result="Pass">
        <traits>
          <trait name="FeatureTitle" value="Scenarios With Special Characters" />
          <trait name="Description" value="This is a scenario outline with ampersand &amp;" />
        </traits>
      </test>
      <test name="Pickles.TestHarness.xunit2.ScenariosWithSpecialCharactersFeature.ThisIsAScenarioWithSpanishCharactersNaeiou" type="Pickles.TestHarness.xunit2.ScenariosWithSpecialCharactersFeature" method="ThisIsAScenarioWithSpanishCharactersNaeiou" time="0.0011728" result="Pass">
        <traits>
          <trait name="FeatureTitle" value="Scenarios With Special Characters" />
          <trait name="Description" value="This is a scenario with spanish characters ñáéíóú" />
        </traits>
      </test>
      <test name="Pickles.TestHarness.xunit2.ScenariosWithSpecialCharactersFeature.ThisIsAScenarioWithParenthesesHyphenAndComma10_2030_40" type="Pickles.TestHarness.xunit2.ScenariosWithSpecialCharactersFeature" method="ThisIsAScenarioWithParenthesesHyphenAndComma10_2030_40" time="0.1495393" result="Pass">
        <traits>
          <trait name="FeatureTitle" value="Scenarios With Special Characters" />
          <trait name="Description" value="This is a scenario with parentheses, hyphen and comma (10-20, 30-40)" />
        </traits>
      </test>
      <test name="Pickles.TestHarness.xunit2.ScenariosWithSpecialCharactersFeature.ThisScenarioContainsExamplesWithRegex_SpecialCharacters(regex: &quot;**&quot;, exampleTags: [])" type="Pickles.TestHarness.xunit2.ScenariosWithSpecialCharactersFeature" method="ThisScenarioContainsExamplesWithRegex_SpecialCharacters" time="0.0015785" result="Pass">
        <traits>
          <trait name="FeatureTitle" value="Scenarios With Special Characters" />
          <trait name="Description" value="This scenario contains examples with Regex-special characters" />
        </traits>
      </test>
      <test name="Pickles.TestHarness.xunit2.ScenariosWithSpecialCharactersFeature.ThisScenarioContainsExamplesWithRegex_SpecialCharacters(regex: &quot;++&quot;, exampleTags: [])" type="Pickles.TestHarness.xunit2.ScenariosWithSpecialCharactersFeature" method="ThisScenarioContainsExamplesWithRegex_SpecialCharacters" time="0.0005067" result="Pass">
        <traits>
          <trait name="FeatureTitle" value="Scenarios With Special Characters" />
          <trait name="Description" value="This scenario contains examples with Regex-special characters" />
        </traits>
      </test>
      <test name="Pickles.TestHarness.xunit2.ScenariosWithSpecialCharactersFeature.ThisScenarioContainsExamplesWithRegex_SpecialCharacters(regex: &quot;.*&quot;, exampleTags: [])" type="Pickles.TestHarness.xunit2.ScenariosWithSpecialCharactersFeature" method="ThisScenarioContainsExamplesWithRegex_SpecialCharacters" time="0.0003556" result="Pass">
        <traits>
          <trait name="FeatureTitle" value="Scenarios With Special Characters" />
          <trait name="Description" value="This scenario contains examples with Regex-special characters" />
        </traits>
      </test>
      <test name="Pickles.TestHarness.xunit2.ScenariosWithSpecialCharactersFeature.ThisScenarioContainsExamplesWithRegex_SpecialCharacters(regex: &quot;[]&quot;, exampleTags: [])" type="Pickles.TestHarness.xunit2.ScenariosWithSpecialCharactersFeature" method="ThisScenarioContainsExamplesWithRegex_SpecialCharacters" time="0.0003344" result="Pass">
        <traits>
          <trait name="FeatureTitle" value="Scenarios With Special Characters" />
          <trait name="Description" value="This scenario contains examples with Regex-special characters" />
        </traits>
      </test>
      <test name="Pickles.TestHarness.xunit2.ScenariosWithSpecialCharactersFeature.ThisScenarioContainsExamplesWithRegex_SpecialCharacters(regex: &quot;{}&quot;, exampleTags: [])" type="Pickles.TestHarness.xunit2.ScenariosWithSpecialCharactersFeature" method="ThisScenarioContainsExamplesWithRegex_SpecialCharacters" time="0.0003677" result="Pass">
        <traits>
          <trait name="FeatureTitle" value="Scenarios With Special Characters" />
          <trait name="Description" value="This scenario contains examples with Regex-special characters" />
        </traits>
      </test>
      <test name="Pickles.TestHarness.xunit2.ScenariosWithSpecialCharactersFeature.ThisScenarioContainsExamplesWithRegex_SpecialCharacters(regex: &quot;()&quot;, exampleTags: [])" type="Pickles.TestHarness.xunit2.ScenariosWithSpecialCharactersFeature" method="ThisScenarioContainsExamplesWithRegex_SpecialCharacters" time="0.0003259" result="Pass">
        <traits>
          <trait name="FeatureTitle" value="Scenarios With Special Characters" />
          <trait name="Description" value="This scenario contains examples with Regex-special characters" />
        </traits>
      </test>
      <test name="Pickles.TestHarness.xunit2.ScenariosWithSpecialCharactersFeature.ThisScenarioContainsExamplesWithRegex_SpecialCharacters(regex: &quot;^.*(?&lt;foo&gt;BAR)\s[^0-9]{3,4}A+$&quot;, exampleTags: [])" type="Pickles.TestHarness.xunit2.ScenariosWithSpecialCharactersFeature" method="ThisScenarioContainsExamplesWithRegex_SpecialCharacters" time="0.0003361" result="Pass">
        <traits>
          <trait name="FeatureTitle" value="Scenarios With Special Characters" />
          <trait name="Description" value="This scenario contains examples with Regex-special characters" />
        </traits>
      </test>
      <test name="Pickles.TestHarness.xunit2.ScenariosWithSpecialCharactersFeature.ThisIsAScenarioOutlineWithGermanUmlautsAouBAOU(result: &quot;pass_1&quot;, exampleTags: [])" type="Pickles.TestHarness.xunit2.ScenariosWithSpecialCharactersFeature" method="ThisIsAScenarioOutlineWithGermanUmlautsAouBAOU" time="0.0005635" result="Pass">
        <traits>
          <trait name="FeatureTitle" value="Scenarios With Special Characters" />
          <trait name="Description" value="This is a scenario outline with german umlauts äöüß ÄÖÜ" />
        </traits>
      </test>
      <test name="Pickles.TestHarness.xunit2.ScenariosWithSpecialCharactersFeature.ThisIsAScenarioWithDanishCharactersAEoaAEOA" type="Pickles.TestHarness.xunit2.ScenariosWithSpecialCharactersFeature" method="ThisIsAScenarioWithDanishCharactersAEoaAEOA" time="0.0004261" result="Pass">
        <traits>
          <trait name="FeatureTitle" value="Scenarios With Special Characters" />
          <trait name="Description" value="This is a scenario with danish characters æøå ÆØÅ" />
        </traits>
      </test>
    </collection>
    <collection total="6" passed="3" failed="2" skipped="1" name="Test collection for Pickles.TestHarness.xunit2.AdditionFeature" time="0.195">
      <test name="Pickles.TestHarness.xunit2.AdditionFeature.AddingSeveralNumbers(firstNumber: &quot;60&quot;, secondNumber: &quot;70&quot;, thirdNumber: &quot;130&quot;, result: &quot;260&quot;, exampleTags: [])" type="Pickles.TestHarness.xunit2.AdditionFeature" method="AddingSeveralNumbers" time="0.0026622" result="Pass">
        <traits>
          <trait name="FeatureTitle" value="Addition" />
          <trait name="Description" value="Adding several numbers" />
        </traits>
      </test>
      <test name="Pickles.TestHarness.xunit2.AdditionFeature.AddingSeveralNumbers(firstNumber: &quot;40&quot;, secondNumber: &quot;50&quot;, thirdNumber: &quot;90&quot;, result: &quot;180&quot;, exampleTags: [])" type="Pickles.TestHarness.xunit2.AdditionFeature" method="AddingSeveralNumbers" time="0.0007781" result="Pass">
        <traits>
          <trait name="FeatureTitle" value="Addition" />
          <trait name="Description" value="Adding several numbers" />
        </traits>
      </test>
      <test name="Pickles.TestHarness.xunit2.AdditionFeature.NotAutomatedAddingTwoNumbers" type="Pickles.TestHarness.xunit2.AdditionFeature" method="NotAutomatedAddingTwoNumbers" time="0.1856882" result="Fail">
        <traits>
          <trait name="FeatureTitle" value="Addition" />
          <trait name="Description" value="Not automated adding two numbers" />
        </traits>
        <failure exception-type="TechTalk.SpecFlow.SpecFlowException">
          <message><![CDATA[TechTalk.SpecFlow.SpecFlowException : Test pending: No matching step definition found for one or more steps.\r\nusing System;\r\nusing TechTalk.SpecFlow;\r\n\r\nnamespace MyNamespace\r\n{\r\n    [Binding]\r\n    public class StepDefinitions\r\n    {\r\n        [Given(@"unimplemented step")]\r\n        public void GivenUnimplementedStep()\r\n        {\r\n            ScenarioContext.Current.Pending();\r\n        }\r\n        \r\n        [When(@"unimplemented step")]\r\n        public void WhenUnimplementedStep()\r\n        {\r\n            ScenarioContext.Current.Pending();\r\n        }\r\n        \r\n        [Then(@"unimplemented step")]\r\n        public void ThenUnimplementedStep()\r\n        {\r\n            ScenarioContext.Current.Pending();\r\n        }\r\n    }\r\n}\r\n]]></message>
          <stack-trace><![CDATA[   at TechTalk.SpecFlow.UnitTestProvider.XUnitRuntimeProvider.TestPending(String message)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at Pickles.TestHarness.xunit2.AdditionFeature.ScenarioCleanup()
   at Pickles.TestHarness.xunit2.AdditionFeature.NotAutomatedAddingTwoNumbers() in C:\Git\pickles\test-harness\xunit2\Addition.feature:line 46]]></stack-trace>
        </failure>
      </test>
      <test name="Pickles.TestHarness.xunit2.AdditionFeature.AddTwoNumbers" type="Pickles.TestHarness.xunit2.AdditionFeature" method="AddTwoNumbers" time="0.0017846" result="Pass">
        <traits>
          <trait name="FeatureTitle" value="Addition" />
          <trait name="Description" value="Add two numbers" />
        </traits>
      </test>
      <test name="Pickles.TestHarness.xunit2.AdditionFeature.IgnoredAddingTwoNumbers" type="Pickles.TestHarness.xunit2.AdditionFeature" method="IgnoredAddingTwoNumbers" time="0" result="Skip">
        <traits>
          <trait name="FeatureTitle" value="Addition" />
          <trait name="Description" value="Ignored adding two numbers" />
        </traits>
        <reason><![CDATA[Ignored]]></reason>
      </test>
      <test name="Pickles.TestHarness.xunit2.AdditionFeature.FailToAddTwoNumbers" type="Pickles.TestHarness.xunit2.AdditionFeature" method="FailToAddTwoNumbers" time="0.0044709" result="Fail">
        <traits>
          <trait name="FeatureTitle" value="Addition" />
          <trait name="Description" value="Fail to add two numbers" />
        </traits>
        <failure exception-type="System.FormatException">
          <message><![CDATA[System.FormatException : Input string was not in a correct format.]]></message>
          <stack-trace><![CDATA[   at System.Number.StringToNumber(String str, NumberStyles options, NumberBuffer& number, NumberFormatInfo info, Boolean parseDecimal)
   at System.Number.ParseInt32(String s, NumberStyles style, NumberFormatInfo info)
   at System.String.System.IConvertible.ToInt32(IFormatProvider provider)
   at System.Convert.ChangeType(Object value, Type conversionType, IFormatProvider provider)
   at System.Linq.Enumerable.<SelectIterator>d__5`2.MoveNext()
   at System.Linq.Buffer`1..ctor(IEnumerable`1 source)
   at System.Linq.Enumerable.ToArray[TSource](IEnumerable`1 source)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.GetExecuteArguments(BindingMatch match)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep(StepInstance stepInstance)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at Pickles.TestHarness.xunit2.AdditionFeature.ScenarioCleanup()
   at Pickles.TestHarness.xunit2.AdditionFeature.FailToAddTwoNumbers() in C:\Git\pickles\test-harness\xunit2\Addition.feature:line 34]]></stack-trace>
        </failure>
      </test>
    </collection>
    <collection total="2" passed="1" failed="1" skipped="0" name="Test collection for Pickles.TestHarness.xunit2.MinimalFeatures.InconclusiveFeature" time="0.006">
      <test name="Pickles.TestHarness.xunit2.MinimalFeatures.InconclusiveFeature.InconclusiveFeaturePassingScenario" type="Pickles.TestHarness.xunit2.MinimalFeatures.InconclusiveFeature" method="InconclusiveFeaturePassingScenario" time="0.0011753" result="Pass">
        <traits>
          <trait name="FeatureTitle" value="Inconclusive" />
          <trait name="Description" value="Inconclusive Feature Passing Scenario" />
        </traits>
      </test>
      <test name="Pickles.TestHarness.xunit2.MinimalFeatures.InconclusiveFeature.InconclusiveFeatureInconclusiveScenario" type="Pickles.TestHarness.xunit2.MinimalFeatures.InconclusiveFeature" method="InconclusiveFeatureInconclusiveScenario" time="0.0051215" result="Fail">
        <traits>
          <trait name="FeatureTitle" value="Inconclusive" />
          <trait name="Description" value="Inconclusive Feature Inconclusive Scenario" />
        </traits>
        <failure exception-type="TechTalk.SpecFlow.SpecFlowException">
          <message><![CDATA[TechTalk.SpecFlow.SpecFlowException : Test pending: One or more step definitions are not implemented yet.\r\n  MinimalSteps.ThenInconclusiveStep()]]></message>
          <stack-trace><![CDATA[   at TechTalk.SpecFlow.UnitTestProvider.XUnitRuntimeProvider.TestPending(String message)
   at Pickles.TestHarness.xunit2.MinimalFeatures.InconclusiveFeature.ScenarioCleanup()
   at Pickles.TestHarness.xunit2.MinimalFeatures.InconclusiveFeature.InconclusiveFeatureInconclusiveScenario() in C:\Git\pickles\test-harness\xunit2\Minimal Features\Inconclusive.feature:line 7]]></stack-trace>
        </failure>
      </test>
    </collection>
    <collection total="3" passed="0" failed="3" skipped="0" name="Test collection for Pickles.TestHarness.xunit2.FailingBackgroundFeature" time="0.019">
      <test name="Pickles.TestHarness.xunit2.FailingBackgroundFeature.AddingSeveralNumbers(firstNumber: &quot;60&quot;, secondNumber: &quot;70&quot;, thirdNumber: &quot;130&quot;, result: &quot;260&quot;, exampleTags: [])" type="Pickles.TestHarness.xunit2.FailingBackgroundFeature" method="AddingSeveralNumbers" time="0.0120012" result="Fail">
        <traits>
          <trait name="FeatureTitle" value="Failing Background" />
          <trait name="Description" value="Adding several numbers" />
        </traits>
        <failure exception-type="NFluent.FluentCheckException">
          <message><![CDATA[NFluent.FluentCheckException : \nThe checked value is different from the expected one.\nThe checked value:\n\t[True]\nThe expected value:\n\t[False]]]></message>
          <stack-trace><![CDATA[   at NFluent.Helpers.EqualityHelper.IsEqualTo(Object instance, Object expected)
   at NFluent.Extensibility.Checker`2.ExecuteCheck(Action action, String negatedExceptionMessage)
   at AutomationLayer.MarkTestAs.Failing() in C:\Git\pickles\test-harness\AutomationLayer\MarkTestAs.cs:line 15
   at AutomationLayer.AdditionSteps.GivenTheBackgroundStepFails() in C:\Git\pickles\test-harness\AutomationLayer\AdditionSteps.cs:line 25
   at TechTalk.SpecFlow.Bindings.BindingInvoker.InvokeBinding(IBinding binding, IContextManager contextManager, Object[] arguments, ITestTracer testTracer, TimeSpan& duration)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStepMatch(BindingMatch match, Object[] arguments)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep(StepInstance stepInstance)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at Pickles.TestHarness.xunit2.FailingBackgroundFeature.ScenarioCleanup()
   at Pickles.TestHarness.xunit2.FailingBackgroundFeature.AddingSeveralNumbers(String firstNumber, String secondNumber, String thirdNumber, String result, String[] exampleTags) in C:\Git\pickles\test-harness\xunit2\FailingBackground.feature:line 19]]></stack-trace>
        </failure>
      </test>
      <test name="Pickles.TestHarness.xunit2.FailingBackgroundFeature.AddingSeveralNumbers(firstNumber: &quot;40&quot;, secondNumber: &quot;50&quot;, thirdNumber: &quot;90&quot;, result: &quot;180&quot;, exampleTags: [])" type="Pickles.TestHarness.xunit2.FailingBackgroundFeature" method="AddingSeveralNumbers" time="0.0016856" result="Fail">
        <traits>
          <trait name="FeatureTitle" value="Failing Background" />
          <trait name="Description" value="Adding several numbers" />
        </traits>
        <failure exception-type="NFluent.FluentCheckException">
          <message><![CDATA[NFluent.FluentCheckException : \nThe checked value is different from the expected one.\nThe checked value:\n\t[True]\nThe expected value:\n\t[False]]]></message>
          <stack-trace><![CDATA[   at NFluent.Helpers.EqualityHelper.IsEqualTo(Object instance, Object expected)
   at NFluent.Extensibility.Checker`2.ExecuteCheck(Action action, String negatedExceptionMessage)
   at AutomationLayer.MarkTestAs.Failing() in C:\Git\pickles\test-harness\AutomationLayer\MarkTestAs.cs:line 15
   at AutomationLayer.AdditionSteps.GivenTheBackgroundStepFails() in C:\Git\pickles\test-harness\AutomationLayer\AdditionSteps.cs:line 25
   at TechTalk.SpecFlow.Bindings.BindingInvoker.InvokeBinding(IBinding binding, IContextManager contextManager, Object[] arguments, ITestTracer testTracer, TimeSpan& duration)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStepMatch(BindingMatch match, Object[] arguments)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep(StepInstance stepInstance)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at Pickles.TestHarness.xunit2.FailingBackgroundFeature.ScenarioCleanup()
   at Pickles.TestHarness.xunit2.FailingBackgroundFeature.AddingSeveralNumbers(String firstNumber, String secondNumber, String thirdNumber, String result, String[] exampleTags) in C:\Git\pickles\test-harness\xunit2\FailingBackground.feature:line 19]]></stack-trace>
        </failure>
      </test>
      <test name="Pickles.TestHarness.xunit2.FailingBackgroundFeature.AddTwoNumbers" type="Pickles.TestHarness.xunit2.FailingBackgroundFeature" method="AddTwoNumbers" time="0.005675" result="Fail">
        <traits>
          <trait name="FeatureTitle" value="Failing Background" />
          <trait name="Description" value="Add two numbers" />
        </traits>
        <failure exception-type="NFluent.FluentCheckException">
          <message><![CDATA[NFluent.FluentCheckException : \nThe checked value is different from the expected one.\nThe checked value:\n\t[True]\nThe expected value:\n\t[False]]]></message>
          <stack-trace><![CDATA[   at NFluent.Helpers.EqualityHelper.IsEqualTo(Object instance, Object expected)
   at NFluent.Extensibility.Checker`2.ExecuteCheck(Action action, String negatedExceptionMessage)
   at AutomationLayer.MarkTestAs.Failing() in C:\Git\pickles\test-harness\AutomationLayer\MarkTestAs.cs:line 15
   at AutomationLayer.AdditionSteps.GivenTheBackgroundStepFails() in C:\Git\pickles\test-harness\AutomationLayer\AdditionSteps.cs:line 25
   at TechTalk.SpecFlow.Bindings.BindingInvoker.InvokeBinding(IBinding binding, IContextManager contextManager, Object[] arguments, ITestTracer testTracer, TimeSpan& duration)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStepMatch(BindingMatch match, Object[] arguments)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep(StepInstance stepInstance)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at Pickles.TestHarness.xunit2.FailingBackgroundFeature.ScenarioCleanup()
   at Pickles.TestHarness.xunit2.FailingBackgroundFeature.AddTwoNumbers() in C:\Git\pickles\test-harness\xunit2\FailingBackground.feature:line 12]]></stack-trace>
        </failure>
      </test>
    </collection>
  </assembly>
</assemblies>