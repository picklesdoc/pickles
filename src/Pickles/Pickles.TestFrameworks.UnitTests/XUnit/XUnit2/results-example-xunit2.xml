<?xml version="1.0" encoding="utf-8"?>
<assemblies>
  <assembly name="c:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\xunit2\bin\Debug\xunit2Harness.DLL" environment="64-bit .NET 4.0.30319.42000 [collection-per-class, non-parallel]" test-framework="xUnit.net 2.1.0.3179" run-date="2017-08-08" run-time="12:19:52" config-file="c:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\xunit2\bin\Debug\xunit2Harness.dll.config" total="45" passed="27" failed="17" skipped="1" time="1.400" errors="0">
    <errors />
    <collection total="3" passed="1" failed="2" skipped="0" name="Test collection for Pickles.TestHarness.xunit2.MinimalFeatures.FailingFeature" time="0.007">
      <test name="Pickles.TestHarness.xunit2.MinimalFeatures.FailingFeature.FailingFeaturePassingScenario" type="Pickles.TestHarness.xunit2.MinimalFeatures.FailingFeature" method="FailingFeaturePassingScenario" time="0.0013526" result="Pass">
        <traits>
          <trait name="FeatureTitle" value="Failing" />
          <trait name="Description" value="Failing Feature Passing Scenario" />
        </traits>
      </test>
      <test name="Pickles.TestHarness.xunit2.MinimalFeatures.FailingFeature.FailingFeatureFailingScenario" type="Pickles.TestHarness.xunit2.MinimalFeatures.FailingFeature" method="FailingFeatureFailingScenario" time="0.0032532" result="Fail">
        <traits>
          <trait name="FeatureTitle" value="Failing" />
          <trait name="Description" value="Failing Feature Failing Scenario" />
        </traits>
        <failure exception-type="NFluent.FluentCheckException">
          <message><![CDATA[NFluent.FluentCheckException : \nThe checked value is different from the expected one.\nThe checked value:\n\t[True]\nThe expected value:\n\t[False]]]></message>
          <stack-trace><![CDATA[   ved NFluent.Helpers.EqualityHelper.IsEqualTo(Object instance, Object expected)
   ved NFluent.Extensibility.Checker`2.ExecuteCheck(Action action, String negatedExceptionMessage)
   ved AutomationLayer.MarkTestAs.Failing() i C:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\AutomationLayer\MarkTestAs.cs:linje 15
   ved AutomationLayer.MinimalFeatures.MinimalSteps.ThenFailingStep() i C:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\AutomationLayer\MinimalFeatures\MinimalSteps.cs:linje 30
   ved TechTalk.SpecFlow.Bindings.BindingInvoker.InvokeBinding(IBinding binding, IContextManager contextManager, Object[] arguments, ITestTracer testTracer, TimeSpan& duration)
   ved TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStepMatch(BindingMatch match, Object[] arguments)
   ved TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep(StepInstance stepInstance)
   ved TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   ved Pickles.TestHarness.xunit2.MinimalFeatures.FailingFeature.ScenarioCleanup()
   ved Pickles.TestHarness.xunit2.MinimalFeatures.FailingFeature.FailingFeatureFailingScenario() i C:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\xunit2\Minimal Features\Failing.feature:linje 10]]></stack-trace>
        </failure>
      </test>
      <test name="Pickles.TestHarness.xunit2.MinimalFeatures.FailingFeature.FailingFeatureInconclusiveScenario" type="Pickles.TestHarness.xunit2.MinimalFeatures.FailingFeature" method="FailingFeatureInconclusiveScenario" time="0.0020915" result="Fail">
        <traits>
          <trait name="FeatureTitle" value="Failing" />
          <trait name="Description" value="Failing Feature Inconclusive Scenario" />
        </traits>
        <failure exception-type="TechTalk.SpecFlow.SpecFlowException">
          <message><![CDATA[TechTalk.SpecFlow.SpecFlowException : Test pending: One or more step definitions are not implemented yet.\r\n  MinimalSteps.ThenInconclusiveStep()]]></message>
          <stack-trace><![CDATA[   ved TechTalk.SpecFlow.UnitTestProvider.XUnitRuntimeProvider.TestPending(String message)
   ved Pickles.TestHarness.xunit2.MinimalFeatures.FailingFeature.ScenarioCleanup()
   ved Pickles.TestHarness.xunit2.MinimalFeatures.FailingFeature.FailingFeatureInconclusiveScenario() i C:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\xunit2\Minimal Features\Failing.feature:linje 7]]></stack-trace>
        </failure>
      </test>
    </collection>
    <collection total="9" passed="9" failed="0" skipped="0" name="Test collection for Pickles.TestHarness.xunit2.ScenariosWithSpecialCharactersFeature" time="0.017">
      <test name="Pickles.TestHarness.xunit2.ScenariosWithSpecialCharactersFeature.ThisIsAScenarioOutlineWithParenthesesHyphenAndComma10_2030_40(result: &quot;pass_1&quot;, exampleTags: [])" type="Pickles.TestHarness.xunit2.ScenariosWithSpecialCharactersFeature" method="ThisIsAScenarioOutlineWithParenthesesHyphenAndComma10_2030_40" time="0.0021581" result="Pass">
        <traits>
          <trait name="FeatureTitle" value="Scenarios With Special Characters" />
          <trait name="Description" value="This is a scenario outline with parentheses, hyphen and comma (10-20, 30-40)" />
        </traits>
      </test>
      <test name="Pickles.TestHarness.xunit2.ScenariosWithSpecialCharactersFeature.ThisIsAScenarioWithParenthesesHyphenAndComma10_2030_40" type="Pickles.TestHarness.xunit2.ScenariosWithSpecialCharactersFeature" method="ThisIsAScenarioWithParenthesesHyphenAndComma10_2030_40" time="0.0033533" result="Pass">
        <traits>
          <trait name="FeatureTitle" value="Scenarios With Special Characters" />
          <trait name="Description" value="This is a scenario with parentheses, hyphen and comma (10-20, 30-40)" />
        </traits>
      </test>
      <test name="Pickles.TestHarness.xunit2.ScenariosWithSpecialCharactersFeature.ThisScenarioContainsExamplesWithRegex_SpecialCharacters(regex: &quot;**&quot;, exampleTags: [])" type="Pickles.TestHarness.xunit2.ScenariosWithSpecialCharactersFeature" method="ThisScenarioContainsExamplesWithRegex_SpecialCharacters" time="0.002582" result="Pass">
        <traits>
          <trait name="FeatureTitle" value="Scenarios With Special Characters" />
          <trait name="Description" value="This scenario contains examples with Regex-special characters" />
        </traits>
      </test>
      <test name="Pickles.TestHarness.xunit2.ScenariosWithSpecialCharactersFeature.ThisScenarioContainsExamplesWithRegex_SpecialCharacters(regex: &quot;++&quot;, exampleTags: [])" type="Pickles.TestHarness.xunit2.ScenariosWithSpecialCharactersFeature" method="ThisScenarioContainsExamplesWithRegex_SpecialCharacters" time="0.0014166" result="Pass">
        <traits>
          <trait name="FeatureTitle" value="Scenarios With Special Characters" />
          <trait name="Description" value="This scenario contains examples with Regex-special characters" />
        </traits>
      </test>
      <test name="Pickles.TestHarness.xunit2.ScenariosWithSpecialCharactersFeature.ThisScenarioContainsExamplesWithRegex_SpecialCharacters(regex: &quot;.*&quot;, exampleTags: [])" type="Pickles.TestHarness.xunit2.ScenariosWithSpecialCharactersFeature" method="ThisScenarioContainsExamplesWithRegex_SpecialCharacters" time="0.0013428" result="Pass">
        <traits>
          <trait name="FeatureTitle" value="Scenarios With Special Characters" />
          <trait name="Description" value="This scenario contains examples with Regex-special characters" />
        </traits>
      </test>
      <test name="Pickles.TestHarness.xunit2.ScenariosWithSpecialCharactersFeature.ThisScenarioContainsExamplesWithRegex_SpecialCharacters(regex: &quot;[]&quot;, exampleTags: [])" type="Pickles.TestHarness.xunit2.ScenariosWithSpecialCharactersFeature" method="ThisScenarioContainsExamplesWithRegex_SpecialCharacters" time="0.0013269" result="Pass">
        <traits>
          <trait name="FeatureTitle" value="Scenarios With Special Characters" />
          <trait name="Description" value="This scenario contains examples with Regex-special characters" />
        </traits>
      </test>
      <test name="Pickles.TestHarness.xunit2.ScenariosWithSpecialCharactersFeature.ThisScenarioContainsExamplesWithRegex_SpecialCharacters(regex: &quot;{}&quot;, exampleTags: [])" type="Pickles.TestHarness.xunit2.ScenariosWithSpecialCharactersFeature" method="ThisScenarioContainsExamplesWithRegex_SpecialCharacters" time="0.0012309" result="Pass">
        <traits>
          <trait name="FeatureTitle" value="Scenarios With Special Characters" />
          <trait name="Description" value="This scenario contains examples with Regex-special characters" />
        </traits>
      </test>
      <test name="Pickles.TestHarness.xunit2.ScenariosWithSpecialCharactersFeature.ThisScenarioContainsExamplesWithRegex_SpecialCharacters(regex: &quot;()&quot;, exampleTags: [])" type="Pickles.TestHarness.xunit2.ScenariosWithSpecialCharactersFeature" method="ThisScenarioContainsExamplesWithRegex_SpecialCharacters" time="0.0012278" result="Pass">
        <traits>
          <trait name="FeatureTitle" value="Scenarios With Special Characters" />
          <trait name="Description" value="This scenario contains examples with Regex-special characters" />
        </traits>
      </test>
      <test name="Pickles.TestHarness.xunit2.ScenariosWithSpecialCharactersFeature.ThisScenarioContainsExamplesWithRegex_SpecialCharacters(regex: &quot;^.*(?&lt;foo&gt;BAR)\s[^0-9]{3,4}A+$&quot;, exampleTags: [])" type="Pickles.TestHarness.xunit2.ScenariosWithSpecialCharactersFeature" method="ThisScenarioContainsExamplesWithRegex_SpecialCharacters" time="0.0022444" result="Pass">
        <traits>
          <trait name="FeatureTitle" value="Scenarios With Special Characters" />
          <trait name="Description" value="This scenario contains examples with Regex-special characters" />
        </traits>
      </test>
    </collection>
    <collection total="18" passed="12" failed="6" skipped="0" name="Test collection for Pickles.TestHarness.xunit2.ScenarioOutlinesFeature" time="0.028">
      <test name="Pickles.TestHarness.xunit2.ScenarioOutlinesFeature.ThisIsAScenarioOutlineWhereAllScenariosPass(result: &quot;pass_1&quot;, exampleTags: [])" type="Pickles.TestHarness.xunit2.ScenarioOutlinesFeature" method="ThisIsAScenarioOutlineWhereAllScenariosPass" time="0.0030264" result="Pass">
        <traits>
          <trait name="FeatureTitle" value="Scenario Outlines" />
          <trait name="Description" value="This is a scenario outline where all scenarios pass" />
        </traits>
      </test>
      <test name="Pickles.TestHarness.xunit2.ScenarioOutlinesFeature.ThisIsAScenarioOutlineWhereAllScenariosPass(result: &quot;pass_2&quot;, exampleTags: [])" type="Pickles.TestHarness.xunit2.ScenarioOutlinesFeature" method="ThisIsAScenarioOutlineWhereAllScenariosPass" time="0.0004674" result="Pass">
        <traits>
          <trait name="FeatureTitle" value="Scenario Outlines" />
          <trait name="Description" value="This is a scenario outline where all scenarios pass" />
        </traits>
      </test>
      <test name="Pickles.TestHarness.xunit2.ScenarioOutlinesFeature.ThisIsAScenarioOutlineWhereAllScenariosPass(result: &quot;pass_3&quot;, exampleTags: [])" type="Pickles.TestHarness.xunit2.ScenarioOutlinesFeature" method="ThisIsAScenarioOutlineWhereAllScenariosPass" time="0.0004565" result="Pass">
        <traits>
          <trait name="FeatureTitle" value="Scenario Outlines" />
          <trait name="Description" value="This is a scenario outline where all scenarios pass" />
        </traits>
      </test>
      <test name="Pickles.TestHarness.xunit2.ScenarioOutlinesFeature.ThisIsAScenarioOutlineWhereOneScenarioFails(result: &quot;pass_1&quot;, exampleTags: [])" type="Pickles.TestHarness.xunit2.ScenarioOutlinesFeature" method="ThisIsAScenarioOutlineWhereOneScenarioFails" time="0.0006033" result="Pass">
        <traits>
          <trait name="FeatureTitle" value="Scenario Outlines" />
          <trait name="Description" value="This is a scenario outline where one scenario fails" />
        </traits>
      </test>
      <test name="Pickles.TestHarness.xunit2.ScenarioOutlinesFeature.ThisIsAScenarioOutlineWhereOneScenarioFails(result: &quot;pass_2&quot;, exampleTags: [])" type="Pickles.TestHarness.xunit2.ScenarioOutlinesFeature" method="ThisIsAScenarioOutlineWhereOneScenarioFails" time="0.000414" result="Pass">
        <traits>
          <trait name="FeatureTitle" value="Scenario Outlines" />
          <trait name="Description" value="This is a scenario outline where one scenario fails" />
        </traits>
      </test>
      <test name="Pickles.TestHarness.xunit2.ScenarioOutlinesFeature.ThisIsAScenarioOutlineWhereOneScenarioFails(result: &quot;fail_1&quot;, exampleTags: [])" type="Pickles.TestHarness.xunit2.ScenarioOutlinesFeature" method="ThisIsAScenarioOutlineWhereOneScenarioFails" time="0.006423" result="Fail">
        <traits>
          <trait name="FeatureTitle" value="Scenario Outlines" />
          <trait name="Description" value="This is a scenario outline where one scenario fails" />
        </traits>
        <failure exception-type="NFluent.FluentCheckException">
          <message><![CDATA[NFluent.FluentCheckException : \nThe checked value is different from the expected one.\nThe checked value:\n\t[True]\nThe expected value:\n\t[False]]]></message>
          <stack-trace><![CDATA[   ved NFluent.Helpers.EqualityHelper.IsEqualTo(Object instance, Object expected)
   ved NFluent.Extensibility.Checker`2.ExecuteCheck(Action action, String negatedExceptionMessage)
   ved AutomationLayer.MarkTestAs.Failing() i C:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\AutomationLayer\MarkTestAs.cs:linje 15
   ved AutomationLayer.ScenarioOutlineSteps.ThenTheScenarioWill(String result) i C:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\AutomationLayer\ScenarioOutlineSteps.cs:linje 19
   ved TechTalk.SpecFlow.Bindings.BindingInvoker.InvokeBinding(IBinding binding, IContextManager contextManager, Object[] arguments, ITestTracer testTracer, TimeSpan& duration)
   ved TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStepMatch(BindingMatch match, Object[] arguments)
   ved TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep(StepInstance stepInstance)
   ved TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   ved Pickles.TestHarness.xunit2.ScenarioOutlinesFeature.ScenarioCleanup()
   ved Pickles.TestHarness.xunit2.ScenarioOutlinesFeature.ThisIsAScenarioOutlineWhereOneScenarioFails(String result, String[] exampleTags) i C:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\xunit2\ScenarioOutlines.feature:linje 34]]></stack-trace>
        </failure>
      </test>
      <test name="Pickles.TestHarness.xunit2.ScenarioOutlinesFeature.DealCorrectlyWithOverlongExampleValues(value1: &quot;Please enter a valid two letter country code (e.g.&quot;..., value2: &quot;This is just a very very very veery long error mes&quot;..., exampleTags: [])" type="Pickles.TestHarness.xunit2.ScenarioOutlinesFeature" method="DealCorrectlyWithOverlongExampleValues" time="0.0019759" result="Pass">
        <traits>
          <trait name="FeatureTitle" value="Scenario Outlines" />
          <trait name="Description" value="Deal correctly with overlong example values" />
        </traits>
      </test>
      <test name="Pickles.TestHarness.xunit2.ScenarioOutlinesFeature.ThisIsAScenarioOutlineWhereOneScenarioIsInconclusive(result: &quot;pass_1&quot;, exampleTags: [])" type="Pickles.TestHarness.xunit2.ScenarioOutlinesFeature" method="ThisIsAScenarioOutlineWhereOneScenarioIsInconclusive" time="0.0006239" result="Pass">
        <traits>
          <trait name="FeatureTitle" value="Scenario Outlines" />
          <trait name="Description" value="This is a scenario outline where one scenario is inconclusive" />
        </traits>
      </test>
      <test name="Pickles.TestHarness.xunit2.ScenarioOutlinesFeature.ThisIsAScenarioOutlineWhereOneScenarioIsInconclusive(result: &quot;pass_2&quot;, exampleTags: [])" type="Pickles.TestHarness.xunit2.ScenarioOutlinesFeature" method="ThisIsAScenarioOutlineWhereOneScenarioIsInconclusive" time="0.0004334" result="Pass">
        <traits>
          <trait name="FeatureTitle" value="Scenario Outlines" />
          <trait name="Description" value="This is a scenario outline where one scenario is inconclusive" />
        </traits>
      </test>
      <test name="Pickles.TestHarness.xunit2.ScenarioOutlinesFeature.ThisIsAScenarioOutlineWhereOneScenarioIsInconclusive(result: &quot;inconclusive_1&quot;, exampleTags: [])" type="Pickles.TestHarness.xunit2.ScenarioOutlinesFeature" method="ThisIsAScenarioOutlineWhereOneScenarioIsInconclusive" time="0.001797" result="Fail">
        <traits>
          <trait name="FeatureTitle" value="Scenario Outlines" />
          <trait name="Description" value="This is a scenario outline where one scenario is inconclusive" />
        </traits>
        <failure exception-type="TechTalk.SpecFlow.SpecFlowException">
          <message><![CDATA[TechTalk.SpecFlow.SpecFlowException : Test pending: One or more step definitions are not implemented yet.\r\n  ScenarioOutlineSteps.ThenTheScenarioWill("inconclusive_1")]]></message>
          <stack-trace><![CDATA[   ved TechTalk.SpecFlow.UnitTestProvider.XUnitRuntimeProvider.TestPending(String message)
   ved Pickles.TestHarness.xunit2.ScenarioOutlinesFeature.ScenarioCleanup()
   ved Pickles.TestHarness.xunit2.ScenarioOutlinesFeature.ThisIsAScenarioOutlineWhereOneScenarioIsInconclusive(String result, String[] exampleTags) i C:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\xunit2\ScenarioOutlines.feature:linje 21]]></stack-trace>
        </failure>
      </test>
      <test name="Pickles.TestHarness.xunit2.ScenarioOutlinesFeature.AndWeCanGoTotallyBonkersWithMultipleExampleSections_(result: &quot;pass_1&quot;, exampleTags: [])" type="Pickles.TestHarness.xunit2.ScenarioOutlinesFeature" method="AndWeCanGoTotallyBonkersWithMultipleExampleSections_" time="0.0006213" result="Pass">
        <traits>
          <trait name="FeatureTitle" value="Scenario Outlines" />
          <trait name="Description" value="And we can go totally bonkers with multiple example sections." />
        </traits>
      </test>
      <test name="Pickles.TestHarness.xunit2.ScenarioOutlinesFeature.AndWeCanGoTotallyBonkersWithMultipleExampleSections_(result: &quot;pass_2&quot;, exampleTags: [])" type="Pickles.TestHarness.xunit2.ScenarioOutlinesFeature" method="AndWeCanGoTotallyBonkersWithMultipleExampleSections_" time="0.0004325" result="Pass">
        <traits>
          <trait name="FeatureTitle" value="Scenario Outlines" />
          <trait name="Description" value="And we can go totally bonkers with multiple example sections." />
        </traits>
      </test>
      <test name="Pickles.TestHarness.xunit2.ScenarioOutlinesFeature.AndWeCanGoTotallyBonkersWithMultipleExampleSections_(result: &quot;inconclusive_1&quot;, exampleTags: [])" type="Pickles.TestHarness.xunit2.ScenarioOutlinesFeature" method="AndWeCanGoTotallyBonkersWithMultipleExampleSections_" time="0.0017133" result="Fail">
        <traits>
          <trait name="FeatureTitle" value="Scenario Outlines" />
          <trait name="Description" value="And we can go totally bonkers with multiple example sections." />
        </traits>
        <failure exception-type="TechTalk.SpecFlow.SpecFlowException">
          <message><![CDATA[TechTalk.SpecFlow.SpecFlowException : Test pending: One or more step definitions are not implemented yet.\r\n  ScenarioOutlineSteps.ThenTheScenarioWill("inconclusive_1")]]></message>
          <stack-trace><![CDATA[   ved TechTalk.SpecFlow.UnitTestProvider.XUnitRuntimeProvider.TestPending(String message)
   ved Pickles.TestHarness.xunit2.ScenarioOutlinesFeature.ScenarioCleanup()
   ved Pickles.TestHarness.xunit2.ScenarioOutlinesFeature.AndWeCanGoTotallyBonkersWithMultipleExampleSections_(String result, String[] exampleTags) i C:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\xunit2\ScenarioOutlines.feature:linje 45]]></stack-trace>
        </failure>
      </test>
      <test name="Pickles.TestHarness.xunit2.ScenarioOutlinesFeature.AndWeCanGoTotallyBonkersWithMultipleExampleSections_(result: &quot;inconclusive_2&quot;, exampleTags: [])" type="Pickles.TestHarness.xunit2.ScenarioOutlinesFeature" method="AndWeCanGoTotallyBonkersWithMultipleExampleSections_" time="0.0023008" result="Fail">
        <traits>
          <trait name="FeatureTitle" value="Scenario Outlines" />
          <trait name="Description" value="And we can go totally bonkers with multiple example sections." />
        </traits>
        <failure exception-type="TechTalk.SpecFlow.SpecFlowException">
          <message><![CDATA[TechTalk.SpecFlow.SpecFlowException : Test pending: One or more step definitions are not implemented yet.\r\n  ScenarioOutlineSteps.ThenTheScenarioWill("inconclusive_2")]]></message>
          <stack-trace><![CDATA[   ved TechTalk.SpecFlow.UnitTestProvider.XUnitRuntimeProvider.TestPending(String message)
   ved Pickles.TestHarness.xunit2.ScenarioOutlinesFeature.ScenarioCleanup()
   ved Pickles.TestHarness.xunit2.ScenarioOutlinesFeature.AndWeCanGoTotallyBonkersWithMultipleExampleSections_(String result, String[] exampleTags) i C:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\xunit2\ScenarioOutlines.feature:linje 45]]></stack-trace>
        </failure>
      </test>
      <test name="Pickles.TestHarness.xunit2.ScenarioOutlinesFeature.AndWeCanGoTotallyBonkersWithMultipleExampleSections_(result: &quot;fail_1&quot;, exampleTags: [])" type="Pickles.TestHarness.xunit2.ScenarioOutlinesFeature" method="AndWeCanGoTotallyBonkersWithMultipleExampleSections_" time="0.0024876" result="Fail">
        <traits>
          <trait name="FeatureTitle" value="Scenario Outlines" />
          <trait name="Description" value="And we can go totally bonkers with multiple example sections." />
        </traits>
        <failure exception-type="NFluent.FluentCheckException">
          <message><![CDATA[NFluent.FluentCheckException : \nThe checked value is different from the expected one.\nThe checked value:\n\t[True]\nThe expected value:\n\t[False]]]></message>
          <stack-trace><![CDATA[   ved NFluent.Helpers.EqualityHelper.IsEqualTo(Object instance, Object expected)
   ved NFluent.Extensibility.Checker`2.ExecuteCheck(Action action, String negatedExceptionMessage)
   ved AutomationLayer.MarkTestAs.Failing() i C:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\AutomationLayer\MarkTestAs.cs:linje 15
   ved AutomationLayer.ScenarioOutlineSteps.ThenTheScenarioWill(String result) i C:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\AutomationLayer\ScenarioOutlineSteps.cs:linje 19
   ved TechTalk.SpecFlow.Bindings.BindingInvoker.InvokeBinding(IBinding binding, IContextManager contextManager, Object[] arguments, ITestTracer testTracer, TimeSpan& duration)
   ved TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStepMatch(BindingMatch match, Object[] arguments)
   ved TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep(StepInstance stepInstance)
   ved TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   ved Pickles.TestHarness.xunit2.ScenarioOutlinesFeature.ScenarioCleanup()
   ved Pickles.TestHarness.xunit2.ScenarioOutlinesFeature.AndWeCanGoTotallyBonkersWithMultipleExampleSections_(String result, String[] exampleTags) i C:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\xunit2\ScenarioOutlines.feature:linje 45]]></stack-trace>
        </failure>
      </test>
      <test name="Pickles.TestHarness.xunit2.ScenarioOutlinesFeature.AndWeCanGoTotallyBonkersWithMultipleExampleSections_(result: &quot;fail_2&quot;, exampleTags: [])" type="Pickles.TestHarness.xunit2.ScenarioOutlinesFeature" method="AndWeCanGoTotallyBonkersWithMultipleExampleSections_" time="0.0017794" result="Fail">
        <traits>
          <trait name="FeatureTitle" value="Scenario Outlines" />
          <trait name="Description" value="And we can go totally bonkers with multiple example sections." />
        </traits>
        <failure exception-type="NFluent.FluentCheckException">
          <message><![CDATA[NFluent.FluentCheckException : \nThe checked value is different from the expected one.\nThe checked value:\n\t[True]\nThe expected value:\n\t[False]]]></message>
          <stack-trace><![CDATA[   ved NFluent.Helpers.EqualityHelper.IsEqualTo(Object instance, Object expected)
   ved NFluent.Extensibility.Checker`2.ExecuteCheck(Action action, String negatedExceptionMessage)
   ved AutomationLayer.MarkTestAs.Failing() i C:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\AutomationLayer\MarkTestAs.cs:linje 15
   ved AutomationLayer.ScenarioOutlineSteps.ThenTheScenarioWill(String result) i C:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\AutomationLayer\ScenarioOutlineSteps.cs:linje 19
   ved TechTalk.SpecFlow.Bindings.BindingInvoker.InvokeBinding(IBinding binding, IContextManager contextManager, Object[] arguments, ITestTracer testTracer, TimeSpan& duration)
   ved TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStepMatch(BindingMatch match, Object[] arguments)
   ved TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep(StepInstance stepInstance)
   ved TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   ved Pickles.TestHarness.xunit2.ScenarioOutlinesFeature.ScenarioCleanup()
   ved Pickles.TestHarness.xunit2.ScenarioOutlinesFeature.AndWeCanGoTotallyBonkersWithMultipleExampleSections_(String result, String[] exampleTags) i C:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\xunit2\ScenarioOutlines.feature:linje 45]]></stack-trace>
        </failure>
      </test>
      <test name="Pickles.TestHarness.xunit2.ScenarioOutlinesFeature.DealCorrectlyWithParenthesisInTheExamples(description: &quot;This is a description (and more)&quot;, exampleTags: [])" type="Pickles.TestHarness.xunit2.ScenarioOutlinesFeature" method="DealCorrectlyWithParenthesisInTheExamples" time="0.0013232" result="Pass">
        <traits>
          <trait name="FeatureTitle" value="Scenario Outlines" />
          <trait name="Description" value="Deal correctly with parenthesis in the examples" />
        </traits>
      </test>
      <test name="Pickles.TestHarness.xunit2.ScenarioOutlinesFeature.DealCorrectlyWithBackslashesInTheExamples(filePath: &quot;c:\Temp\&quot;, exampleTags: [])" type="Pickles.TestHarness.xunit2.ScenarioOutlinesFeature" method="DealCorrectlyWithBackslashesInTheExamples" time="0.0013017" result="Pass">
        <traits>
          <trait name="FeatureTitle" value="Scenario Outlines" />
          <trait name="Description" value="Deal correctly with backslashes in the examples" />
        </traits>
      </test>
    </collection>
    <collection total="2" passed="1" failed="1" skipped="0" name="Test collection for Pickles.TestHarness.xunit2.MinimalFeatures.InconclusiveFeature" time="0.201">
      <test name="Pickles.TestHarness.xunit2.MinimalFeatures.InconclusiveFeature.InconclusiveFeaturePassingScenario" type="Pickles.TestHarness.xunit2.MinimalFeatures.InconclusiveFeature" method="InconclusiveFeaturePassingScenario" time="0.1722358" result="Pass">
        <traits>
          <trait name="FeatureTitle" value="Inconclusive" />
          <trait name="Description" value="Inconclusive Feature Passing Scenario" />
        </traits>
      </test>
      <test name="Pickles.TestHarness.xunit2.MinimalFeatures.InconclusiveFeature.InconclusiveFeatureInconclusiveScenario" type="Pickles.TestHarness.xunit2.MinimalFeatures.InconclusiveFeature" method="InconclusiveFeatureInconclusiveScenario" time="0.0288446" result="Fail">
        <traits>
          <trait name="FeatureTitle" value="Inconclusive" />
          <trait name="Description" value="Inconclusive Feature Inconclusive Scenario" />
        </traits>
        <failure exception-type="TechTalk.SpecFlow.SpecFlowException">
          <message><![CDATA[TechTalk.SpecFlow.SpecFlowException : Test pending: One or more step definitions are not implemented yet.\r\n  MinimalSteps.ThenInconclusiveStep()]]></message>
          <stack-trace><![CDATA[   ved TechTalk.SpecFlow.UnitTestProvider.XUnitRuntimeProvider.TestPending(String message)
   ved Pickles.TestHarness.xunit2.MinimalFeatures.InconclusiveFeature.ScenarioCleanup()
   ved Pickles.TestHarness.xunit2.MinimalFeatures.InconclusiveFeature.InconclusiveFeatureInconclusiveScenario() i C:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\xunit2\Minimal Features\Inconclusive.feature:linje 7]]></stack-trace>
        </failure>
      </test>
    </collection>
    <collection total="3" passed="0" failed="3" skipped="0" name="Test collection for Pickles.TestHarness.xunit2.NotAutomatedAtAllFeature" time="0.035">
      <test name="Pickles.TestHarness.xunit2.NotAutomatedAtAllFeature.NotAutomatedScenario2" type="Pickles.TestHarness.xunit2.NotAutomatedAtAllFeature" method="NotAutomatedScenario2" time="0.0116048" result="Fail">
        <traits>
          <trait name="FeatureTitle" value="Not Automated At All" />
          <trait name="Description" value="Not automated scenario 2" />
        </traits>
        <failure exception-type="TechTalk.SpecFlow.SpecFlowException">
          <message><![CDATA[TechTalk.SpecFlow.SpecFlowException : Test pending: No matching step definition found for one or more steps.\r\nusing System;\r\nusing TechTalk.SpecFlow;\r\n\r\nnamespace MyNamespace\r\n{\r\n    [Binding]\r\n    public class StepDefinitions\r\n    {\r\n        [Given(@"unimplemented step")]\r\n        public void GivenUnimplementedStep()\r\n        {\r\n            ScenarioContext.Current.Pending();\r\n        }\r\n        \r\n        [When(@"unimplemented step")]\r\n        public void WhenUnimplementedStep()\r\n        {\r\n            ScenarioContext.Current.Pending();\r\n        }\r\n        \r\n        [Then(@"unimplemented step")]\r\n        public void ThenUnimplementedStep()\r\n        {\r\n            ScenarioContext.Current.Pending();\r\n        }\r\n    }\r\n}\r\n]]></message>
          <stack-trace><![CDATA[   ved TechTalk.SpecFlow.UnitTestProvider.XUnitRuntimeProvider.TestPending(String message)
   ved TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   ved Pickles.TestHarness.xunit2.NotAutomatedAtAllFeature.ScenarioCleanup()
   ved Pickles.TestHarness.xunit2.NotAutomatedAtAllFeature.NotAutomatedScenario2() i C:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\xunit2\NotAutomatedAtAll.feature:linje 14]]></stack-trace>
        </failure>
      </test>
      <test name="Pickles.TestHarness.xunit2.NotAutomatedAtAllFeature.NotAutomatedScenario3" type="Pickles.TestHarness.xunit2.NotAutomatedAtAllFeature" method="NotAutomatedScenario3" time="0.0110024" result="Fail">
        <traits>
          <trait name="FeatureTitle" value="Not Automated At All" />
          <trait name="Description" value="Not automated scenario 3" />
        </traits>
        <failure exception-type="TechTalk.SpecFlow.SpecFlowException">
          <message><![CDATA[TechTalk.SpecFlow.SpecFlowException : Test pending: No matching step definition found for one or more steps.\r\nusing System;\r\nusing TechTalk.SpecFlow;\r\n\r\nnamespace MyNamespace\r\n{\r\n    [Binding]\r\n    public class StepDefinitions\r\n    {\r\n        [Given(@"unimplemented step")]\r\n        public void GivenUnimplementedStep()\r\n        {\r\n            ScenarioContext.Current.Pending();\r\n        }\r\n        \r\n        [When(@"unimplemented step")]\r\n        public void WhenUnimplementedStep()\r\n        {\r\n            ScenarioContext.Current.Pending();\r\n        }\r\n        \r\n        [Then(@"unimplemented step")]\r\n        public void ThenUnimplementedStep()\r\n        {\r\n            ScenarioContext.Current.Pending();\r\n        }\r\n    }\r\n}\r\n]]></message>
          <stack-trace><![CDATA[   ved TechTalk.SpecFlow.UnitTestProvider.XUnitRuntimeProvider.TestPending(String message)
   ved TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   ved Pickles.TestHarness.xunit2.NotAutomatedAtAllFeature.ScenarioCleanup()
   ved Pickles.TestHarness.xunit2.NotAutomatedAtAllFeature.NotAutomatedScenario3() i C:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\xunit2\NotAutomatedAtAll.feature:linje 19]]></stack-trace>
        </failure>
      </test>
      <test name="Pickles.TestHarness.xunit2.NotAutomatedAtAllFeature.NotAutomatedScenario1" type="Pickles.TestHarness.xunit2.NotAutomatedAtAllFeature" method="NotAutomatedScenario1" time="0.0125946" result="Fail">
        <traits>
          <trait name="FeatureTitle" value="Not Automated At All" />
          <trait name="Description" value="Not automated scenario 1" />
        </traits>
        <failure exception-type="TechTalk.SpecFlow.SpecFlowException">
          <message><![CDATA[TechTalk.SpecFlow.SpecFlowException : Test pending: No matching step definition found for one or more steps.\r\nusing System;\r\nusing TechTalk.SpecFlow;\r\n\r\nnamespace MyNamespace\r\n{\r\n    [Binding]\r\n    public class StepDefinitions\r\n    {\r\n        [Given(@"unimplemented step")]\r\n        public void GivenUnimplementedStep()\r\n        {\r\n            ScenarioContext.Current.Pending();\r\n        }\r\n        \r\n        [When(@"unimplemented step")]\r\n        public void WhenUnimplementedStep()\r\n        {\r\n            ScenarioContext.Current.Pending();\r\n        }\r\n        \r\n        [Then(@"unimplemented step")]\r\n        public void ThenUnimplementedStep()\r\n        {\r\n            ScenarioContext.Current.Pending();\r\n        }\r\n    }\r\n}\r\n]]></message>
          <stack-trace><![CDATA[   ved TechTalk.SpecFlow.UnitTestProvider.XUnitRuntimeProvider.TestPending(String message)
   ved TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   ved Pickles.TestHarness.xunit2.NotAutomatedAtAllFeature.ScenarioCleanup()
   ved Pickles.TestHarness.xunit2.NotAutomatedAtAllFeature.NotAutomatedScenario1() i C:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\xunit2\NotAutomatedAtAll.feature:linje 9]]></stack-trace>
        </failure>
      </test>
    </collection>
    <collection total="6" passed="3" failed="2" skipped="1" name="Test collection for Pickles.TestHarness.xunit2.AdditionFeature" time="0.230">
      <test name="Pickles.TestHarness.xunit2.AdditionFeature.AddingSeveralNumbers(firstNumber: &quot;60&quot;, secondNumber: &quot;70&quot;, thirdNumber: &quot;130&quot;, result: &quot;260&quot;, exampleTags: [])" type="Pickles.TestHarness.xunit2.AdditionFeature" method="AddingSeveralNumbers" time="0.1013659" result="Pass">
        <traits>
          <trait name="FeatureTitle" value="Addition" />
          <trait name="Description" value="Adding several numbers" />
        </traits>
      </test>
      <test name="Pickles.TestHarness.xunit2.AdditionFeature.AddingSeveralNumbers(firstNumber: &quot;40&quot;, secondNumber: &quot;50&quot;, thirdNumber: &quot;90&quot;, result: &quot;180&quot;, exampleTags: [])" type="Pickles.TestHarness.xunit2.AdditionFeature" method="AddingSeveralNumbers" time="0.0019565" result="Pass">
        <traits>
          <trait name="FeatureTitle" value="Addition" />
          <trait name="Description" value="Adding several numbers" />
        </traits>
      </test>
      <test name="Pickles.TestHarness.xunit2.AdditionFeature.NotAutomatedAddingTwoNumbers" type="Pickles.TestHarness.xunit2.AdditionFeature" method="NotAutomatedAddingTwoNumbers" time="0.1169519" result="Fail">
        <traits>
          <trait name="FeatureTitle" value="Addition" />
          <trait name="Description" value="Not automated adding two numbers" />
        </traits>
        <failure exception-type="TechTalk.SpecFlow.SpecFlowException">
          <message><![CDATA[TechTalk.SpecFlow.SpecFlowException : Test pending: No matching step definition found for one or more steps.\r\nusing System;\r\nusing TechTalk.SpecFlow;\r\n\r\nnamespace MyNamespace\r\n{\r\n    [Binding]\r\n    public class StepDefinitions\r\n    {\r\n        [Given(@"unimplemented step")]\r\n        public void GivenUnimplementedStep()\r\n        {\r\n            ScenarioContext.Current.Pending();\r\n        }\r\n        \r\n        [When(@"unimplemented step")]\r\n        public void WhenUnimplementedStep()\r\n        {\r\n            ScenarioContext.Current.Pending();\r\n        }\r\n        \r\n        [Then(@"unimplemented step")]\r\n        public void ThenUnimplementedStep()\r\n        {\r\n            ScenarioContext.Current.Pending();\r\n        }\r\n    }\r\n}\r\n]]></message>
          <stack-trace><![CDATA[   ved TechTalk.SpecFlow.UnitTestProvider.XUnitRuntimeProvider.TestPending(String message)
   ved TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   ved Pickles.TestHarness.xunit2.AdditionFeature.ScenarioCleanup()
   ved Pickles.TestHarness.xunit2.AdditionFeature.NotAutomatedAddingTwoNumbers() i C:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\xunit2\Addition.feature:linje 46]]></stack-trace>
        </failure>
      </test>
      <test name="Pickles.TestHarness.xunit2.AdditionFeature.AddTwoNumbers" type="Pickles.TestHarness.xunit2.AdditionFeature" method="AddTwoNumbers" time="0.0038264" result="Pass">
        <traits>
          <trait name="FeatureTitle" value="Addition" />
          <trait name="Description" value="Add two numbers" />
        </traits>
      </test>
      <test name="Pickles.TestHarness.xunit2.AdditionFeature.IgnoredAddingTwoNumbers" type="Pickles.TestHarness.xunit2.AdditionFeature" method="IgnoredAddingTwoNumbers" time="0" result="Skip">
        <traits>
          <trait name="FeatureTitle" value="Addition" />
          <trait name="Description" value="Ignored adding two numbers" />
        </traits>
        <reason><![CDATA[Ignored]]></reason>
      </test>
      <test name="Pickles.TestHarness.xunit2.AdditionFeature.FailToAddTwoNumbers" type="Pickles.TestHarness.xunit2.AdditionFeature" method="FailToAddTwoNumbers" time="0.0058113" result="Fail">
        <traits>
          <trait name="FeatureTitle" value="Addition" />
          <trait name="Description" value="Fail to add two numbers" />
        </traits>
        <failure exception-type="System.FormatException">
          <message><![CDATA[System.FormatException : Inputstrengen var ikke i et korrekt format.]]></message>
          <stack-trace><![CDATA[   ved System.Number.StringToNumber(String str, NumberStyles options, NumberBuffer& number, NumberFormatInfo info, Boolean parseDecimal)
   ved System.Number.ParseInt32(String s, NumberStyles style, NumberFormatInfo info)
   ved System.String.System.IConvertible.ToInt32(IFormatProvider provider)
   ved System.Convert.ChangeType(Object value, Type conversionType, IFormatProvider provider)
   ved System.Linq.Enumerable.<SelectIterator>d__5`2.MoveNext()
   ved System.Linq.Buffer`1..ctor(IEnumerable`1 source)
   ved System.Linq.Enumerable.ToArray[TSource](IEnumerable`1 source)
   ved TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.GetExecuteArguments(BindingMatch match)
   ved TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep(StepInstance stepInstance)
   ved TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   ved Pickles.TestHarness.xunit2.AdditionFeature.ScenarioCleanup()
   ved Pickles.TestHarness.xunit2.AdditionFeature.FailToAddTwoNumbers() i C:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\xunit2\Addition.feature:linje 34]]></stack-trace>
        </failure>
      </test>
    </collection>
    <collection total="3" passed="0" failed="3" skipped="0" name="Test collection for Pickles.TestHarness.xunit2.FailingBackgroundFeature" time="0.016">
      <test name="Pickles.TestHarness.xunit2.FailingBackgroundFeature.AddingSeveralNumbers(firstNumber: &quot;60&quot;, secondNumber: &quot;70&quot;, thirdNumber: &quot;130&quot;, result: &quot;260&quot;, exampleTags: [])" type="Pickles.TestHarness.xunit2.FailingBackgroundFeature" method="AddingSeveralNumbers" time="0.0063414" result="Fail">
        <traits>
          <trait name="FeatureTitle" value="Failing Background" />
          <trait name="Description" value="Adding several numbers" />
        </traits>
        <failure exception-type="NFluent.FluentCheckException">
          <message><![CDATA[NFluent.FluentCheckException : \nThe checked value is different from the expected one.\nThe checked value:\n\t[True]\nThe expected value:\n\t[False]]]></message>
          <stack-trace><![CDATA[   ved NFluent.Helpers.EqualityHelper.IsEqualTo(Object instance, Object expected)
   ved NFluent.Extensibility.Checker`2.ExecuteCheck(Action action, String negatedExceptionMessage)
   ved AutomationLayer.MarkTestAs.Failing() i C:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\AutomationLayer\MarkTestAs.cs:linje 15
   ved AutomationLayer.AdditionSteps.GivenTheBackgroundStepFails() i C:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\AutomationLayer\AdditionSteps.cs:linje 25
   ved TechTalk.SpecFlow.Bindings.BindingInvoker.InvokeBinding(IBinding binding, IContextManager contextManager, Object[] arguments, ITestTracer testTracer, TimeSpan& duration)
   ved TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStepMatch(BindingMatch match, Object[] arguments)
   ved TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep(StepInstance stepInstance)
   ved TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   ved Pickles.TestHarness.xunit2.FailingBackgroundFeature.ScenarioCleanup()
   ved Pickles.TestHarness.xunit2.FailingBackgroundFeature.AddingSeveralNumbers(String firstNumber, String secondNumber, String thirdNumber, String result, String[] exampleTags) i C:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\xunit2\FailingBackground.feature:linje 19]]></stack-trace>
        </failure>
      </test>
      <test name="Pickles.TestHarness.xunit2.FailingBackgroundFeature.AddingSeveralNumbers(firstNumber: &quot;40&quot;, secondNumber: &quot;50&quot;, thirdNumber: &quot;90&quot;, result: &quot;180&quot;, exampleTags: [])" type="Pickles.TestHarness.xunit2.FailingBackgroundFeature" method="AddingSeveralNumbers" time="0.003361" result="Fail">
        <traits>
          <trait name="FeatureTitle" value="Failing Background" />
          <trait name="Description" value="Adding several numbers" />
        </traits>
        <failure exception-type="NFluent.FluentCheckException">
          <message><![CDATA[NFluent.FluentCheckException : \nThe checked value is different from the expected one.\nThe checked value:\n\t[True]\nThe expected value:\n\t[False]]]></message>
          <stack-trace><![CDATA[   ved NFluent.Helpers.EqualityHelper.IsEqualTo(Object instance, Object expected)
   ved NFluent.Extensibility.Checker`2.ExecuteCheck(Action action, String negatedExceptionMessage)
   ved AutomationLayer.MarkTestAs.Failing() i C:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\AutomationLayer\MarkTestAs.cs:linje 15
   ved AutomationLayer.AdditionSteps.GivenTheBackgroundStepFails() i C:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\AutomationLayer\AdditionSteps.cs:linje 25
   ved TechTalk.SpecFlow.Bindings.BindingInvoker.InvokeBinding(IBinding binding, IContextManager contextManager, Object[] arguments, ITestTracer testTracer, TimeSpan& duration)
   ved TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStepMatch(BindingMatch match, Object[] arguments)
   ved TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep(StepInstance stepInstance)
   ved TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   ved Pickles.TestHarness.xunit2.FailingBackgroundFeature.ScenarioCleanup()
   ved Pickles.TestHarness.xunit2.FailingBackgroundFeature.AddingSeveralNumbers(String firstNumber, String secondNumber, String thirdNumber, String result, String[] exampleTags) i C:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\xunit2\FailingBackground.feature:linje 19]]></stack-trace>
        </failure>
      </test>
      <test name="Pickles.TestHarness.xunit2.FailingBackgroundFeature.AddTwoNumbers" type="Pickles.TestHarness.xunit2.FailingBackgroundFeature" method="AddTwoNumbers" time="0.0061377" result="Fail">
        <traits>
          <trait name="FeatureTitle" value="Failing Background" />
          <trait name="Description" value="Add two numbers" />
        </traits>
        <failure exception-type="NFluent.FluentCheckException">
          <message><![CDATA[NFluent.FluentCheckException : \nThe checked value is different from the expected one.\nThe checked value:\n\t[True]\nThe expected value:\n\t[False]]]></message>
          <stack-trace><![CDATA[   ved NFluent.Helpers.EqualityHelper.IsEqualTo(Object instance, Object expected)
   ved NFluent.Extensibility.Checker`2.ExecuteCheck(Action action, String negatedExceptionMessage)
   ved AutomationLayer.MarkTestAs.Failing() i C:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\AutomationLayer\MarkTestAs.cs:linje 15
   ved AutomationLayer.AdditionSteps.GivenTheBackgroundStepFails() i C:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\AutomationLayer\AdditionSteps.cs:linje 25
   ved TechTalk.SpecFlow.Bindings.BindingInvoker.InvokeBinding(IBinding binding, IContextManager contextManager, Object[] arguments, ITestTracer testTracer, TimeSpan& duration)
   ved TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStepMatch(BindingMatch match, Object[] arguments)
   ved TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep(StepInstance stepInstance)
   ved TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   ved Pickles.TestHarness.xunit2.FailingBackgroundFeature.ScenarioCleanup()
   ved Pickles.TestHarness.xunit2.FailingBackgroundFeature.AddTwoNumbers() i C:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\xunit2\FailingBackground.feature:linje 12]]></stack-trace>
        </failure>
      </test>
    </collection>
    <collection total="1" passed="1" failed="0" skipped="0" name="Test collection for Pickles.TestHarness.xunit2.MinimalFeatures.PassingFeature" time="0.001">
      <test name="Pickles.TestHarness.xunit2.MinimalFeatures.PassingFeature.PassingFeaturePassingScenario" type="Pickles.TestHarness.xunit2.MinimalFeatures.PassingFeature" method="PassingFeaturePassingScenario" time="0.0014192" result="Pass">
        <traits>
          <trait name="FeatureTitle" value="Passing" />
          <trait name="Description" value="Passing Feature Passing Scenario" />
        </traits>
      </test>
    </collection>
  </assembly>
</assemblies>