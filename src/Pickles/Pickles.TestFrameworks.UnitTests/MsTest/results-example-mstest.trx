<?xml version="1.0" encoding="UTF-8"?>
<TestRun id="e4990864-96ff-4485-84e0-b2d260717a72" name="RS@DESKTOP 2018-08-29 14:10:46" runUser="DESKTOP\RS" xmlns="http://microsoft.com/schemas/VisualStudio/TeamTest/2010">
  <TestSettings name="TestSettings" id="3d90c4f8-ccdc-4663-bad3-9f4c55f42318">
    <Description>These are default test settings for a local test run.</Description>
    <Deployment userDeploymentRoot="C:\Git\pickles" useDefaultDeploymentRoot="false" enabled="false" runDeploymentRoot="RS_DESKTOP 2018-08-29 14_10_46" />
    <Execution hostProcessPlatform="MSIL">
      <TestTypeSpecific />
      <AgentRule name="Execution Agents">
      </AgentRule>
    </Execution>
    <Properties />
  </TestSettings>
  <Times creation="2018-08-29T14:10:46.4016661+02:00" queuing="2018-08-29T14:10:46.8483362+02:00" start="2018-08-29T14:10:46.9765043+02:00" finish="2018-08-29T14:10:50.8682807+02:00" />
  <ResultSummary outcome="Failed">
    <Counters total="71" executed="71" passed="41" error="0" failed="17" timeout="0" aborted="0" inconclusive="13" passedButRunAborted="0" notRunnable="0" notExecuted="0" disconnected="0" warning="0" completed="0" inProgress="0" pending="0" />
  </ResultSummary>
  <TestDefinitions>
    <UnitTest name="FailToAddTwoNumbers" storage="C:\Git\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="b13a186e-33df-348e-f9e2-a18b445d0d6e">
      <Description>Fail to add two numbers</Description>
      <TestCategory>
        <TestCategoryItem TestCategory="tag1" />
      </TestCategory>
      <Execution id="683f1212-59fa-4786-9af8-c75409196c88" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Addition</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Git/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.AdditionFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="FailToAddTwoNumbers" />
    </UnitTest>
    <UnitTest name="DealWithMultipleNamedExampleSectionsWithDuplicateValues_SecondSet_Variant3" storage="C:\Git\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="89f6c218-0aa5-1429-f042-a75ec9d24b22">
      <Description>Deal with multiple named example sections with duplicate values</Description>
      <Execution id="1d37000d-0796-47a7-9956-db39b06e621c" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenario Outlines</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>Variant 3</Value>
        </Property>
        <Property>
          <Key>ExampleSetName</Key>
          <Value>Second set</Value>
        </Property>
        <Property>
          <Key>Parameter:result</Key>
          <Value>pass</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Git/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="DealWithMultipleNamedExampleSectionsWithDuplicateValues_SecondSet_Variant3" />
    </UnitTest>
    <UnitTest name="InconclusiveFeatureInconclusiveScenario" storage="C:\Git\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="add44896-9236-510f-750d-eb49b89a7a65">
      <Description>Inconclusive Feature Inconclusive Scenario</Description>
      <Execution id="08c5682b-a069-4459-8e24-84bbe253428c" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Inconclusive</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Git/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.MinimalFeatures.InconclusiveFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="InconclusiveFeatureInconclusiveScenario" />
    </UnitTest>
    <UnitTest name="AddingSeveralNumbers_40" storage="C:\Git\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="b4815779-aba4-cf1b-8df3-4a745af70720">
      <Description>Adding several numbers</Description>
      <Execution id="fce5a8a3-7950-4172-b4c0-847db93467ac" />
      <Properties>
        <Property>
          <Key>Parameter:first number</Key>
          <Value>40</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>40</Value>
        </Property>
        <Property>
          <Key>Parameter:result</Key>
          <Value>180</Value>
        </Property>
        <Property>
          <Key>Parameter:third number</Key>
          <Value>90</Value>
        </Property>
        <Property>
          <Key>Parameter:second number</Key>
          <Value>50</Value>
        </Property>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Failing Background</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Git/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.FailingBackgroundFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="AddingSeveralNumbers_40" />
    </UnitTest>
    <UnitTest name="AddTwoNumbers" storage="C:\Git\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="6b8581c3-611e-6116-4232-a31382677735">
      <Description>Add two numbers</Description>
      <TestCategory>
        <TestCategoryItem TestCategory="tag1" />
      </TestCategory>
      <Execution id="49de7194-cee9-4415-b7f6-b6b6f7fc479d" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Addition</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Git/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.AdditionFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="AddTwoNumbers" />
    </UnitTest>
    <UnitTest name="AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet2_Fail_1" storage="C:\Git\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="78a6b3a3-679e-ee71-7ff5-c9338e3be6c2">
      <Description>And we can go totally bonkers with multiple example sections.</Description>
      <Execution id="ba5fef97-299a-4350-838d-0a637e117977" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenario Outlines</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>fail_1</Value>
        </Property>
        <Property>
          <Key>Parameter:result</Key>
          <Value>fail_1</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Git/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet2_Fail_1" />
    </UnitTest>
    <UnitTest name="DealWithMultipleExampleSectionsWithDuplicateValues_ExampleSet1_Variant3" storage="C:\Git\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="5e49f33d-b015-f2c7-c420-bc481bbb8d01">
      <Description>Deal with multiple example sections with duplicate values</Description>
      <Execution id="75a2cc67-54df-4aa6-93a5-d8759fb93218" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenario Outlines</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>Variant 3</Value>
        </Property>
        <Property>
          <Key>Parameter:result</Key>
          <Value>pass</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Git/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="DealWithMultipleExampleSectionsWithDuplicateValues_ExampleSet1_Variant3" />
    </UnitTest>
    <UnitTest name="DealWithMultipleNamedExampleSectionsWithoutDuplicateValues_FirstSet_Pass" storage="C:\Git\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="4e84406f-3151-5b14-7af0-b81b574f9cb2">
      <Description>Deal with multiple named example sections without duplicate values</Description>
      <Execution id="1028c24b-0c0d-4c0c-9fd0-3c2eabc02085" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenario Outlines</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>pass</Value>
        </Property>
        <Property>
          <Key>ExampleSetName</Key>
          <Value>First set</Value>
        </Property>
        <Property>
          <Key>Parameter:result</Key>
          <Value>pass</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Git/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="DealWithMultipleNamedExampleSectionsWithoutDuplicateValues_FirstSet_Pass" />
    </UnitTest>
    <UnitTest name="ThisIsAScenarioOutlineWithParenthesesHyphenAndComma10_2030_40_Pass_1" storage="C:\Git\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="f8369e2e-c5ec-dade-ad85-e2c56909c853">
      <Description>This is a scenario outline with parentheses, hyphen and comma (10-20, 30-40)</Description>
      <Execution id="d7da7195-00be-4b87-8ada-92edf399920a" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenarios With Special Characters</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>pass_1</Value>
        </Property>
        <Property>
          <Key>Parameter:result</Key>
          <Value>pass_1</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Git/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.ScenariosWithSpecialCharactersFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="ThisIsAScenarioOutlineWithParenthesesHyphenAndComma10_2030_40_Pass_1" />
    </UnitTest>
    <UnitTest name="DealWithMultipleNamedExampleSectionsWithoutDuplicateValues_FirstSet_Fail" storage="C:\Git\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="cbaf1514-900c-d6bc-5a11-01b1824f3093">
      <Description>Deal with multiple named example sections without duplicate values</Description>
      <Execution id="c21ea2e5-1288-4838-93fa-543a84ce57d3" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenario Outlines</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>fail</Value>
        </Property>
        <Property>
          <Key>ExampleSetName</Key>
          <Value>First set</Value>
        </Property>
        <Property>
          <Key>Parameter:result</Key>
          <Value>fail</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Git/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="DealWithMultipleNamedExampleSectionsWithoutDuplicateValues_FirstSet_Fail" />
    </UnitTest>
    <UnitTest name="DealWithMultipleExampleSectionsWithDuplicateValues_ExampleSet1_Variant0" storage="C:\Git\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="ecdcc425-c0f8-07fb-7bf0-9c20c3392ab2">
      <Description>Deal with multiple example sections with duplicate values</Description>
      <Execution id="7830f20e-b7b0-4e28-bfd9-419208e13ffa" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenario Outlines</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>Variant 0</Value>
        </Property>
        <Property>
          <Key>Parameter:result</Key>
          <Value>fail</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Git/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="DealWithMultipleExampleSectionsWithDuplicateValues_ExampleSet1_Variant0" />
    </UnitTest>
    <UnitTest name="DealWithMultipleNamedExampleSectionsWithoutDuplicateValues_SecondSet_Inconclusive" storage="C:\Git\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="2cf81da0-b83f-8c2c-4333-336bcc3d1fb4">
      <Description>Deal with multiple named example sections without duplicate values</Description>
      <Execution id="e4cd7512-2ecd-49a1-a0d9-fa605f23ab2b" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenario Outlines</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>inconclusive</Value>
        </Property>
        <Property>
          <Key>ExampleSetName</Key>
          <Value>Second set</Value>
        </Property>
        <Property>
          <Key>Parameter:result</Key>
          <Value>inconclusive</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Git/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="DealWithMultipleNamedExampleSectionsWithoutDuplicateValues_SecondSet_Inconclusive" />
    </UnitTest>
    <UnitTest name="NotAutomatedScenario2" storage="C:\Git\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="067e1c92-2860-531b-28dc-c2863e91b7f5">
      <Description>Not automated scenario 2</Description>
      <Execution id="c31042bd-944d-4e0a-8a6b-54462d7295dd" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Not Automated At All</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Git/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.NotAutomatedAtAllFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="NotAutomatedScenario2" />
    </UnitTest>
    <UnitTest name="DealWithMultipleExampleSectionsWithDuplicateValues_ExampleSet1_Variant2" storage="C:\Git\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="c9f3b168-4bc0-cbbd-9931-5341acb85363">
      <Description>Deal with multiple example sections with duplicate values</Description>
      <Execution id="2678ef40-03c0-4874-8f38-f4c04ae04e72" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenario Outlines</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>Variant 2</Value>
        </Property>
        <Property>
          <Key>Parameter:result</Key>
          <Value>fail</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Git/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="DealWithMultipleExampleSectionsWithDuplicateValues_ExampleSet1_Variant2" />
    </UnitTest>
    <UnitTest name="ThisIsAScenarioWithDanishCharactersAEoaAEOA" storage="C:\Git\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="5caa1aa9-2d56-0fc8-5599-56bd995599ca">
      <Description>This is a scenario with danish characters æøå ÆØÅ</Description>
      <Execution id="95867228-8daa-4555-9b09-d8c5146c3ada" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenarios With Special Characters</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Git/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.ScenariosWithSpecialCharactersFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="ThisIsAScenarioWithDanishCharactersAEoaAEOA" />
    </UnitTest>
    <UnitTest name="DealWithMultipleNamedExampleSectionsWithDuplicateValues_SecondSet_Variant2" storage="C:\Git\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="f5f92d6f-2aff-0d4e-92cc-ebea6c783047">
      <Description>Deal with multiple named example sections with duplicate values</Description>
      <Execution id="240b5ed7-de3a-4cf1-85fe-05a72a9f127e" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenario Outlines</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>Variant 2</Value>
        </Property>
        <Property>
          <Key>ExampleSetName</Key>
          <Value>Second set</Value>
        </Property>
        <Property>
          <Key>Parameter:result</Key>
          <Value>fail</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Git/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="DealWithMultipleNamedExampleSectionsWithDuplicateValues_SecondSet_Variant2" />
    </UnitTest>
    <UnitTest name="AddingSeveralNumbers_60" storage="C:\Git\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="f4b45c2f-fc98-d23c-6179-62d5b5a59825">
      <Description>Adding several numbers</Description>
      <TestCategory>
        <TestCategoryItem TestCategory="tag2" />
      </TestCategory>
      <Execution id="c164b264-e579-487a-befb-d075d37152fa" />
      <Properties>
        <Property>
          <Key>Parameter:first number</Key>
          <Value>60</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>60</Value>
        </Property>
        <Property>
          <Key>Parameter:result</Key>
          <Value>260</Value>
        </Property>
        <Property>
          <Key>Parameter:third number</Key>
          <Value>130</Value>
        </Property>
        <Property>
          <Key>Parameter:second number</Key>
          <Value>70</Value>
        </Property>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Addition</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Git/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.AdditionFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="AddingSeveralNumbers_60" />
    </UnitTest>
    <UnitTest name="ThisIsAScenarioOutlineWhereAllScenariosPass_Pass_1" storage="C:\Git\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="2c8f1abb-446c-6683-6327-8ec4ccd46e1a">
      <Description>This is a scenario outline where all scenarios pass</Description>
      <Execution id="b922bd5d-b364-4884-ac0c-135f545ba10d" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenario Outlines</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>pass_1</Value>
        </Property>
        <Property>
          <Key>Parameter:result</Key>
          <Value>pass_1</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Git/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="ThisIsAScenarioOutlineWhereAllScenariosPass_Pass_1" />
    </UnitTest>
    <UnitTest name="ThisIsAScenarioOutlineWhereOneScenarioIsInconclusive_Inconclusive_1" storage="C:\Git\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="8c97c958-0c5d-1594-2cc5-02c96df8fc9b">
      <Description>This is a scenario outline where one scenario is inconclusive</Description>
      <Execution id="4bba6332-b3d9-40ce-bf94-c1923cd4a90c" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenario Outlines</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>inconclusive_1</Value>
        </Property>
        <Property>
          <Key>Parameter:result</Key>
          <Value>inconclusive_1</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Git/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="ThisIsAScenarioOutlineWhereOneScenarioIsInconclusive_Inconclusive_1" />
    </UnitTest>
    <UnitTest name="ThisScenarioContainsExamplesWithRegex_SpecialCharacters_Variant6" storage="C:\Git\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="22ccdb90-02c8-97c1-e2a1-6bec4f044d99">
      <Description>This scenario contains examples with Regex-special characters</Description>
      <Execution id="b1fab830-1f7f-4439-b430-876cec5391ff" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenarios With Special Characters</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>Variant 6</Value>
        </Property>
        <Property>
          <Key>Parameter:regex</Key>
          <Value>^.*(?&lt;foo&gt;BAR)\s[^0-9]{3,4}A+$</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Git/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.ScenariosWithSpecialCharactersFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="ThisScenarioContainsExamplesWithRegex_SpecialCharacters_Variant6" />
    </UnitTest>
    <UnitTest name="DealCorrectlyWithBackslashesInTheExamples_CTemp" storage="C:\Git\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="72d470fa-c19a-1302-1fcf-eb104ea36048">
      <Description>Deal correctly with backslashes in the examples</Description>
      <Execution id="77942442-1f65-4088-9e14-b5f58e98307a" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenario Outlines</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>c:\Temp\</Value>
        </Property>
        <Property>
          <Key>Parameter:file path</Key>
          <Value>c:\Temp\</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Git/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="DealCorrectlyWithBackslashesInTheExamples_CTemp" />
    </UnitTest>
    <UnitTest name="ThisScenarioContainsExamplesWithRegex_SpecialCharacters_Variant1" storage="C:\Git\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="fb3ec8b2-a410-ecc8-265b-29bfd3772553">
      <Description>This scenario contains examples with Regex-special characters</Description>
      <Execution id="fd2a3730-0702-48e0-803c-55e557d10709" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenarios With Special Characters</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>Variant 1</Value>
        </Property>
        <Property>
          <Key>Parameter:regex</Key>
          <Value>++</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Git/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.ScenariosWithSpecialCharactersFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="ThisScenarioContainsExamplesWithRegex_SpecialCharacters_Variant1" />
    </UnitTest>
    <UnitTest name="DealWithDuplicateValues_Variant3" storage="C:\Git\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="9888ff3b-49ea-474c-769c-7a7d109d5b2a">
      <Description>Deal with duplicate values</Description>
      <Execution id="e4f748b2-abf3-4f3c-8906-55608ddf584b" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenario Outlines</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>Variant 3</Value>
        </Property>
        <Property>
          <Key>Parameter:result</Key>
          <Value>pass</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Git/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="DealWithDuplicateValues_Variant3" />
    </UnitTest>
    <UnitTest name="ThisIsAScenarioOutlineWhereOneScenarioFails_Pass_2" storage="C:\Git\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="b04f3200-80ca-d47f-0c01-8a37e5c952e6">
      <Description>This is a scenario outline where one scenario fails</Description>
      <Execution id="88e82e4b-5ab7-4426-bf3e-4fe70a4fda01" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenario Outlines</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>pass_2</Value>
        </Property>
        <Property>
          <Key>Parameter:result</Key>
          <Value>pass_2</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Git/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="ThisIsAScenarioOutlineWhereOneScenarioFails_Pass_2" />
    </UnitTest>
    <UnitTest name="AddingSeveralNumbers_60" storage="C:\Git\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="17bb28b8-a770-72be-af08-5a4b0847e4ea">
      <Description>Adding several numbers</Description>
      <Execution id="4b20ec71-fb68-43c8-b122-0409d431c45c" />
      <Properties>
        <Property>
          <Key>Parameter:first number</Key>
          <Value>60</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>60</Value>
        </Property>
        <Property>
          <Key>Parameter:result</Key>
          <Value>260</Value>
        </Property>
        <Property>
          <Key>Parameter:third number</Key>
          <Value>130</Value>
        </Property>
        <Property>
          <Key>Parameter:second number</Key>
          <Value>70</Value>
        </Property>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Failing Background</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Git/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.FailingBackgroundFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="AddingSeveralNumbers_60" />
    </UnitTest>
    <UnitTest name="DealCorrectlyWithOverlongExampleValues_PleaseEnterAValidTwoLetterCountryCodeE_G_DE" storage="C:\Git\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="ce4a9bf6-5fc5-0a40-2cbe-242a59cb1296">
      <Description>Deal correctly with overlong example values</Description>
      <Execution id="6a4f2d77-9959-4c22-8cac-3e52ce04b606" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenario Outlines</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>Please enter a valid two letter country code (e.g. DE)!</Value>
        </Property>
        <Property>
          <Key>Parameter:value1</Key>
          <Value>Please enter a valid two letter country code (e.g. DE)!</Value>
        </Property>
        <Property>
          <Key>Parameter:value2</Key>
          <Value>This is just a very very very veery long error message!</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Git/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="DealCorrectlyWithOverlongExampleValues_PleaseEnterAValidTwoLetterCountryCodeE_G_DE" />
    </UnitTest>
    <UnitTest name="ThisIsAScenarioOutlineWhereOneScenarioIsInconclusive_Pass_2" storage="C:\Git\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="8f2bb160-fa82-a566-570e-51eeb5237e95">
      <Description>This is a scenario outline where one scenario is inconclusive</Description>
      <Execution id="f4665bf8-a86f-4ff3-801f-909fcaf8f9c4" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenario Outlines</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>pass_2</Value>
        </Property>
        <Property>
          <Key>Parameter:result</Key>
          <Value>pass_2</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Git/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="ThisIsAScenarioOutlineWhereOneScenarioIsInconclusive_Pass_2" />
    </UnitTest>
    <UnitTest name="AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet1_Inconclusive_2" storage="C:\Git\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="4d5f7893-139c-db00-8823-de561780758d">
      <Description>And we can go totally bonkers with multiple example sections.</Description>
      <Execution id="133c2590-8bf3-48ee-b890-049adc14ef87" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenario Outlines</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>inconclusive_2</Value>
        </Property>
        <Property>
          <Key>Parameter:result</Key>
          <Value>inconclusive_2</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Git/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet1_Inconclusive_2" />
    </UnitTest>
    <UnitTest name="ThisIsAScenarioOutlineWhereOneScenarioFails_Fail_1" storage="C:\Git\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="05c22c90-eaaa-d3c2-bd2d-36c2df85528e">
      <Description>This is a scenario outline where one scenario fails</Description>
      <Execution id="c001e2ce-e975-47af-a2d3-4ec535b3da48" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenario Outlines</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>fail_1</Value>
        </Property>
        <Property>
          <Key>Parameter:result</Key>
          <Value>fail_1</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Git/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="ThisIsAScenarioOutlineWhereOneScenarioFails_Fail_1" />
    </UnitTest>
    <UnitTest name="NotAutomatedAddingTwoNumbers" storage="C:\Git\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="2124dd33-7aaa-d4fb-c72f-98ad434251c0">
      <Description>Not automated adding two numbers</Description>
      <Execution id="dbce4d41-1876-48d0-8390-599fbaf37471" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Addition</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Git/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.AdditionFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="NotAutomatedAddingTwoNumbers" />
    </UnitTest>
    <UnitTest name="ThisIsAScenarioWithParenthesesHyphenAndComma10_2030_40" storage="C:\Git\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="3fe8806f-fabb-1deb-7e27-c59578f16da3">
      <Description>This is a scenario with parentheses, hyphen and comma (10-20, 30-40)</Description>
      <Execution id="584d0a1c-8fda-48fe-8f36-7173bc64cbed" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenarios With Special Characters</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Git/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.ScenariosWithSpecialCharactersFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="ThisIsAScenarioWithParenthesesHyphenAndComma10_2030_40" />
    </UnitTest>
    <UnitTest name="AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet0_Pass_1" storage="C:\Git\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="78aeddd0-4ae5-6103-b7dd-e62b71148721">
      <Description>And we can go totally bonkers with multiple example sections.</Description>
      <Execution id="873d36c3-6c14-4a13-907d-2957c695662b" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenario Outlines</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>pass_1</Value>
        </Property>
        <Property>
          <Key>Parameter:result</Key>
          <Value>pass_1</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Git/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet0_Pass_1" />
    </UnitTest>
    <UnitTest name="DealWithMultipleNamedExampleSectionsWithDuplicateValues_SecondSet_Variant0" storage="C:\Git\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="7163846b-97dc-3fe1-9bff-737e01453fc3">
      <Description>Deal with multiple named example sections with duplicate values</Description>
      <Execution id="52924493-be8e-4c23-a11b-2044a8cc9a34" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenario Outlines</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>Variant 0</Value>
        </Property>
        <Property>
          <Key>ExampleSetName</Key>
          <Value>Second set</Value>
        </Property>
        <Property>
          <Key>Parameter:result</Key>
          <Value>fail</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Git/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="DealWithMultipleNamedExampleSectionsWithDuplicateValues_SecondSet_Variant0" />
    </UnitTest>
    <UnitTest name="DealWithDuplicateValues_Variant2" storage="C:\Git\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="d9347c86-fccf-5c28-b3ed-f6ddbe13b8c4">
      <Description>Deal with duplicate values</Description>
      <Execution id="03fb18d5-a583-4884-913f-6d2a41639d5a" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenario Outlines</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>Variant 2</Value>
        </Property>
        <Property>
          <Key>Parameter:result</Key>
          <Value>inconclusive</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Git/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="DealWithDuplicateValues_Variant2" />
    </UnitTest>
    <UnitTest name="DealWithMultipleExampleSectionsWithDuplicateValues_ExampleSet0_Variant2" storage="C:\Git\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="570b1720-5e3e-7567-fee9-89cfbbcee9c2">
      <Description>Deal with multiple example sections with duplicate values</Description>
      <Execution id="e9a3c44b-49b3-41e2-b848-112f468678a1" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenario Outlines</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>Variant 2</Value>
        </Property>
        <Property>
          <Key>Parameter:result</Key>
          <Value>pass</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Git/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="DealWithMultipleExampleSectionsWithDuplicateValues_ExampleSet0_Variant2" />
    </UnitTest>
    <UnitTest name="PassingFeaturePassingScenario" storage="C:\Git\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="3af599bd-a8de-95a2-1ecc-194c7f8aceeb">
      <Description>Passing Feature Passing Scenario</Description>
      <Execution id="2544400f-8d03-490d-b046-23038027cd12" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Passing</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Git/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.MinimalFeatures.PassingFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="PassingFeaturePassingScenario" />
    </UnitTest>
    <UnitTest name="DealWithMultipleNamedExampleSectionsWithDuplicateValues_SecondSet_Variant1" storage="C:\Git\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="5b9bcab8-4e74-31a9-a78c-dbaaa36e3264">
      <Description>Deal with multiple named example sections with duplicate values</Description>
      <Execution id="eae1f9d0-8ffa-48f3-b8e3-b50d70d7d52d" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenario Outlines</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>Variant 1</Value>
        </Property>
        <Property>
          <Key>ExampleSetName</Key>
          <Value>Second set</Value>
        </Property>
        <Property>
          <Key>Parameter:result</Key>
          <Value>inconclusive</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Git/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="DealWithMultipleNamedExampleSectionsWithDuplicateValues_SecondSet_Variant1" />
    </UnitTest>
    <UnitTest name="AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet2_Fail_2" storage="C:\Git\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="40304968-0dee-8e41-4f42-20809899a9d0">
      <Description>And we can go totally bonkers with multiple example sections.</Description>
      <Execution id="ea5b96a7-3b35-4c29-a06a-c612cd813f89" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenario Outlines</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>fail_2</Value>
        </Property>
        <Property>
          <Key>Parameter:result</Key>
          <Value>fail_2</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Git/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet2_Fail_2" />
    </UnitTest>
    <UnitTest name="DealWithMultipleNamedExampleSectionsWithDuplicateValues_FirstSet_Variant0" storage="C:\Git\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="e4a41254-3a68-2383-3875-2b8943b3bc47">
      <Description>Deal with multiple named example sections with duplicate values</Description>
      <Execution id="f2e15dbb-19ea-4270-9c47-889dc52eecce" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenario Outlines</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>Variant 0</Value>
        </Property>
        <Property>
          <Key>ExampleSetName</Key>
          <Value>First set</Value>
        </Property>
        <Property>
          <Key>Parameter:result</Key>
          <Value>pass</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Git/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="DealWithMultipleNamedExampleSectionsWithDuplicateValues_FirstSet_Variant0" />
    </UnitTest>
    <UnitTest name="ThisIsAScenarioOutlineWhereAllScenariosPass_Pass_3" storage="C:\Git\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="9bb2410c-d8c6-90b8-75cd-5c93dc903745">
      <Description>This is a scenario outline where all scenarios pass</Description>
      <Execution id="5874deb3-2d61-4327-a9d5-ab69b84ddc1b" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenario Outlines</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>pass_3</Value>
        </Property>
        <Property>
          <Key>Parameter:result</Key>
          <Value>pass_3</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Git/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="ThisIsAScenarioOutlineWhereAllScenariosPass_Pass_3" />
    </UnitTest>
    <UnitTest name="AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet0_Pass_2" storage="C:\Git\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="ee74d71f-f824-19d9-866e-a408a95ffa99">
      <Description>And we can go totally bonkers with multiple example sections.</Description>
      <Execution id="84de2d10-ee0d-41d7-bdb6-2b8a15a14710" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenario Outlines</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>pass_2</Value>
        </Property>
        <Property>
          <Key>Parameter:result</Key>
          <Value>pass_2</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Git/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet0_Pass_2" />
    </UnitTest>
    <UnitTest name="DealWithDuplicateValues_Variant0" storage="C:\Git\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="1d18430d-5c1b-e3ad-7ba0-10db706f84e6">
      <Description>Deal with duplicate values</Description>
      <Execution id="84664111-c0a8-43ed-b4bc-50bf23df8b29" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenario Outlines</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>Variant 0</Value>
        </Property>
        <Property>
          <Key>Parameter:result</Key>
          <Value>pass</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Git/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="DealWithDuplicateValues_Variant0" />
    </UnitTest>
    <UnitTest name="DealWithMultipleNamedExampleSectionsWithDuplicateValues_FirstSet_Variant1" storage="C:\Git\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="6c71df5b-b7f6-05bc-a9d9-7a5a418694ed">
      <Description>Deal with multiple named example sections with duplicate values</Description>
      <Execution id="da7139f8-75cf-42a7-a463-1bd8fc5b30d4" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenario Outlines</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>Variant 1</Value>
        </Property>
        <Property>
          <Key>ExampleSetName</Key>
          <Value>First set</Value>
        </Property>
        <Property>
          <Key>Parameter:result</Key>
          <Value>fail</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Git/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="DealWithMultipleNamedExampleSectionsWithDuplicateValues_FirstSet_Variant1" />
    </UnitTest>
    <UnitTest name="DealWithMultipleExampleSectionsWithDuplicateValues_ExampleSet0_Variant1" storage="C:\Git\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="2e627230-d93b-6896-c6a7-349b31312652">
      <Description>Deal with multiple example sections with duplicate values</Description>
      <Execution id="489388a3-4876-4b9a-8cdc-338cd590ced6" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenario Outlines</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>Variant 1</Value>
        </Property>
        <Property>
          <Key>Parameter:result</Key>
          <Value>fail</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Git/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="DealWithMultipleExampleSectionsWithDuplicateValues_ExampleSet0_Variant1" />
    </UnitTest>
    <UnitTest name="ThisIsAScenarioWithSpanishCharactersNaeiou" storage="C:\Git\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="6a1be91c-570b-7575-7d8f-f960cd83f9ec">
      <Description>This is a scenario with spanish characters ñáéíóú</Description>
      <Execution id="80bb5ba1-3f5a-405d-b92d-31d9076230a7" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenarios With Special Characters</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Git/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.ScenariosWithSpecialCharactersFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="ThisIsAScenarioWithSpanishCharactersNaeiou" />
    </UnitTest>
    <UnitTest name="AddTwoNumbers" storage="C:\Git\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="ca63316a-39e5-9545-3bca-f1839c7b4664">
      <Description>Add two numbers</Description>
      <Execution id="1b6fbf1e-2075-48b6-b85b-404eec8de9c1" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Failing Background</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Git/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.FailingBackgroundFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="AddTwoNumbers" />
    </UnitTest>
    <UnitTest name="ThisScenarioContainsExamplesWithRegex_SpecialCharacters_Variant3" storage="C:\Git\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="7699da71-b819-eb00-3894-2f0be7eec39c">
      <Description>This scenario contains examples with Regex-special characters</Description>
      <Execution id="0f856ca7-869a-41fd-8183-e9c504955859" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenarios With Special Characters</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>Variant 3</Value>
        </Property>
        <Property>
          <Key>Parameter:regex</Key>
          <Value>[]</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Git/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.ScenariosWithSpecialCharactersFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="ThisScenarioContainsExamplesWithRegex_SpecialCharacters_Variant3" />
    </UnitTest>
    <UnitTest name="AddingSeveralNumbers_40" storage="C:\Git\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="4d0f7327-ed22-9a43-969a-ac2ea8102d66">
      <Description>Adding several numbers</Description>
      <TestCategory>
        <TestCategoryItem TestCategory="tag2" />
      </TestCategory>
      <Execution id="316f05ba-c3a7-4716-80dd-9076ed9bda5a" />
      <Properties>
        <Property>
          <Key>Parameter:first number</Key>
          <Value>40</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>40</Value>
        </Property>
        <Property>
          <Key>Parameter:result</Key>
          <Value>180</Value>
        </Property>
        <Property>
          <Key>Parameter:third number</Key>
          <Value>90</Value>
        </Property>
        <Property>
          <Key>Parameter:second number</Key>
          <Value>50</Value>
        </Property>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Addition</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Git/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.AdditionFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="AddingSeveralNumbers_40" />
    </UnitTest>
    <UnitTest name="DealWithMultipleExampleSectionsWithDuplicateValues_ExampleSet0_Variant0" storage="C:\Git\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="ee09c91e-8cab-77ad-9028-2c4e343a8b8f">
      <Description>Deal with multiple example sections with duplicate values</Description>
      <Execution id="7b718b84-6edb-455e-ba42-4712e679c63f" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenario Outlines</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>Variant 0</Value>
        </Property>
        <Property>
          <Key>Parameter:result</Key>
          <Value>pass</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Git/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="DealWithMultipleExampleSectionsWithDuplicateValues_ExampleSet0_Variant0" />
    </UnitTest>
    <UnitTest name="NotAutomatedScenario1" storage="C:\Git\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="0e090158-43a1-1be8-47c2-13e1b2c9f8c7">
      <Description>Not automated scenario 1</Description>
      <Execution id="22f423c4-8c3b-4214-80ee-bde941ea1c5b" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Not Automated At All</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Git/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.NotAutomatedAtAllFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="NotAutomatedScenario1" />
    </UnitTest>
    <UnitTest name="DealWithMultipleNamedExampleSectionsWithDuplicateValues_FirstSet_Variant2" storage="C:\Git\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="eac20402-24fc-07bf-8300-6de67af22151">
      <Description>Deal with multiple named example sections with duplicate values</Description>
      <Execution id="a384ea3d-360f-4b1e-928b-284ab26aa1ff" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenario Outlines</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>Variant 2</Value>
        </Property>
        <Property>
          <Key>ExampleSetName</Key>
          <Value>First set</Value>
        </Property>
        <Property>
          <Key>Parameter:result</Key>
          <Value>pass</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Git/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="DealWithMultipleNamedExampleSectionsWithDuplicateValues_FirstSet_Variant2" />
    </UnitTest>
    <UnitTest name="ThisScenarioContainsExamplesWithRegex_SpecialCharacters_Variant5" storage="C:\Git\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="cca2404a-911a-a50e-9898-327264f0ea76">
      <Description>This scenario contains examples with Regex-special characters</Description>
      <Execution id="ea6e5b1c-88cc-4209-b9aa-cff67684fe84" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenarios With Special Characters</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>Variant 5</Value>
        </Property>
        <Property>
          <Key>Parameter:regex</Key>
          <Value>()</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Git/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.ScenariosWithSpecialCharactersFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="ThisScenarioContainsExamplesWithRegex_SpecialCharacters_Variant5" />
    </UnitTest>
    <UnitTest name="ThisIsAScenarioOutlineWithAmpersand_Pass_1" storage="C:\Git\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="73c03e74-0c0b-5c1d-2193-91dd98f1f95e">
      <Description>This is a scenario outline with ampersand &amp;</Description>
      <Execution id="66244aa2-1b69-485b-a8e6-80813ae16f8c" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenarios With Special Characters</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>pass_1</Value>
        </Property>
        <Property>
          <Key>Parameter:result</Key>
          <Value>pass_1</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Git/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.ScenariosWithSpecialCharactersFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="ThisIsAScenarioOutlineWithAmpersand_Pass_1" />
    </UnitTest>
    <UnitTest name="AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet1_Inconclusive_1" storage="C:\Git\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="e30ef794-1ea7-a76a-356b-1668bca94630">
      <Description>And we can go totally bonkers with multiple example sections.</Description>
      <Execution id="5dccc675-ad8a-48ce-a708-60a9ef8acb0f" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenario Outlines</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>inconclusive_1</Value>
        </Property>
        <Property>
          <Key>Parameter:result</Key>
          <Value>inconclusive_1</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Git/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet1_Inconclusive_1" />
    </UnitTest>
    <UnitTest name="ThisScenarioContainsExamplesWithRegex_SpecialCharacters_Variant2" storage="C:\Git\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="a3bd6f67-daac-1ebc-5894-1d73dbe8d707">
      <Description>This scenario contains examples with Regex-special characters</Description>
      <Execution id="b3661575-dd1e-4cf6-961f-5367e95948b1" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenarios With Special Characters</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>Variant 2</Value>
        </Property>
        <Property>
          <Key>Parameter:regex</Key>
          <Value>.*</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Git/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.ScenariosWithSpecialCharactersFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="ThisScenarioContainsExamplesWithRegex_SpecialCharacters_Variant2" />
    </UnitTest>
    <UnitTest name="DealWithMultipleExampleSectionsWithDuplicateValues_ExampleSet1_Variant1" storage="C:\Git\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="354f3422-51a7-d09d-5620-feeb5dbdb83e">
      <Description>Deal with multiple example sections with duplicate values</Description>
      <Execution id="cfd4400f-9f15-4261-8b01-989cfd0745a1" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenario Outlines</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>Variant 1</Value>
        </Property>
        <Property>
          <Key>Parameter:result</Key>
          <Value>inconclusive</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Git/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="DealWithMultipleExampleSectionsWithDuplicateValues_ExampleSet1_Variant1" />
    </UnitTest>
    <UnitTest name="DealCorrectlyWithParenthesisInTheExamples_ThisIsADescriptionAndMore" storage="C:\Git\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="d09c033d-0065-cbeb-bd7c-ee8b6460688f">
      <Description>Deal correctly with parenthesis in the examples</Description>
      <Execution id="5a2516b9-c56e-4ae5-87fc-9acca0f30ba0" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenario Outlines</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>This is a description (and more)</Value>
        </Property>
        <Property>
          <Key>Parameter:overly descriptive field</Key>
          <Value>This is a description (and more)</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Git/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="DealCorrectlyWithParenthesisInTheExamples_ThisIsADescriptionAndMore" />
    </UnitTest>
    <UnitTest name="ThisScenarioContainsExamplesWithRegex_SpecialCharacters_Variant0" storage="C:\Git\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="b891bd24-e5b1-222b-8d70-96a2ba7b0807">
      <Description>This scenario contains examples with Regex-special characters</Description>
      <Execution id="f6227792-6cce-41f1-85da-f33cea1571d9" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenarios With Special Characters</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>Variant 0</Value>
        </Property>
        <Property>
          <Key>Parameter:regex</Key>
          <Value>**</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Git/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.ScenariosWithSpecialCharactersFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="ThisScenarioContainsExamplesWithRegex_SpecialCharacters_Variant0" />
    </UnitTest>
    <UnitTest name="ThisIsAScenarioOutlineWhereOneScenarioIsInconclusive_Pass_1" storage="C:\Git\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="6e54c207-a3b1-f181-06be-066795ac26e1">
      <Description>This is a scenario outline where one scenario is inconclusive</Description>
      <Execution id="b7c51e4c-ea48-453b-8835-22b1588f72c0" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenario Outlines</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>pass_1</Value>
        </Property>
        <Property>
          <Key>Parameter:result</Key>
          <Value>pass_1</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Git/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="ThisIsAScenarioOutlineWhereOneScenarioIsInconclusive_Pass_1" />
    </UnitTest>
    <UnitTest name="ThisIsAScenarioOutlineWhereAllScenariosPass_Pass_2" storage="C:\Git\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="9efc5df4-5f77-a670-8622-976418721b8f">
      <Description>This is a scenario outline where all scenarios pass</Description>
      <Execution id="49361ccf-dc28-4b38-98e9-588b5bd3bdf8" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenario Outlines</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>pass_2</Value>
        </Property>
        <Property>
          <Key>Parameter:result</Key>
          <Value>pass_2</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Git/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="ThisIsAScenarioOutlineWhereAllScenariosPass_Pass_2" />
    </UnitTest>
    <UnitTest name="ThisIsAScenarioOutlineWithGermanUmlautsAouBAOU_Pass_1" storage="C:\Git\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="763d7e52-45c9-3e45-478d-dd6659bc69ba">
      <Description>This is a scenario outline with german umlauts äöüß ÄÖÜ</Description>
      <Execution id="43875087-c3a0-4af4-a390-428a6f8ac228" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenarios With Special Characters</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>pass_1</Value>
        </Property>
        <Property>
          <Key>Parameter:result</Key>
          <Value>pass_1</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Git/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.ScenariosWithSpecialCharactersFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="ThisIsAScenarioOutlineWithGermanUmlautsAouBAOU_Pass_1" />
    </UnitTest>
    <UnitTest name="InconclusiveFeaturePassingScenario" storage="C:\Git\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="41cb0c4f-1c07-4937-29e8-dcc987caf94e">
      <Description>Inconclusive Feature Passing Scenario</Description>
      <Execution id="18a97de5-04f0-437c-b238-1241259ba30e" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Inconclusive</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Git/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.MinimalFeatures.InconclusiveFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="InconclusiveFeaturePassingScenario" />
    </UnitTest>
    <UnitTest name="FailingFeatureFailingScenario" storage="C:\Git\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="18582dd5-09c7-ce67-9cb7-8e15a9cdffd0">
      <Description>Failing Feature Failing Scenario</Description>
      <Execution id="61af7b8a-9208-421d-938e-1990a4edfb34" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Failing</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Git/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.MinimalFeatures.FailingFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="FailingFeatureFailingScenario" />
    </UnitTest>
    <UnitTest name="NotAutomatedScenario3" storage="C:\Git\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="64813bea-d79b-d74b-adb5-1302eaf5641f">
      <Description>Not automated scenario 3</Description>
      <Execution id="5e95e831-9712-4a38-9b5c-f6210350cb30" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Not Automated At All</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Git/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.NotAutomatedAtAllFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="NotAutomatedScenario3" />
    </UnitTest>
    <UnitTest name="DealWithDuplicateValues_Variant1" storage="C:\Git\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="2b3ab31b-4334-ba24-1959-c1b9bc0977d5">
      <Description>Deal with duplicate values</Description>
      <Execution id="223b2655-739a-4ec8-ac21-14fd49ef53f4" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenario Outlines</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>Variant 1</Value>
        </Property>
        <Property>
          <Key>Parameter:result</Key>
          <Value>fail</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Git/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="DealWithDuplicateValues_Variant1" />
    </UnitTest>
    <UnitTest name="FailingFeaturePassingScenario" storage="C:\Git\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="fa1e54c9-cdb0-8bb1-6764-9179c3b61825">
      <Description>Failing Feature Passing Scenario</Description>
      <Execution id="29fc7c53-f773-45c5-9d4f-7b5345bbcf1a" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Failing</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Git/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.MinimalFeatures.FailingFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="FailingFeaturePassingScenario" />
    </UnitTest>
    <UnitTest name="TestMethod" storage="C:\Git\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="aa71fe8a-e5aa-f23d-c632-cfb3c587ca21">
      <Execution id="14ea06ff-5eed-47d0-b701-f029ce616717" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Addition</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Git/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.OrdinaryUnitTest, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="TestMethod" />
    </UnitTest>
    <UnitTest name="ThisIsAScenarioOutlineWhereOneScenarioFails_Pass_1" storage="C:\Git\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="e64af447-d4dc-7221-865a-703128db7b90">
      <Description>This is a scenario outline where one scenario fails</Description>
      <Execution id="9bc28dfb-f700-407d-9c16-b7145e317b26" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenario Outlines</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>pass_1</Value>
        </Property>
        <Property>
          <Key>Parameter:result</Key>
          <Value>pass_1</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Git/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="ThisIsAScenarioOutlineWhereOneScenarioFails_Pass_1" />
    </UnitTest>
    <UnitTest name="FailingFeatureInconclusiveScenario" storage="C:\Git\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="7e6c75c9-5365-7582-f701-20d37d3ff511">
      <Description>Failing Feature Inconclusive Scenario</Description>
      <Execution id="ecb2f205-8e3d-4665-985b-51a4e2caef40" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Failing</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Git/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.MinimalFeatures.FailingFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="FailingFeatureInconclusiveScenario" />
    </UnitTest>
    <UnitTest name="ThisScenarioContainsExamplesWithRegex_SpecialCharacters_Variant4" storage="C:\Git\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="d253522e-be41-9b3a-247a-ca440d4ac588">
      <Description>This scenario contains examples with Regex-special characters</Description>
      <Execution id="85b2fe15-71b0-4939-9bdd-0c7009ab2326" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenarios With Special Characters</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>Variant 4</Value>
        </Property>
        <Property>
          <Key>Parameter:regex</Key>
          <Value>{}</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Git/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.ScenariosWithSpecialCharactersFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="ThisScenarioContainsExamplesWithRegex_SpecialCharacters_Variant4" />
    </UnitTest>
    <UnitTest name="DealWithDuplicateValues_Variant4" storage="C:\Git\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="cc38c6d2-7d3a-8a56-a6b2-9362763e7d1b">
      <Description>Deal with duplicate values</Description>
      <Execution id="9d0d07e5-1070-4835-bee7-3bdb98acd595" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenario Outlines</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>Variant 4</Value>
        </Property>
        <Property>
          <Key>Parameter:result</Key>
          <Value>fail</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Git/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=15.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="DealWithDuplicateValues_Variant4" />
    </UnitTest>
  </TestDefinitions>
  <TestLists>
    <TestList name="Results Not in a List" id="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestList name="All Loaded Results" id="19431567-8539-422a-85d7-44ee4e166bda" />
  </TestLists>
  <TestEntries>
    <TestEntry testId="4d0f7327-ed22-9a43-969a-ac2ea8102d66" executionId="316f05ba-c3a7-4716-80dd-9076ed9bda5a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f4b45c2f-fc98-d23c-6179-62d5b5a59825" executionId="c164b264-e579-487a-befb-d075d37152fa" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6b8581c3-611e-6116-4232-a31382677735" executionId="49de7194-cee9-4415-b7f6-b6b6f7fc479d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b13a186e-33df-348e-f9e2-a18b445d0d6e" executionId="683f1212-59fa-4786-9af8-c75409196c88" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2124dd33-7aaa-d4fb-c72f-98ad434251c0" executionId="dbce4d41-1876-48d0-8390-599fbaf37471" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b4815779-aba4-cf1b-8df3-4a745af70720" executionId="fce5a8a3-7950-4172-b4c0-847db93467ac" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="17bb28b8-a770-72be-af08-5a4b0847e4ea" executionId="4b20ec71-fb68-43c8-b122-0409d431c45c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ca63316a-39e5-9545-3bca-f1839c7b4664" executionId="1b6fbf1e-2075-48b6-b85b-404eec8de9c1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="18582dd5-09c7-ce67-9cb7-8e15a9cdffd0" executionId="61af7b8a-9208-421d-938e-1990a4edfb34" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7e6c75c9-5365-7582-f701-20d37d3ff511" executionId="ecb2f205-8e3d-4665-985b-51a4e2caef40" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="fa1e54c9-cdb0-8bb1-6764-9179c3b61825" executionId="29fc7c53-f773-45c5-9d4f-7b5345bbcf1a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="add44896-9236-510f-750d-eb49b89a7a65" executionId="08c5682b-a069-4459-8e24-84bbe253428c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="41cb0c4f-1c07-4937-29e8-dcc987caf94e" executionId="18a97de5-04f0-437c-b238-1241259ba30e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3af599bd-a8de-95a2-1ecc-194c7f8aceeb" executionId="2544400f-8d03-490d-b046-23038027cd12" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0e090158-43a1-1be8-47c2-13e1b2c9f8c7" executionId="22f423c4-8c3b-4214-80ee-bde941ea1c5b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="067e1c92-2860-531b-28dc-c2863e91b7f5" executionId="c31042bd-944d-4e0a-8a6b-54462d7295dd" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="64813bea-d79b-d74b-adb5-1302eaf5641f" executionId="5e95e831-9712-4a38-9b5c-f6210350cb30" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="aa71fe8a-e5aa-f23d-c632-cfb3c587ca21" executionId="14ea06ff-5eed-47d0-b701-f029ce616717" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="78aeddd0-4ae5-6103-b7dd-e62b71148721" executionId="873d36c3-6c14-4a13-907d-2957c695662b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ee74d71f-f824-19d9-866e-a408a95ffa99" executionId="84de2d10-ee0d-41d7-bdb6-2b8a15a14710" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e30ef794-1ea7-a76a-356b-1668bca94630" executionId="5dccc675-ad8a-48ce-a708-60a9ef8acb0f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4d5f7893-139c-db00-8823-de561780758d" executionId="133c2590-8bf3-48ee-b890-049adc14ef87" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="78a6b3a3-679e-ee71-7ff5-c9338e3be6c2" executionId="ba5fef97-299a-4350-838d-0a637e117977" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="40304968-0dee-8e41-4f42-20809899a9d0" executionId="ea5b96a7-3b35-4c29-a06a-c612cd813f89" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="72d470fa-c19a-1302-1fcf-eb104ea36048" executionId="77942442-1f65-4088-9e14-b5f58e98307a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ce4a9bf6-5fc5-0a40-2cbe-242a59cb1296" executionId="6a4f2d77-9959-4c22-8cac-3e52ce04b606" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d09c033d-0065-cbeb-bd7c-ee8b6460688f" executionId="5a2516b9-c56e-4ae5-87fc-9acca0f30ba0" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1d18430d-5c1b-e3ad-7ba0-10db706f84e6" executionId="84664111-c0a8-43ed-b4bc-50bf23df8b29" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2b3ab31b-4334-ba24-1959-c1b9bc0977d5" executionId="223b2655-739a-4ec8-ac21-14fd49ef53f4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d9347c86-fccf-5c28-b3ed-f6ddbe13b8c4" executionId="03fb18d5-a583-4884-913f-6d2a41639d5a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9888ff3b-49ea-474c-769c-7a7d109d5b2a" executionId="e4f748b2-abf3-4f3c-8906-55608ddf584b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="cc38c6d2-7d3a-8a56-a6b2-9362763e7d1b" executionId="9d0d07e5-1070-4835-bee7-3bdb98acd595" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ee09c91e-8cab-77ad-9028-2c4e343a8b8f" executionId="7b718b84-6edb-455e-ba42-4712e679c63f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2e627230-d93b-6896-c6a7-349b31312652" executionId="489388a3-4876-4b9a-8cdc-338cd590ced6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="570b1720-5e3e-7567-fee9-89cfbbcee9c2" executionId="e9a3c44b-49b3-41e2-b848-112f468678a1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ecdcc425-c0f8-07fb-7bf0-9c20c3392ab2" executionId="7830f20e-b7b0-4e28-bfd9-419208e13ffa" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="354f3422-51a7-d09d-5620-feeb5dbdb83e" executionId="cfd4400f-9f15-4261-8b01-989cfd0745a1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c9f3b168-4bc0-cbbd-9931-5341acb85363" executionId="2678ef40-03c0-4874-8f38-f4c04ae04e72" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5e49f33d-b015-f2c7-c420-bc481bbb8d01" executionId="75a2cc67-54df-4aa6-93a5-d8759fb93218" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e4a41254-3a68-2383-3875-2b8943b3bc47" executionId="f2e15dbb-19ea-4270-9c47-889dc52eecce" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6c71df5b-b7f6-05bc-a9d9-7a5a418694ed" executionId="da7139f8-75cf-42a7-a463-1bd8fc5b30d4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="eac20402-24fc-07bf-8300-6de67af22151" executionId="a384ea3d-360f-4b1e-928b-284ab26aa1ff" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7163846b-97dc-3fe1-9bff-737e01453fc3" executionId="52924493-be8e-4c23-a11b-2044a8cc9a34" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5b9bcab8-4e74-31a9-a78c-dbaaa36e3264" executionId="eae1f9d0-8ffa-48f3-b8e3-b50d70d7d52d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f5f92d6f-2aff-0d4e-92cc-ebea6c783047" executionId="240b5ed7-de3a-4cf1-85fe-05a72a9f127e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="89f6c218-0aa5-1429-f042-a75ec9d24b22" executionId="1d37000d-0796-47a7-9956-db39b06e621c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="cbaf1514-900c-d6bc-5a11-01b1824f3093" executionId="c21ea2e5-1288-4838-93fa-543a84ce57d3" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4e84406f-3151-5b14-7af0-b81b574f9cb2" executionId="1028c24b-0c0d-4c0c-9fd0-3c2eabc02085" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2cf81da0-b83f-8c2c-4333-336bcc3d1fb4" executionId="e4cd7512-2ecd-49a1-a0d9-fa605f23ab2b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2c8f1abb-446c-6683-6327-8ec4ccd46e1a" executionId="b922bd5d-b364-4884-ac0c-135f545ba10d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9efc5df4-5f77-a670-8622-976418721b8f" executionId="49361ccf-dc28-4b38-98e9-588b5bd3bdf8" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9bb2410c-d8c6-90b8-75cd-5c93dc903745" executionId="5874deb3-2d61-4327-a9d5-ab69b84ddc1b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="05c22c90-eaaa-d3c2-bd2d-36c2df85528e" executionId="c001e2ce-e975-47af-a2d3-4ec535b3da48" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e64af447-d4dc-7221-865a-703128db7b90" executionId="9bc28dfb-f700-407d-9c16-b7145e317b26" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b04f3200-80ca-d47f-0c01-8a37e5c952e6" executionId="88e82e4b-5ab7-4426-bf3e-4fe70a4fda01" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8c97c958-0c5d-1594-2cc5-02c96df8fc9b" executionId="4bba6332-b3d9-40ce-bf94-c1923cd4a90c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6e54c207-a3b1-f181-06be-066795ac26e1" executionId="b7c51e4c-ea48-453b-8835-22b1588f72c0" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8f2bb160-fa82-a566-570e-51eeb5237e95" executionId="f4665bf8-a86f-4ff3-801f-909fcaf8f9c4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="73c03e74-0c0b-5c1d-2193-91dd98f1f95e" executionId="66244aa2-1b69-485b-a8e6-80813ae16f8c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="763d7e52-45c9-3e45-478d-dd6659bc69ba" executionId="43875087-c3a0-4af4-a390-428a6f8ac228" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f8369e2e-c5ec-dade-ad85-e2c56909c853" executionId="d7da7195-00be-4b87-8ada-92edf399920a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5caa1aa9-2d56-0fc8-5599-56bd995599ca" executionId="95867228-8daa-4555-9b09-d8c5146c3ada" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3fe8806f-fabb-1deb-7e27-c59578f16da3" executionId="584d0a1c-8fda-48fe-8f36-7173bc64cbed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6a1be91c-570b-7575-7d8f-f960cd83f9ec" executionId="80bb5ba1-3f5a-405d-b92d-31d9076230a7" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b891bd24-e5b1-222b-8d70-96a2ba7b0807" executionId="f6227792-6cce-41f1-85da-f33cea1571d9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="fb3ec8b2-a410-ecc8-265b-29bfd3772553" executionId="fd2a3730-0702-48e0-803c-55e557d10709" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a3bd6f67-daac-1ebc-5894-1d73dbe8d707" executionId="b3661575-dd1e-4cf6-961f-5367e95948b1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7699da71-b819-eb00-3894-2f0be7eec39c" executionId="0f856ca7-869a-41fd-8183-e9c504955859" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d253522e-be41-9b3a-247a-ca440d4ac588" executionId="85b2fe15-71b0-4939-9bdd-0c7009ab2326" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="cca2404a-911a-a50e-9898-327264f0ea76" executionId="ea6e5b1c-88cc-4209-b9aa-cff67684fe84" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="22ccdb90-02c8-97c1-e2a1-6bec4f044d99" executionId="b1fab830-1f7f-4439-b430-876cec5391ff" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
  </TestEntries>
  <Results>
    <UnitTestResult executionId="316f05ba-c3a7-4716-80dd-9076ed9bda5a" testId="4d0f7327-ed22-9a43-969a-ac2ea8102d66" testName="AddingSeveralNumbers_40" computerName="DESKTOP" duration="00:00:00.3436488" startTime="2018-08-29T14:10:47.1500364+02:00" endTime="2018-08-29T14:10:48.4695091+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="316f05ba-c3a7-4716-80dd-9076ed9bda5a">
      <Output>
        <StdOut>Given the calculator has clean memory
-&gt; done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0.0s)
Given I have entered 40 into the calculator
-&gt; done: AdditionSteps.GivenIHaveEnteredIntoTheCalculator(40) (0.0s)
And I have entered 50 into the calculator
-&gt; done: AdditionSteps.GivenIHaveEnteredIntoTheCalculator(50) (0.0s)
And I have entered 90 into the calculator
-&gt; done: AdditionSteps.GivenIHaveEnteredIntoTheCalculator(90) (0.0s)
When I press add
-&gt; done: AdditionSteps.WhenIPressAdd() (0.0s)
Then the result should be 180 on the screen
-&gt; done: AdditionSteps.ThenTheResultShouldBeOnTheScreen(180) (0.1s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c164b264-e579-487a-befb-d075d37152fa" testId="f4b45c2f-fc98-d23c-6179-62d5b5a59825" testName="AddingSeveralNumbers_60" computerName="DESKTOP" duration="00:00:00.0010043" startTime="2018-08-29T14:10:48.4884578+02:00" endTime="2018-08-29T14:10:48.5193757+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c164b264-e579-487a-befb-d075d37152fa">
      <Output>
        <StdOut>Given the calculator has clean memory
-&gt; done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0.0s)
Given I have entered 60 into the calculator
-&gt; done: AdditionSteps.GivenIHaveEnteredIntoTheCalculator(60) (0.0s)
And I have entered 70 into the calculator
-&gt; done: AdditionSteps.GivenIHaveEnteredIntoTheCalculator(70) (0.0s)
And I have entered 130 into the calculator
-&gt; done: AdditionSteps.GivenIHaveEnteredIntoTheCalculator(130) (0.0s)
When I press add
-&gt; done: AdditionSteps.WhenIPressAdd() (0.0s)
Then the result should be 260 on the screen
-&gt; done: AdditionSteps.ThenTheResultShouldBeOnTheScreen(260) (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="49de7194-cee9-4415-b7f6-b6b6f7fc479d" testId="6b8581c3-611e-6116-4232-a31382677735" testName="AddTwoNumbers" computerName="DESKTOP" duration="00:00:00.0104597" startTime="2018-08-29T14:10:48.5473011+02:00" endTime="2018-08-29T14:10:48.5632584+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="49de7194-cee9-4415-b7f6-b6b6f7fc479d">
      <Output>
        <StdOut>Given the calculator has clean memory
-&gt; done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0.0s)
Given I have entered 1 into the calculator
-&gt; done: AdditionSteps.GivenIHaveEnteredIntoTheCalculator(1) (0.0s)
And I have entered 2 into the calculator
-&gt; done: AdditionSteps.GivenIHaveEnteredIntoTheCalculator(2) (0.0s)
When I press add
-&gt; done: AdditionSteps.WhenIPressAdd() (0.0s)
Then the result should be 3 on the screen
-&gt; done: AdditionSteps.ThenTheResultShouldBeOnTheScreen(3) (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="683f1212-59fa-4786-9af8-c75409196c88" testId="b13a186e-33df-348e-f9e2-a18b445d0d6e" testName="FailToAddTwoNumbers" computerName="DESKTOP" duration="00:00:00.0912896" startTime="2018-08-29T14:10:48.5782191+02:00" endTime="2018-08-29T14:10:48.6769544+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="683f1212-59fa-4786-9af8-c75409196c88">
      <Output>
        <StdOut>Given the calculator has clean memory
-&gt; done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0.0s)
Given I have entered 1 into the calculator
-&gt; done: AdditionSteps.GivenIHaveEnteredIntoTheCalculator(1) (0.0s)
And I have entered 2.2 into the calculator
-&gt; done: AdditionSteps.GivenIHaveEnteredIntoTheCalculator(2.2) (0.0s)
When I press add
-&gt; done: AdditionSteps.WhenIPressAdd() (0.0s)
Then the result should be 3.2 on the screen
-&gt; error: Input string was not in a correct format.</StdOut>
        <ErrorInfo>
          <Message>Test method Pickles.TestHarness.MsTest.AdditionFeature.FailToAddTwoNumbers threw exception: 
System.FormatException: Input string was not in a correct format.</Message>
          <StackTrace>    at System.Number.StringToNumber(String str, NumberStyles options, NumberBuffer&amp; number, NumberFormatInfo info, Boolean parseDecimal)
   at System.Number.ParseInt32(String s, NumberStyles style, NumberFormatInfo info)
   at System.String.System.IConvertible.ToInt32(IFormatProvider provider)
   at System.Convert.ChangeType(Object value, Type conversionType, IFormatProvider provider)
   at System.Linq.Enumerable.&lt;SelectIterator&gt;d__5`2.MoveNext()
   at System.Linq.Buffer`1..ctor(IEnumerable`1 source)
   at System.Linq.Enumerable.ToArray[TSource](IEnumerable`1 source)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.GetExecuteArguments(BindingMatch match)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep(StepInstance stepInstance)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at Pickles.TestHarness.MsTest.AdditionFeature.ScenarioCleanup()
   at Pickles.TestHarness.MsTest.AdditionFeature.FailToAddTwoNumbers() in C:\Git\pickles\test-harness\MsTest\Addition.feature:line 34
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="dbce4d41-1876-48d0-8390-599fbaf37471" testId="2124dd33-7aaa-d4fb-c72f-98ad434251c0" testName="NotAutomatedAddingTwoNumbers" computerName="DESKTOP" duration="00:00:00.1826410" startTime="2018-08-29T14:10:48.7118609+02:00" endTime="2018-08-29T14:10:48.9043746+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Inconclusive" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="dbce4d41-1876-48d0-8390-599fbaf37471">
      <Output>
        <StdOut>Given the calculator has clean memory
-&gt; done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0.0s)
Given unimplemented step
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Given(@"unimplemented step")]
        public void GivenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }

When unimplemented step
-&gt; No matching step definition found for the step. Use the following code to create one:
        [When(@"unimplemented step")]
        public void WhenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }

Then unimplemented step
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Then(@"unimplemented step")]
        public void ThenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }</StdOut>
        <ErrorInfo>
          <Message>Assert.Inconclusive failed. No matching step definition found for one or more steps.
using System;
using TechTalk.SpecFlow;

namespace MyNamespace
{
    [Binding]
    public class StepDefinitions
    {
        [Given(@"unimplemented step")]
        public void GivenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }
        
        [When(@"unimplemented step")]
        public void WhenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }
        
        [Then(@"unimplemented step")]
        public void ThenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }
    }
}
</Message>
          <StackTrace>   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at Pickles.TestHarness.MsTest.AdditionFeature.ScenarioCleanup()
   at Pickles.TestHarness.MsTest.AdditionFeature.NotAutomatedAddingTwoNumbers() in C:\Git\pickles\test-harness\MsTest\Addition.feature:line 46
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="fce5a8a3-7950-4172-b4c0-847db93467ac" testId="b4815779-aba4-cf1b-8df3-4a745af70720" testName="AddingSeveralNumbers_40" computerName="DESKTOP" duration="00:00:00.0188548" startTime="2018-08-29T14:10:48.9322995+02:00" endTime="2018-08-29T14:10:48.9731899+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="fce5a8a3-7950-4172-b4c0-847db93467ac">
      <Output>
        <StdOut>Given the background step fails
-&gt; error: 
The checked value is different from the expected one.
The checked value:
	[True]
The expected value:
	[False]
And the calculator has clean memory
-&gt; skipped because of previous errors
Given I have entered 40 into the calculator
-&gt; skipped because of previous errors
And I have entered 50 into the calculator
-&gt; skipped because of previous errors
And I have entered 90 into the calculator
-&gt; skipped because of previous errors
When I press add
-&gt; skipped because of previous errors
Then the result should be 180 on the screen
-&gt; skipped because of previous errors</StdOut>
        <ErrorInfo>
          <Message>Test method Pickles.TestHarness.MsTest.FailingBackgroundFeature.AddingSeveralNumbers_40 threw exception: 
NFluent.FluentCheckException: 
The checked value is different from the expected one.
The checked value:
	[True]
The expected value:
	[False]</Message>
          <StackTrace>    at NFluent.Helpers.EqualityHelper.IsEqualTo(Object instance, Object expected)
   at NFluent.Extensibility.Checker`2.ExecuteCheck(Action action, String negatedExceptionMessage)
   at AutomationLayer.MarkTestAs.Failing() in C:\Git\pickles\test-harness\AutomationLayer\MarkTestAs.cs:line 15
   at AutomationLayer.AdditionSteps.GivenTheBackgroundStepFails() in C:\Git\pickles\test-harness\AutomationLayer\AdditionSteps.cs:line 25
   at TechTalk.SpecFlow.Bindings.BindingInvoker.InvokeBinding(IBinding binding, IContextManager contextManager, Object[] arguments, ITestTracer testTracer, TimeSpan&amp; duration)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStepMatch(BindingMatch match, Object[] arguments)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep(StepInstance stepInstance)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at Pickles.TestHarness.MsTest.FailingBackgroundFeature.ScenarioCleanup()
   at Pickles.TestHarness.MsTest.FailingBackgroundFeature.AddingSeveralNumbers(String firstNumber, String secondNumber, String thirdNumber, String result, String[] exampleTags) in C:\Git\pickles\test-harness\MsTest\FailingBackground.feature:line 19
   at Pickles.TestHarness.MsTest.FailingBackgroundFeature.AddingSeveralNumbers_40()
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="4b20ec71-fb68-43c8-b122-0409d431c45c" testId="17bb28b8-a770-72be-af08-5a4b0847e4ea" testName="AddingSeveralNumbers_60" computerName="DESKTOP" duration="00:00:00.0045623" startTime="2018-08-29T14:10:48.9891477+02:00" endTime="2018-08-29T14:10:49.0110890+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4b20ec71-fb68-43c8-b122-0409d431c45c">
      <Output>
        <StdOut>Given the background step fails
-&gt; error: 
The checked value is different from the expected one.
The checked value:
	[True]
The expected value:
	[False]
And the calculator has clean memory
-&gt; skipped because of previous errors
Given I have entered 60 into the calculator
-&gt; skipped because of previous errors
And I have entered 70 into the calculator
-&gt; skipped because of previous errors
And I have entered 130 into the calculator
-&gt; skipped because of previous errors
When I press add
-&gt; skipped because of previous errors
Then the result should be 260 on the screen
-&gt; skipped because of previous errors</StdOut>
        <ErrorInfo>
          <Message>Test method Pickles.TestHarness.MsTest.FailingBackgroundFeature.AddingSeveralNumbers_60 threw exception: 
NFluent.FluentCheckException: 
The checked value is different from the expected one.
The checked value:
	[True]
The expected value:
	[False]</Message>
          <StackTrace>    at NFluent.Helpers.EqualityHelper.IsEqualTo(Object instance, Object expected)
   at NFluent.Extensibility.Checker`2.ExecuteCheck(Action action, String negatedExceptionMessage)
   at AutomationLayer.MarkTestAs.Failing() in C:\Git\pickles\test-harness\AutomationLayer\MarkTestAs.cs:line 15
   at AutomationLayer.AdditionSteps.GivenTheBackgroundStepFails() in C:\Git\pickles\test-harness\AutomationLayer\AdditionSteps.cs:line 25
   at TechTalk.SpecFlow.Bindings.BindingInvoker.InvokeBinding(IBinding binding, IContextManager contextManager, Object[] arguments, ITestTracer testTracer, TimeSpan&amp; duration)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStepMatch(BindingMatch match, Object[] arguments)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep(StepInstance stepInstance)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at Pickles.TestHarness.MsTest.FailingBackgroundFeature.ScenarioCleanup()
   at Pickles.TestHarness.MsTest.FailingBackgroundFeature.AddingSeveralNumbers(String firstNumber, String secondNumber, String thirdNumber, String result, String[] exampleTags) in C:\Git\pickles\test-harness\MsTest\FailingBackground.feature:line 19
   at Pickles.TestHarness.MsTest.FailingBackgroundFeature.AddingSeveralNumbers_60()
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="1b6fbf1e-2075-48b6-b85b-404eec8de9c1" testId="ca63316a-39e5-9545-3bca-f1839c7b4664" testName="AddTwoNumbers" computerName="DESKTOP" duration="00:00:00.0057561" startTime="2018-08-29T14:10:49.0370193+02:00" endTime="2018-08-29T14:10:49.0489873+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1b6fbf1e-2075-48b6-b85b-404eec8de9c1">
      <Output>
        <StdOut>Given the background step fails
-&gt; error: 
The checked value is different from the expected one.
The checked value:
	[True]
The expected value:
	[False]
And the calculator has clean memory
-&gt; skipped because of previous errors
Given I have entered 50 into the calculator
-&gt; skipped because of previous errors
And I have entered 70 into the calculator
-&gt; skipped because of previous errors
When I press add
-&gt; skipped because of previous errors
Then the result should be 120 on the screen
-&gt; skipped because of previous errors</StdOut>
        <ErrorInfo>
          <Message>Test method Pickles.TestHarness.MsTest.FailingBackgroundFeature.AddTwoNumbers threw exception: 
NFluent.FluentCheckException: 
The checked value is different from the expected one.
The checked value:
	[True]
The expected value:
	[False]</Message>
          <StackTrace>    at NFluent.Helpers.EqualityHelper.IsEqualTo(Object instance, Object expected)
   at NFluent.Extensibility.Checker`2.ExecuteCheck(Action action, String negatedExceptionMessage)
   at AutomationLayer.MarkTestAs.Failing() in C:\Git\pickles\test-harness\AutomationLayer\MarkTestAs.cs:line 15
   at AutomationLayer.AdditionSteps.GivenTheBackgroundStepFails() in C:\Git\pickles\test-harness\AutomationLayer\AdditionSteps.cs:line 25
   at TechTalk.SpecFlow.Bindings.BindingInvoker.InvokeBinding(IBinding binding, IContextManager contextManager, Object[] arguments, ITestTracer testTracer, TimeSpan&amp; duration)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStepMatch(BindingMatch match, Object[] arguments)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep(StepInstance stepInstance)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at Pickles.TestHarness.MsTest.FailingBackgroundFeature.ScenarioCleanup()
   at Pickles.TestHarness.MsTest.FailingBackgroundFeature.AddTwoNumbers() in C:\Git\pickles\test-harness\MsTest\FailingBackground.feature:line 12
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="61af7b8a-9208-421d-938e-1990a4edfb34" testId="18582dd5-09c7-ce67-9cb7-8e15a9cdffd0" testName="FailingFeatureFailingScenario" computerName="DESKTOP" duration="00:00:00.0094677" startTime="2018-08-29T14:10:49.0629495+02:00" endTime="2018-08-29T14:10:49.0928704+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="61af7b8a-9208-421d-938e-1990a4edfb34">
      <Output>
        <StdOut>Then failing step
-&gt; error: 
The checked value is different from the expected one.
The checked value:
	[True]
The expected value:
	[False]</StdOut>
        <ErrorInfo>
          <Message>Test method Pickles.TestHarness.MsTest.MinimalFeatures.FailingFeature.FailingFeatureFailingScenario threw exception: 
NFluent.FluentCheckException: 
The checked value is different from the expected one.
The checked value:
	[True]
The expected value:
	[False]</Message>
          <StackTrace>    at NFluent.Helpers.EqualityHelper.IsEqualTo(Object instance, Object expected)
   at NFluent.Extensibility.Checker`2.ExecuteCheck(Action action, String negatedExceptionMessage)
   at AutomationLayer.MarkTestAs.Failing() in C:\Git\pickles\test-harness\AutomationLayer\MarkTestAs.cs:line 15
   at AutomationLayer.MinimalFeatures.MinimalSteps.ThenFailingStep() in C:\Git\pickles\test-harness\AutomationLayer\MinimalFeatures\MinimalSteps.cs:line 24
   at TechTalk.SpecFlow.Bindings.BindingInvoker.InvokeBinding(IBinding binding, IContextManager contextManager, Object[] arguments, ITestTracer testTracer, TimeSpan&amp; duration)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStepMatch(BindingMatch match, Object[] arguments)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep(StepInstance stepInstance)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at Pickles.TestHarness.MsTest.MinimalFeatures.FailingFeature.ScenarioCleanup()
   at Pickles.TestHarness.MsTest.MinimalFeatures.FailingFeature.FailingFeatureFailingScenario() in C:\Git\pickles\test-harness\MsTest\Minimal Features\Failing.feature:line 10
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="ecb2f205-8e3d-4665-985b-51a4e2caef40" testId="7e6c75c9-5365-7582-f701-20d37d3ff511" testName="FailingFeatureInconclusiveScenario" computerName="DESKTOP" duration="00:00:00.0051682" startTime="2018-08-29T14:10:49.1108219+02:00" endTime="2018-08-29T14:10:49.1217932+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Inconclusive" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ecb2f205-8e3d-4665-985b-51a4e2caef40">
      <Output>
        <StdOut>Then inconclusive step
-&gt; pending: MinimalSteps.ThenInconclusiveStep()</StdOut>
        <ErrorInfo>
          <Message>Assert.Inconclusive failed. One or more step definitions are not implemented yet.
  MinimalSteps.ThenInconclusiveStep()</Message>
          <StackTrace>   at Pickles.TestHarness.MsTest.MinimalFeatures.FailingFeature.ScenarioCleanup()
   at Pickles.TestHarness.MsTest.MinimalFeatures.FailingFeature.FailingFeatureInconclusiveScenario() in C:\Git\pickles\test-harness\MsTest\Minimal Features\Failing.feature:line 7
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="29fc7c53-f773-45c5-9d4f-7b5345bbcf1a" testId="fa1e54c9-cdb0-8bb1-6764-9179c3b61825" testName="FailingFeaturePassingScenario" computerName="DESKTOP" duration="00:00:00.0049288" startTime="2018-08-29T14:10:49.1357559+02:00" endTime="2018-08-29T14:10:49.1517141+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="29fc7c53-f773-45c5-9d4f-7b5345bbcf1a">
      <Output>
        <StdOut>Then passing step
-&gt; done: MinimalSteps.ThenPassingStep() (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="08c5682b-a069-4459-8e24-84bbe253428c" testId="add44896-9236-510f-750d-eb49b89a7a65" testName="InconclusiveFeatureInconclusiveScenario" computerName="DESKTOP" duration="00:00:00.0036970" startTime="2018-08-29T14:10:49.1706619+02:00" endTime="2018-08-29T14:10:49.1826308+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Inconclusive" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="08c5682b-a069-4459-8e24-84bbe253428c">
      <Output>
        <StdOut>Then inconclusive step
-&gt; pending: MinimalSteps.ThenInconclusiveStep()</StdOut>
        <ErrorInfo>
          <Message>Assert.Inconclusive failed. One or more step definitions are not implemented yet.
  MinimalSteps.ThenInconclusiveStep()</Message>
          <StackTrace>   at Pickles.TestHarness.MsTest.MinimalFeatures.InconclusiveFeature.ScenarioCleanup()
   at Pickles.TestHarness.MsTest.MinimalFeatures.InconclusiveFeature.InconclusiveFeatureInconclusiveScenario() in C:\Git\pickles\test-harness\MsTest\Minimal Features\Inconclusive.feature:line 7
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="18a97de5-04f0-437c-b238-1241259ba30e" testId="41cb0c4f-1c07-4937-29e8-dcc987caf94e" testName="InconclusiveFeaturePassingScenario" computerName="DESKTOP" duration="00:00:00.0043110" startTime="2018-08-29T14:10:49.2095577+02:00" endTime="2018-08-29T14:10:49.2195315+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="18a97de5-04f0-437c-b238-1241259ba30e">
      <Output>
        <StdOut>Then passing step
-&gt; done: MinimalSteps.ThenPassingStep() (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="2544400f-8d03-490d-b046-23038027cd12" testId="3af599bd-a8de-95a2-1ecc-194c7f8aceeb" testName="PassingFeaturePassingScenario" computerName="DESKTOP" duration="00:00:00.0011758" startTime="2018-08-29T14:10:49.2394777+02:00" endTime="2018-08-29T14:10:49.2534417+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2544400f-8d03-490d-b046-23038027cd12">
      <Output>
        <StdOut>Then passing step
-&gt; done: MinimalSteps.ThenPassingStep() (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="22f423c4-8c3b-4214-80ee-bde941ea1c5b" testId="0e090158-43a1-1be8-47c2-13e1b2c9f8c7" testName="NotAutomatedScenario1" computerName="DESKTOP" duration="00:00:00.0127953" startTime="2018-08-29T14:10:49.3033075+02:00" endTime="2018-08-29T14:10:49.3252497+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Inconclusive" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="22f423c4-8c3b-4214-80ee-bde941ea1c5b">
      <Output>
        <StdOut>Given unimplemented step
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Given(@"unimplemented step")]
        public void GivenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }

Given unimplemented step
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Given(@"unimplemented step")]
        public void GivenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }

When unimplemented step
-&gt; No matching step definition found for the step. Use the following code to create one:
        [When(@"unimplemented step")]
        public void WhenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }

Then unimplemented step
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Then(@"unimplemented step")]
        public void ThenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }</StdOut>
        <ErrorInfo>
          <Message>Assert.Inconclusive failed. No matching step definition found for one or more steps.
using System;
using TechTalk.SpecFlow;

namespace MyNamespace
{
    [Binding]
    public class StepDefinitions
    {
        [Given(@"unimplemented step")]
        public void GivenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }
        
        [When(@"unimplemented step")]
        public void WhenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }
        
        [Then(@"unimplemented step")]
        public void ThenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }
    }
}
</Message>
          <StackTrace>   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at Pickles.TestHarness.MsTest.NotAutomatedAtAllFeature.ScenarioCleanup()
   at Pickles.TestHarness.MsTest.NotAutomatedAtAllFeature.NotAutomatedScenario1() in C:\Git\pickles\test-harness\MsTest\NotAutomatedAtAll.feature:line 9
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c31042bd-944d-4e0a-8a6b-54462d7295dd" testId="067e1c92-2860-531b-28dc-c2863e91b7f5" testName="NotAutomatedScenario2" computerName="DESKTOP" duration="00:00:00.0122999" startTime="2018-08-29T14:10:49.3491848+02:00" endTime="2018-08-29T14:10:49.3661405+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Inconclusive" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c31042bd-944d-4e0a-8a6b-54462d7295dd">
      <Output>
        <StdOut>Given unimplemented step
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Given(@"unimplemented step")]
        public void GivenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }

Given unimplemented step
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Given(@"unimplemented step")]
        public void GivenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }

When unimplemented step
-&gt; No matching step definition found for the step. Use the following code to create one:
        [When(@"unimplemented step")]
        public void WhenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }

Then unimplemented step
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Then(@"unimplemented step")]
        public void ThenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }</StdOut>
        <ErrorInfo>
          <Message>Assert.Inconclusive failed. No matching step definition found for one or more steps.
using System;
using TechTalk.SpecFlow;

namespace MyNamespace
{
    [Binding]
    public class StepDefinitions
    {
        [Given(@"unimplemented step")]
        public void GivenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }
        
        [When(@"unimplemented step")]
        public void WhenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }
        
        [Then(@"unimplemented step")]
        public void ThenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }
    }
}
</Message>
          <StackTrace>   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at Pickles.TestHarness.MsTest.NotAutomatedAtAllFeature.ScenarioCleanup()
   at Pickles.TestHarness.MsTest.NotAutomatedAtAllFeature.NotAutomatedScenario2() in C:\Git\pickles\test-harness\MsTest\NotAutomatedAtAll.feature:line 14
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="5e95e831-9712-4a38-9b5c-f6210350cb30" testId="64813bea-d79b-d74b-adb5-1302eaf5641f" testName="NotAutomatedScenario3" computerName="DESKTOP" duration="00:00:00.0118890" startTime="2018-08-29T14:10:49.3820962+02:00" endTime="2018-08-29T14:10:49.4289728+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Inconclusive" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5e95e831-9712-4a38-9b5c-f6210350cb30">
      <Output>
        <StdOut>Given unimplemented step
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Given(@"unimplemented step")]
        public void GivenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }

Given unimplemented step
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Given(@"unimplemented step")]
        public void GivenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }

When unimplemented step
-&gt; No matching step definition found for the step. Use the following code to create one:
        [When(@"unimplemented step")]
        public void WhenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }

Then unimplemented step
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Then(@"unimplemented step")]
        public void ThenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }</StdOut>
        <ErrorInfo>
          <Message>Assert.Inconclusive failed. No matching step definition found for one or more steps.
using System;
using TechTalk.SpecFlow;

namespace MyNamespace
{
    [Binding]
    public class StepDefinitions
    {
        [Given(@"unimplemented step")]
        public void GivenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }
        
        [When(@"unimplemented step")]
        public void WhenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }
        
        [Then(@"unimplemented step")]
        public void ThenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }
    }
}
</Message>
          <StackTrace>   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at Pickles.TestHarness.MsTest.NotAutomatedAtAllFeature.ScenarioCleanup()
   at Pickles.TestHarness.MsTest.NotAutomatedAtAllFeature.NotAutomatedScenario3() in C:\Git\pickles\test-harness\MsTest\NotAutomatedAtAll.feature:line 19
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="14ea06ff-5eed-47d0-b701-f029ce616717" testId="aa71fe8a-e5aa-f23d-c632-cfb3c587ca21" testName="TestMethod" computerName="DESKTOP" duration="00:00:00.0080439" startTime="2018-08-29T14:10:49.4628812+02:00" endTime="2018-08-29T14:10:49.4848221+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="14ea06ff-5eed-47d0-b701-f029ce616717">
    </UnitTestResult>
    <UnitTestResult executionId="873d36c3-6c14-4a13-907d-2957c695662b" testId="78aeddd0-4ae5-6103-b7dd-e62b71148721" testName="AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet0_Pass_1" computerName="DESKTOP" duration="00:00:00.0030267" startTime="2018-08-29T14:10:49.5027733+02:00" endTime="2018-08-29T14:10:49.5107524+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="873d36c3-6c14-4a13-907d-2957c695662b">
      <Output>
        <StdOut>Then the scenario will 'pass_1'
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("pass_1") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="84de2d10-ee0d-41d7-bdb6-2b8a15a14710" testId="ee74d71f-f824-19d9-866e-a408a95ffa99" testName="AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet0_Pass_2" computerName="DESKTOP" duration="00:00:00.0077930" startTime="2018-08-29T14:10:49.5237188+02:00" endTime="2018-08-29T14:10:49.5396825+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="84de2d10-ee0d-41d7-bdb6-2b8a15a14710">
      <Output>
        <StdOut>Then the scenario will 'pass_2'
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("pass_2") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="5dccc675-ad8a-48ce-a708-60a9ef8acb0f" testId="e30ef794-1ea7-a76a-356b-1668bca94630" testName="AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet1_Inconclusive_1" computerName="DESKTOP" duration="00:00:00.0063714" startTime="2018-08-29T14:10:49.5566301+02:00" endTime="2018-08-29T14:10:49.5805747+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Inconclusive" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5dccc675-ad8a-48ce-a708-60a9ef8acb0f">
      <Output>
        <StdOut>Then the scenario will 'inconclusive_1'
-&gt; pending: ScenarioOutlineSteps.ThenTheScenarioWill("inconclusive_1")</StdOut>
        <ErrorInfo>
          <Message>Assert.Inconclusive failed. One or more step definitions are not implemented yet.
  ScenarioOutlineSteps.ThenTheScenarioWill("inconclusive_1")</Message>
          <StackTrace>   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.ScenarioCleanup()
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.AndWeCanGoTotallyBonkersWithMultipleExampleSections_(String result, String[] exampleTags) in C:\Git\pickles\test-harness\MsTest\ScenarioOutlines.feature:line 45
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet1_Inconclusive_1()
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="133c2590-8bf3-48ee-b890-049adc14ef87" testId="4d5f7893-139c-db00-8823-de561780758d" testName="AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet1_Inconclusive_2" computerName="DESKTOP" duration="00:00:00.0159820" startTime="2018-08-29T14:10:49.6015099+02:00" endTime="2018-08-29T14:10:49.6294353+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Inconclusive" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="133c2590-8bf3-48ee-b890-049adc14ef87">
      <Output>
        <StdOut>Then the scenario will 'inconclusive_2'
-&gt; pending: ScenarioOutlineSteps.ThenTheScenarioWill("inconclusive_2")</StdOut>
        <ErrorInfo>
          <Message>Assert.Inconclusive failed. One or more step definitions are not implemented yet.
  ScenarioOutlineSteps.ThenTheScenarioWill("inconclusive_2")</Message>
          <StackTrace>   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.ScenarioCleanup()
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.AndWeCanGoTotallyBonkersWithMultipleExampleSections_(String result, String[] exampleTags) in C:\Git\pickles\test-harness\MsTest\ScenarioOutlines.feature:line 45
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet1_Inconclusive_2()
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="ba5fef97-299a-4350-838d-0a637e117977" testId="78a6b3a3-679e-ee71-7ff5-c9338e3be6c2" testName="AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet2_Fail_1" computerName="DESKTOP" duration="00:00:00.0049292" startTime="2018-08-29T14:10:49.6463901+02:00" endTime="2018-08-29T14:10:49.6593553+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ba5fef97-299a-4350-838d-0a637e117977">
      <Output>
        <StdOut>Then the scenario will 'fail_1'
-&gt; error: 
The checked value is different from the expected one.
The checked value:
	[True]
The expected value:
	[False]</StdOut>
        <ErrorInfo>
          <Message>Test method Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet2_Fail_1 threw exception: 
NFluent.FluentCheckException: 
The checked value is different from the expected one.
The checked value:
	[True]
The expected value:
	[False]</Message>
          <StackTrace>    at NFluent.Helpers.EqualityHelper.IsEqualTo(Object instance, Object expected)
   at NFluent.Extensibility.Checker`2.ExecuteCheck(Action action, String negatedExceptionMessage)
   at AutomationLayer.MarkTestAs.Failing() in C:\Git\pickles\test-harness\AutomationLayer\MarkTestAs.cs:line 15
   at AutomationLayer.ScenarioOutlineSteps.ThenTheScenarioWill(String result) in C:\Git\pickles\test-harness\AutomationLayer\ScenarioOutlineSteps.cs:line 19
   at TechTalk.SpecFlow.Bindings.BindingInvoker.InvokeBinding(IBinding binding, IContextManager contextManager, Object[] arguments, ITestTracer testTracer, TimeSpan&amp; duration)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStepMatch(BindingMatch match, Object[] arguments)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep(StepInstance stepInstance)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.ScenarioCleanup()
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.AndWeCanGoTotallyBonkersWithMultipleExampleSections_(String result, String[] exampleTags) in C:\Git\pickles\test-harness\MsTest\ScenarioOutlines.feature:line 45
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet2_Fail_1()
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="ea5b96a7-3b35-4c29-a06a-c612cd813f89" testId="40304968-0dee-8e41-4f42-20809899a9d0" testName="AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet2_Fail_2" computerName="DESKTOP" duration="00:00:00.0111667" startTime="2018-08-29T14:10:49.6723345+02:00" endTime="2018-08-29T14:10:49.6882777+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ea5b96a7-3b35-4c29-a06a-c612cd813f89">
      <Output>
        <StdOut>Then the scenario will 'fail_2'
-&gt; error: 
The checked value is different from the expected one.
The checked value:
	[True]
The expected value:
	[False]</StdOut>
        <ErrorInfo>
          <Message>Test method Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet2_Fail_2 threw exception: 
NFluent.FluentCheckException: 
The checked value is different from the expected one.
The checked value:
	[True]
The expected value:
	[False]</Message>
          <StackTrace>    at NFluent.Helpers.EqualityHelper.IsEqualTo(Object instance, Object expected)
   at NFluent.Extensibility.Checker`2.ExecuteCheck(Action action, String negatedExceptionMessage)
   at AutomationLayer.MarkTestAs.Failing() in C:\Git\pickles\test-harness\AutomationLayer\MarkTestAs.cs:line 15
   at AutomationLayer.ScenarioOutlineSteps.ThenTheScenarioWill(String result) in C:\Git\pickles\test-harness\AutomationLayer\ScenarioOutlineSteps.cs:line 19
   at TechTalk.SpecFlow.Bindings.BindingInvoker.InvokeBinding(IBinding binding, IContextManager contextManager, Object[] arguments, ITestTracer testTracer, TimeSpan&amp; duration)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStepMatch(BindingMatch match, Object[] arguments)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep(StepInstance stepInstance)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.ScenarioCleanup()
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.AndWeCanGoTotallyBonkersWithMultipleExampleSections_(String result, String[] exampleTags) in C:\Git\pickles\test-harness\MsTest\ScenarioOutlines.feature:line 45
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet2_Fail_2()
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="77942442-1f65-4088-9e14-b5f58e98307a" testId="72d470fa-c19a-1302-1fcf-eb104ea36048" testName="DealCorrectlyWithBackslashesInTheExamples_CTemp" computerName="DESKTOP" duration="00:00:00.0033966" startTime="2018-08-29T14:10:49.7042351+02:00" endTime="2018-08-29T14:10:49.7112170+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="77942442-1f65-4088-9e14-b5f58e98307a">
      <Output>
        <StdOut>When I have backslashes in the value, for example a 'c:\Temp\'
-&gt; done: ScenarioOutlineSteps.WhenIHaveBackslashesInTheValueForExampleAFilePath("c:\Temp\") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6a4f2d77-9959-4c22-8cac-3e52ce04b606" testId="ce4a9bf6-5fc5-0a40-2cbe-242a59cb1296" testName="DealCorrectlyWithOverlongExampleValues_PleaseEnterAValidTwoLetterCountryCodeE_G_DE" computerName="DESKTOP" duration="00:00:00.0028168" startTime="2018-08-29T14:10:49.7231931+02:00" endTime="2018-08-29T14:10:49.7361510+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6a4f2d77-9959-4c22-8cac-3e52ce04b606">
      <Output>
        <StdOut>When I have a field with value 'Please enter a valid two letter country code (e.g. DE)!'
-&gt; done: ScenarioOutlineSteps.WhenIHaveAFieldWithValue("Please enter a va...") (0.0s)
And I have a field with value 'This is just a very very very veery long error message!'
-&gt; done: ScenarioOutlineSteps.WhenIHaveAFieldWithValue("This is just a ve...") (0.0s)
Then the scenario will 'pass_1'
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("pass_1") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="5a2516b9-c56e-4ae5-87fc-9acca0f30ba0" testId="d09c033d-0065-cbeb-bd7c-ee8b6460688f" testName="DealCorrectlyWithParenthesisInTheExamples_ThisIsADescriptionAndMore" computerName="DESKTOP" duration="00:00:00.0051046" startTime="2018-08-29T14:10:49.7501128+02:00" endTime="2018-08-29T14:10:49.7590882+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5a2516b9-c56e-4ae5-87fc-9acca0f30ba0">
      <Output>
        <StdOut>When I have parenthesis in the value, for example an 'This is a description (and more)'
-&gt; done: ScenarioOutlineSteps.WhenIHaveParenthesisInTheValueForExampleAnOverlyDescriptiveField("This is a descrip...") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="84664111-c0a8-43ed-b4bc-50bf23df8b29" testId="1d18430d-5c1b-e3ad-7ba0-10db706f84e6" testName="DealWithDuplicateValues_Variant0" computerName="DESKTOP" duration="00:00:00.0007108" startTime="2018-08-29T14:10:49.7760431+02:00" endTime="2018-08-29T14:10:49.7820275+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="84664111-c0a8-43ed-b4bc-50bf23df8b29">
      <Output>
        <StdOut>Then the scenario will 'pass'
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("pass") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="223b2655-739a-4ec8-ac21-14fd49ef53f4" testId="2b3ab31b-4334-ba24-1959-c1b9bc0977d5" testName="DealWithDuplicateValues_Variant1" computerName="DESKTOP" duration="00:00:00.0046404" startTime="2018-08-29T14:10:49.7939976+02:00" endTime="2018-08-29T14:10:49.8029717+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="223b2655-739a-4ec8-ac21-14fd49ef53f4">
      <Output>
        <StdOut>Then the scenario will 'fail'
-&gt; error: 
The checked value is different from the expected one.
The checked value:
	[True]
The expected value:
	[False]</StdOut>
        <ErrorInfo>
          <Message>Test method Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.DealWithDuplicateValues_Variant1 threw exception: 
NFluent.FluentCheckException: 
The checked value is different from the expected one.
The checked value:
	[True]
The expected value:
	[False]</Message>
          <StackTrace>    at NFluent.Helpers.EqualityHelper.IsEqualTo(Object instance, Object expected)
   at NFluent.Extensibility.Checker`2.ExecuteCheck(Action action, String negatedExceptionMessage)
   at AutomationLayer.MarkTestAs.Failing() in C:\Git\pickles\test-harness\AutomationLayer\MarkTestAs.cs:line 15
   at AutomationLayer.ScenarioOutlineSteps.ThenTheScenarioWill(String result) in C:\Git\pickles\test-harness\AutomationLayer\ScenarioOutlineSteps.cs:line 19
   at TechTalk.SpecFlow.Bindings.BindingInvoker.InvokeBinding(IBinding binding, IContextManager contextManager, Object[] arguments, ITestTracer testTracer, TimeSpan&amp; duration)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStepMatch(BindingMatch match, Object[] arguments)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep(StepInstance stepInstance)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.ScenarioCleanup()
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.DealWithDuplicateValues(String result, String[] exampleTags) in C:\Git\pickles\test-harness\MsTest\ScenarioOutlines.feature:line 90
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.DealWithDuplicateValues_Variant1()
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="03fb18d5-a583-4884-913f-6d2a41639d5a" testId="d9347c86-fccf-5c28-b3ed-f6ddbe13b8c4" testName="DealWithDuplicateValues_Variant2" computerName="DESKTOP" duration="00:00:00.0026180" startTime="2018-08-29T14:10:49.8159372+02:00" endTime="2018-08-29T14:10:49.8219212+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Inconclusive" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="03fb18d5-a583-4884-913f-6d2a41639d5a">
      <Output>
        <StdOut>Then the scenario will 'inconclusive'
-&gt; pending: ScenarioOutlineSteps.ThenTheScenarioWill("inconclusive")</StdOut>
        <ErrorInfo>
          <Message>Assert.Inconclusive failed. One or more step definitions are not implemented yet.
  ScenarioOutlineSteps.ThenTheScenarioWill("inconclusive")</Message>
          <StackTrace>   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.ScenarioCleanup()
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.DealWithDuplicateValues(String result, String[] exampleTags) in C:\Git\pickles\test-harness\MsTest\ScenarioOutlines.feature:line 90
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.DealWithDuplicateValues_Variant2()
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="e4f748b2-abf3-4f3c-8906-55608ddf584b" testId="9888ff3b-49ea-474c-769c-7a7d109d5b2a" testName="DealWithDuplicateValues_Variant3" computerName="DESKTOP" duration="00:00:00.0003754" startTime="2018-08-29T14:10:49.8318941+02:00" endTime="2018-08-29T14:10:49.8348859+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e4f748b2-abf3-4f3c-8906-55608ddf584b">
      <Output>
        <StdOut>Then the scenario will 'pass'
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("pass") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="9d0d07e5-1070-4835-bee7-3bdb98acd595" testId="cc38c6d2-7d3a-8a56-a6b2-9362763e7d1b" testName="DealWithDuplicateValues_Variant4" computerName="DESKTOP" duration="00:00:00.0099106" startTime="2018-08-29T14:10:49.8448605+02:00" endTime="2018-08-29T14:10:49.8598199+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9d0d07e5-1070-4835-bee7-3bdb98acd595">
      <Output>
        <StdOut>Then the scenario will 'fail'
-&gt; error: 
The checked value is different from the expected one.
The checked value:
	[True]
The expected value:
	[False]</StdOut>
        <ErrorInfo>
          <Message>Test method Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.DealWithDuplicateValues_Variant4 threw exception: 
NFluent.FluentCheckException: 
The checked value is different from the expected one.
The checked value:
	[True]
The expected value:
	[False]</Message>
          <StackTrace>    at NFluent.Helpers.EqualityHelper.IsEqualTo(Object instance, Object expected)
   at NFluent.Extensibility.Checker`2.ExecuteCheck(Action action, String negatedExceptionMessage)
   at AutomationLayer.MarkTestAs.Failing() in C:\Git\pickles\test-harness\AutomationLayer\MarkTestAs.cs:line 15
   at AutomationLayer.ScenarioOutlineSteps.ThenTheScenarioWill(String result) in C:\Git\pickles\test-harness\AutomationLayer\ScenarioOutlineSteps.cs:line 19
   at TechTalk.SpecFlow.Bindings.BindingInvoker.InvokeBinding(IBinding binding, IContextManager contextManager, Object[] arguments, ITestTracer testTracer, TimeSpan&amp; duration)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStepMatch(BindingMatch match, Object[] arguments)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep(StepInstance stepInstance)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.ScenarioCleanup()
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.DealWithDuplicateValues(String result, String[] exampleTags) in C:\Git\pickles\test-harness\MsTest\ScenarioOutlines.feature:line 90
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.DealWithDuplicateValues_Variant4()
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="7b718b84-6edb-455e-ba42-4712e679c63f" testId="ee09c91e-8cab-77ad-9028-2c4e343a8b8f" testName="DealWithMultipleExampleSectionsWithDuplicateValues_ExampleSet0_Variant0" computerName="DESKTOP" duration="00:00:00.0006924" startTime="2018-08-29T14:10:49.8687957+02:00" endTime="2018-08-29T14:10:49.8727846+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7b718b84-6edb-455e-ba42-4712e679c63f">
      <Output>
        <StdOut>Then the scenario will 'pass'
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("pass") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="489388a3-4876-4b9a-8cdc-338cd590ced6" testId="2e627230-d93b-6896-c6a7-349b31312652" testName="DealWithMultipleExampleSectionsWithDuplicateValues_ExampleSet0_Variant1" computerName="DESKTOP" duration="00:00:00.0033728" startTime="2018-08-29T14:10:49.8837555+02:00" endTime="2018-08-29T14:10:49.8897382+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="489388a3-4876-4b9a-8cdc-338cd590ced6">
      <Output>
        <StdOut>Then the scenario will 'fail'
-&gt; error: 
The checked value is different from the expected one.
The checked value:
	[True]
The expected value:
	[False]</StdOut>
        <ErrorInfo>
          <Message>Test method Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.DealWithMultipleExampleSectionsWithDuplicateValues_ExampleSet0_Variant1 threw exception: 
NFluent.FluentCheckException: 
The checked value is different from the expected one.
The checked value:
	[True]
The expected value:
	[False]</Message>
          <StackTrace>    at NFluent.Helpers.EqualityHelper.IsEqualTo(Object instance, Object expected)
   at NFluent.Extensibility.Checker`2.ExecuteCheck(Action action, String negatedExceptionMessage)
   at AutomationLayer.MarkTestAs.Failing() in C:\Git\pickles\test-harness\AutomationLayer\MarkTestAs.cs:line 15
   at AutomationLayer.ScenarioOutlineSteps.ThenTheScenarioWill(String result) in C:\Git\pickles\test-harness\AutomationLayer\ScenarioOutlineSteps.cs:line 19
   at TechTalk.SpecFlow.Bindings.BindingInvoker.InvokeBinding(IBinding binding, IContextManager contextManager, Object[] arguments, ITestTracer testTracer, TimeSpan&amp; duration)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStepMatch(BindingMatch match, Object[] arguments)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep(StepInstance stepInstance)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.ScenarioCleanup()
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.DealWithMultipleExampleSectionsWithDuplicateValues(String result, String[] exampleTags) in C:\Git\pickles\test-harness\MsTest\ScenarioOutlines.feature:line 101
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.DealWithMultipleExampleSectionsWithDuplicateValues_ExampleSet0_Variant1()
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="e9a3c44b-49b3-41e2-b848-112f468678a1" testId="570b1720-5e3e-7567-fee9-89cfbbcee9c2" testName="DealWithMultipleExampleSectionsWithDuplicateValues_ExampleSet0_Variant2" computerName="DESKTOP" duration="00:00:00.0003592" startTime="2018-08-29T14:10:49.8987148+02:00" endTime="2018-08-29T14:10:49.9017066+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e9a3c44b-49b3-41e2-b848-112f468678a1">
      <Output>
        <StdOut>Then the scenario will 'pass'
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("pass") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="7830f20e-b7b0-4e28-bfd9-419208e13ffa" testId="ecdcc425-c0f8-07fb-7bf0-9c20c3392ab2" testName="DealWithMultipleExampleSectionsWithDuplicateValues_ExampleSet1_Variant0" computerName="DESKTOP" duration="00:00:00.0038395" startTime="2018-08-29T14:10:49.9126779+02:00" endTime="2018-08-29T14:10:49.9196595+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7830f20e-b7b0-4e28-bfd9-419208e13ffa">
      <Output>
        <StdOut>Then the scenario will 'fail'
-&gt; error: 
The checked value is different from the expected one.
The checked value:
	[True]
The expected value:
	[False]</StdOut>
        <ErrorInfo>
          <Message>Test method Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.DealWithMultipleExampleSectionsWithDuplicateValues_ExampleSet1_Variant0 threw exception: 
NFluent.FluentCheckException: 
The checked value is different from the expected one.
The checked value:
	[True]
The expected value:
	[False]</Message>
          <StackTrace>    at NFluent.Helpers.EqualityHelper.IsEqualTo(Object instance, Object expected)
   at NFluent.Extensibility.Checker`2.ExecuteCheck(Action action, String negatedExceptionMessage)
   at AutomationLayer.MarkTestAs.Failing() in C:\Git\pickles\test-harness\AutomationLayer\MarkTestAs.cs:line 15
   at AutomationLayer.ScenarioOutlineSteps.ThenTheScenarioWill(String result) in C:\Git\pickles\test-harness\AutomationLayer\ScenarioOutlineSteps.cs:line 19
   at TechTalk.SpecFlow.Bindings.BindingInvoker.InvokeBinding(IBinding binding, IContextManager contextManager, Object[] arguments, ITestTracer testTracer, TimeSpan&amp; duration)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStepMatch(BindingMatch match, Object[] arguments)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep(StepInstance stepInstance)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.ScenarioCleanup()
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.DealWithMultipleExampleSectionsWithDuplicateValues(String result, String[] exampleTags) in C:\Git\pickles\test-harness\MsTest\ScenarioOutlines.feature:line 101
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.DealWithMultipleExampleSectionsWithDuplicateValues_ExampleSet1_Variant0()
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="cfd4400f-9f15-4261-8b01-989cfd0745a1" testId="354f3422-51a7-d09d-5620-feeb5dbdb83e" testName="DealWithMultipleExampleSectionsWithDuplicateValues_ExampleSet1_Variant1" computerName="DESKTOP" duration="00:00:00.0024132" startTime="2018-08-29T14:10:49.9316271+02:00" endTime="2018-08-29T14:10:49.9376115+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Inconclusive" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="cfd4400f-9f15-4261-8b01-989cfd0745a1">
      <Output>
        <StdOut>Then the scenario will 'inconclusive'
-&gt; pending: ScenarioOutlineSteps.ThenTheScenarioWill("inconclusive")</StdOut>
        <ErrorInfo>
          <Message>Assert.Inconclusive failed. One or more step definitions are not implemented yet.
  ScenarioOutlineSteps.ThenTheScenarioWill("inconclusive")</Message>
          <StackTrace>   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.ScenarioCleanup()
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.DealWithMultipleExampleSectionsWithDuplicateValues(String result, String[] exampleTags) in C:\Git\pickles\test-harness\MsTest\ScenarioOutlines.feature:line 101
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.DealWithMultipleExampleSectionsWithDuplicateValues_ExampleSet1_Variant1()
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="2678ef40-03c0-4874-8f38-f4c04ae04e72" testId="c9f3b168-4bc0-cbbd-9931-5341acb85363" testName="DealWithMultipleExampleSectionsWithDuplicateValues_ExampleSet1_Variant2" computerName="DESKTOP" duration="00:00:00.0039347" startTime="2018-08-29T14:10:49.9475848+02:00" endTime="2018-08-29T14:10:49.9535688+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2678ef40-03c0-4874-8f38-f4c04ae04e72">
      <Output>
        <StdOut>Then the scenario will 'fail'
-&gt; error: 
The checked value is different from the expected one.
The checked value:
	[True]
The expected value:
	[False]</StdOut>
        <ErrorInfo>
          <Message>Test method Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.DealWithMultipleExampleSectionsWithDuplicateValues_ExampleSet1_Variant2 threw exception: 
NFluent.FluentCheckException: 
The checked value is different from the expected one.
The checked value:
	[True]
The expected value:
	[False]</Message>
          <StackTrace>    at NFluent.Helpers.EqualityHelper.IsEqualTo(Object instance, Object expected)
   at NFluent.Extensibility.Checker`2.ExecuteCheck(Action action, String negatedExceptionMessage)
   at AutomationLayer.MarkTestAs.Failing() in C:\Git\pickles\test-harness\AutomationLayer\MarkTestAs.cs:line 15
   at AutomationLayer.ScenarioOutlineSteps.ThenTheScenarioWill(String result) in C:\Git\pickles\test-harness\AutomationLayer\ScenarioOutlineSteps.cs:line 19
   at TechTalk.SpecFlow.Bindings.BindingInvoker.InvokeBinding(IBinding binding, IContextManager contextManager, Object[] arguments, ITestTracer testTracer, TimeSpan&amp; duration)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStepMatch(BindingMatch match, Object[] arguments)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep(StepInstance stepInstance)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.ScenarioCleanup()
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.DealWithMultipleExampleSectionsWithDuplicateValues(String result, String[] exampleTags) in C:\Git\pickles\test-harness\MsTest\ScenarioOutlines.feature:line 101
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.DealWithMultipleExampleSectionsWithDuplicateValues_ExampleSet1_Variant2()
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="75a2cc67-54df-4aa6-93a5-d8759fb93218" testId="5e49f33d-b015-f2c7-c420-bc481bbb8d01" testName="DealWithMultipleExampleSectionsWithDuplicateValues_ExampleSet1_Variant3" computerName="DESKTOP" duration="00:00:00.0003848" startTime="2018-08-29T14:10:49.9635417+02:00" endTime="2018-08-29T14:10:49.9665510+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="75a2cc67-54df-4aa6-93a5-d8759fb93218">
      <Output>
        <StdOut>Then the scenario will 'pass'
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("pass") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f2e15dbb-19ea-4270-9c47-889dc52eecce" testId="e4a41254-3a68-2383-3875-2b8943b3bc47" testName="DealWithMultipleNamedExampleSectionsWithDuplicateValues_FirstSet_Variant0" computerName="DESKTOP" duration="00:00:00.0006882" startTime="2018-08-29T14:10:49.9786602+02:00" endTime="2018-08-29T14:10:49.9816533+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f2e15dbb-19ea-4270-9c47-889dc52eecce">
      <Output>
        <StdOut>Then the scenario will 'pass'
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("pass") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="da7139f8-75cf-42a7-a463-1bd8fc5b30d4" testId="6c71df5b-b7f6-05bc-a9d9-7a5a418694ed" testName="DealWithMultipleNamedExampleSectionsWithDuplicateValues_FirstSet_Variant1" computerName="DESKTOP" duration="00:00:00.0046860" startTime="2018-08-29T14:10:49.9896311+02:00" endTime="2018-08-29T14:10:49.9976111+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="da7139f8-75cf-42a7-a463-1bd8fc5b30d4">
      <Output>
        <StdOut>Then the scenario will 'fail'
-&gt; error: 
The checked value is different from the expected one.
The checked value:
	[True]
The expected value:
	[False]</StdOut>
        <ErrorInfo>
          <Message>Test method Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.DealWithMultipleNamedExampleSectionsWithDuplicateValues_FirstSet_Variant1 threw exception: 
NFluent.FluentCheckException: 
The checked value is different from the expected one.
The checked value:
	[True]
The expected value:
	[False]</Message>
          <StackTrace>    at NFluent.Helpers.EqualityHelper.IsEqualTo(Object instance, Object expected)
   at NFluent.Extensibility.Checker`2.ExecuteCheck(Action action, String negatedExceptionMessage)
   at AutomationLayer.MarkTestAs.Failing() in C:\Git\pickles\test-harness\AutomationLayer\MarkTestAs.cs:line 15
   at AutomationLayer.ScenarioOutlineSteps.ThenTheScenarioWill(String result) in C:\Git\pickles\test-harness\AutomationLayer\ScenarioOutlineSteps.cs:line 19
   at TechTalk.SpecFlow.Bindings.BindingInvoker.InvokeBinding(IBinding binding, IContextManager contextManager, Object[] arguments, ITestTracer testTracer, TimeSpan&amp; duration)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStepMatch(BindingMatch match, Object[] arguments)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep(StepInstance stepInstance)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.ScenarioCleanup()
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.DealWithMultipleNamedExampleSectionsWithDuplicateValues(String result, String[] exampleTags) in C:\Git\pickles\test-harness\MsTest\ScenarioOutlines.feature:line 129
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.DealWithMultipleNamedExampleSectionsWithDuplicateValues_FirstSet_Variant1()
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="a384ea3d-360f-4b1e-928b-284ab26aa1ff" testId="eac20402-24fc-07bf-8300-6de67af22151" testName="DealWithMultipleNamedExampleSectionsWithDuplicateValues_FirstSet_Variant2" computerName="DESKTOP" duration="00:00:00.0004155" startTime="2018-08-29T14:10:50.0065847+02:00" endTime="2018-08-29T14:10:50.0105851+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a384ea3d-360f-4b1e-928b-284ab26aa1ff">
      <Output>
        <StdOut>Then the scenario will 'pass'
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("pass") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="52924493-be8e-4c23-a11b-2044a8cc9a34" testId="7163846b-97dc-3fe1-9bff-737e01453fc3" testName="DealWithMultipleNamedExampleSectionsWithDuplicateValues_SecondSet_Variant0" computerName="DESKTOP" duration="00:00:00.0024042" startTime="2018-08-29T14:10:50.0195511+02:00" endTime="2018-08-29T14:10:50.0245384+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="52924493-be8e-4c23-a11b-2044a8cc9a34">
      <Output>
        <StdOut>Then the scenario will 'fail'
-&gt; error: 
The checked value is different from the expected one.
The checked value:
	[True]
The expected value:
	[False]</StdOut>
        <ErrorInfo>
          <Message>Test method Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.DealWithMultipleNamedExampleSectionsWithDuplicateValues_SecondSet_Variant0 threw exception: 
NFluent.FluentCheckException: 
The checked value is different from the expected one.
The checked value:
	[True]
The expected value:
	[False]</Message>
          <StackTrace>    at NFluent.Helpers.EqualityHelper.IsEqualTo(Object instance, Object expected)
   at NFluent.Extensibility.Checker`2.ExecuteCheck(Action action, String negatedExceptionMessage)
   at AutomationLayer.MarkTestAs.Failing() in C:\Git\pickles\test-harness\AutomationLayer\MarkTestAs.cs:line 15
   at AutomationLayer.ScenarioOutlineSteps.ThenTheScenarioWill(String result) in C:\Git\pickles\test-harness\AutomationLayer\ScenarioOutlineSteps.cs:line 19
   at TechTalk.SpecFlow.Bindings.BindingInvoker.InvokeBinding(IBinding binding, IContextManager contextManager, Object[] arguments, ITestTracer testTracer, TimeSpan&amp; duration)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStepMatch(BindingMatch match, Object[] arguments)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep(StepInstance stepInstance)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.ScenarioCleanup()
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.DealWithMultipleNamedExampleSectionsWithDuplicateValues(String result, String[] exampleTags) in C:\Git\pickles\test-harness\MsTest\ScenarioOutlines.feature:line 129
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.DealWithMultipleNamedExampleSectionsWithDuplicateValues_SecondSet_Variant0()
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="eae1f9d0-8ffa-48f3-b8e3-b50d70d7d52d" testId="5b9bcab8-4e74-31a9-a78c-dbaaa36e3264" testName="DealWithMultipleNamedExampleSectionsWithDuplicateValues_SecondSet_Variant1" computerName="DESKTOP" duration="00:00:00.0019703" startTime="2018-08-29T14:10:50.0345109+02:00" endTime="2018-08-29T14:10:50.0394978+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Inconclusive" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="eae1f9d0-8ffa-48f3-b8e3-b50d70d7d52d">
      <Output>
        <StdOut>Then the scenario will 'inconclusive'
-&gt; pending: ScenarioOutlineSteps.ThenTheScenarioWill("inconclusive")</StdOut>
        <ErrorInfo>
          <Message>Assert.Inconclusive failed. One or more step definitions are not implemented yet.
  ScenarioOutlineSteps.ThenTheScenarioWill("inconclusive")</Message>
          <StackTrace>   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.ScenarioCleanup()
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.DealWithMultipleNamedExampleSectionsWithDuplicateValues(String result, String[] exampleTags) in C:\Git\pickles\test-harness\MsTest\ScenarioOutlines.feature:line 129
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.DealWithMultipleNamedExampleSectionsWithDuplicateValues_SecondSet_Variant1()
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="240b5ed7-de3a-4cf1-85fe-05a72a9f127e" testId="f5f92d6f-2aff-0d4e-92cc-ebea6c783047" testName="DealWithMultipleNamedExampleSectionsWithDuplicateValues_SecondSet_Variant2" computerName="DESKTOP" duration="00:00:00.0031974" startTime="2018-08-29T14:10:50.0494711+02:00" endTime="2018-08-29T14:10:50.0564527+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="240b5ed7-de3a-4cf1-85fe-05a72a9f127e">
      <Output>
        <StdOut>Then the scenario will 'fail'
-&gt; error: 
The checked value is different from the expected one.
The checked value:
	[True]
The expected value:
	[False]</StdOut>
        <ErrorInfo>
          <Message>Test method Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.DealWithMultipleNamedExampleSectionsWithDuplicateValues_SecondSet_Variant2 threw exception: 
NFluent.FluentCheckException: 
The checked value is different from the expected one.
The checked value:
	[True]
The expected value:
	[False]</Message>
          <StackTrace>    at NFluent.Helpers.EqualityHelper.IsEqualTo(Object instance, Object expected)
   at NFluent.Extensibility.Checker`2.ExecuteCheck(Action action, String negatedExceptionMessage)
   at AutomationLayer.MarkTestAs.Failing() in C:\Git\pickles\test-harness\AutomationLayer\MarkTestAs.cs:line 15
   at AutomationLayer.ScenarioOutlineSteps.ThenTheScenarioWill(String result) in C:\Git\pickles\test-harness\AutomationLayer\ScenarioOutlineSteps.cs:line 19
   at TechTalk.SpecFlow.Bindings.BindingInvoker.InvokeBinding(IBinding binding, IContextManager contextManager, Object[] arguments, ITestTracer testTracer, TimeSpan&amp; duration)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStepMatch(BindingMatch match, Object[] arguments)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep(StepInstance stepInstance)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.ScenarioCleanup()
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.DealWithMultipleNamedExampleSectionsWithDuplicateValues(String result, String[] exampleTags) in C:\Git\pickles\test-harness\MsTest\ScenarioOutlines.feature:line 129
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.DealWithMultipleNamedExampleSectionsWithDuplicateValues_SecondSet_Variant2()
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="1d37000d-0796-47a7-9956-db39b06e621c" testId="89f6c218-0aa5-1429-f042-a75ec9d24b22" testName="DealWithMultipleNamedExampleSectionsWithDuplicateValues_SecondSet_Variant3" computerName="DESKTOP" duration="00:00:00.0004019" startTime="2018-08-29T14:10:50.0644313+02:00" endTime="2018-08-29T14:10:50.0704157+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1d37000d-0796-47a7-9956-db39b06e621c">
      <Output>
        <StdOut>Then the scenario will 'pass'
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("pass") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c21ea2e5-1288-4838-93fa-543a84ce57d3" testId="cbaf1514-900c-d6bc-5a11-01b1824f3093" testName="DealWithMultipleNamedExampleSectionsWithoutDuplicateValues_FirstSet_Fail" computerName="DESKTOP" duration="00:00:00.0029115" startTime="2018-08-29T14:10:50.0843784+02:00" endTime="2018-08-29T14:10:50.0903628+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c21ea2e5-1288-4838-93fa-543a84ce57d3">
      <Output>
        <StdOut>Then the scenario will 'fail'
-&gt; error: 
The checked value is different from the expected one.
The checked value:
	[True]
The expected value:
	[False]</StdOut>
        <ErrorInfo>
          <Message>Test method Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.DealWithMultipleNamedExampleSectionsWithoutDuplicateValues_FirstSet_Fail threw exception: 
NFluent.FluentCheckException: 
The checked value is different from the expected one.
The checked value:
	[True]
The expected value:
	[False]</Message>
          <StackTrace>    at NFluent.Helpers.EqualityHelper.IsEqualTo(Object instance, Object expected)
   at NFluent.Extensibility.Checker`2.ExecuteCheck(Action action, String negatedExceptionMessage)
   at AutomationLayer.MarkTestAs.Failing() in C:\Git\pickles\test-harness\AutomationLayer\MarkTestAs.cs:line 15
   at AutomationLayer.ScenarioOutlineSteps.ThenTheScenarioWill(String result) in C:\Git\pickles\test-harness\AutomationLayer\ScenarioOutlineSteps.cs:line 19
   at TechTalk.SpecFlow.Bindings.BindingInvoker.InvokeBinding(IBinding binding, IContextManager contextManager, Object[] arguments, ITestTracer testTracer, TimeSpan&amp; duration)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStepMatch(BindingMatch match, Object[] arguments)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep(StepInstance stepInstance)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.ScenarioCleanup()
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.DealWithMultipleNamedExampleSectionsWithoutDuplicateValues(String result, String[] exampleTags) in C:\Git\pickles\test-harness\MsTest\ScenarioOutlines.feature:line 117
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.DealWithMultipleNamedExampleSectionsWithoutDuplicateValues_FirstSet_Fail()
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="1028c24b-0c0d-4c0c-9fd0-3c2eabc02085" testId="4e84406f-3151-5b14-7af0-b81b574f9cb2" testName="DealWithMultipleNamedExampleSectionsWithoutDuplicateValues_FirstSet_Pass" computerName="DESKTOP" duration="00:00:00.0003699" startTime="2018-08-29T14:10:50.1003353+02:00" endTime="2018-08-29T14:10:50.1043255+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1028c24b-0c0d-4c0c-9fd0-3c2eabc02085">
      <Output>
        <StdOut>Then the scenario will 'pass'
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("pass") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="e4cd7512-2ecd-49a1-a0d9-fa605f23ab2b" testId="2cf81da0-b83f-8c2c-4333-336bcc3d1fb4" testName="DealWithMultipleNamedExampleSectionsWithoutDuplicateValues_SecondSet_Inconclusive" computerName="DESKTOP" duration="00:00:00.0024209" startTime="2018-08-29T14:10:50.1322500+02:00" endTime="2018-08-29T14:10:50.1382348+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Inconclusive" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e4cd7512-2ecd-49a1-a0d9-fa605f23ab2b">
      <Output>
        <StdOut>Then the scenario will 'inconclusive'
-&gt; pending: ScenarioOutlineSteps.ThenTheScenarioWill("inconclusive")</StdOut>
        <ErrorInfo>
          <Message>Assert.Inconclusive failed. One or more step definitions are not implemented yet.
  ScenarioOutlineSteps.ThenTheScenarioWill("inconclusive")</Message>
          <StackTrace>   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.ScenarioCleanup()
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.DealWithMultipleNamedExampleSectionsWithoutDuplicateValues(String result, String[] exampleTags) in C:\Git\pickles\test-harness\MsTest\ScenarioOutlines.feature:line 117
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.DealWithMultipleNamedExampleSectionsWithoutDuplicateValues_SecondSet_Inconclusive()
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b922bd5d-b364-4884-ac0c-135f545ba10d" testId="2c8f1abb-446c-6683-6327-8ec4ccd46e1a" testName="ThisIsAScenarioOutlineWhereAllScenariosPass_Pass_1" computerName="DESKTOP" duration="00:00:00.0007628" startTime="2018-08-29T14:10:50.1831146+02:00" endTime="2018-08-29T14:10:50.1910929+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b922bd5d-b364-4884-ac0c-135f545ba10d">
      <Output>
        <StdOut>Then the scenario will 'pass_1'
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("pass_1") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="49361ccf-dc28-4b38-98e9-588b5bd3bdf8" testId="9efc5df4-5f77-a670-8622-976418721b8f" testName="ThisIsAScenarioOutlineWhereAllScenariosPass_Pass_2" computerName="DESKTOP" duration="00:00:00.0004096" startTime="2018-08-29T14:10:50.2000695+02:00" endTime="2018-08-29T14:10:50.2070515+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="49361ccf-dc28-4b38-98e9-588b5bd3bdf8">
      <Output>
        <StdOut>Then the scenario will 'pass_2'
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("pass_2") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="5874deb3-2d61-4327-a9d5-ab69b84ddc1b" testId="9bb2410c-d8c6-90b8-75cd-5c93dc903745" testName="ThisIsAScenarioOutlineWhereAllScenariosPass_Pass_3" computerName="DESKTOP" duration="00:00:00.0133341" startTime="2018-08-29T14:10:50.2190191+02:00" endTime="2018-08-29T14:10:50.2509329+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5874deb3-2d61-4327-a9d5-ab69b84ddc1b">
      <Output>
        <StdOut>Then the scenario will 'pass_3'
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("pass_3") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c001e2ce-e975-47af-a2d3-4ec535b3da48" testId="05c22c90-eaaa-d3c2-bd2d-36c2df85528e" testName="ThisIsAScenarioOutlineWhereOneScenarioFails_Fail_1" computerName="DESKTOP" duration="00:00:00.0048294" startTime="2018-08-29T14:10:50.2668898+02:00" endTime="2018-08-29T14:10:50.2788578+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c001e2ce-e975-47af-a2d3-4ec535b3da48">
      <Output>
        <StdOut>Then the scenario will 'fail_1'
-&gt; error: 
The checked value is different from the expected one.
The checked value:
	[True]
The expected value:
	[False]</StdOut>
        <ErrorInfo>
          <Message>Test method Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.ThisIsAScenarioOutlineWhereOneScenarioFails_Fail_1 threw exception: 
NFluent.FluentCheckException: 
The checked value is different from the expected one.
The checked value:
	[True]
The expected value:
	[False]</Message>
          <StackTrace>    at NFluent.Helpers.EqualityHelper.IsEqualTo(Object instance, Object expected)
   at NFluent.Extensibility.Checker`2.ExecuteCheck(Action action, String negatedExceptionMessage)
   at AutomationLayer.MarkTestAs.Failing() in C:\Git\pickles\test-harness\AutomationLayer\MarkTestAs.cs:line 15
   at AutomationLayer.ScenarioOutlineSteps.ThenTheScenarioWill(String result) in C:\Git\pickles\test-harness\AutomationLayer\ScenarioOutlineSteps.cs:line 19
   at TechTalk.SpecFlow.Bindings.BindingInvoker.InvokeBinding(IBinding binding, IContextManager contextManager, Object[] arguments, ITestTracer testTracer, TimeSpan&amp; duration)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStepMatch(BindingMatch match, Object[] arguments)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep(StepInstance stepInstance)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.ScenarioCleanup()
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.ThisIsAScenarioOutlineWhereOneScenarioFails(String result, String[] exampleTags) in C:\Git\pickles\test-harness\MsTest\ScenarioOutlines.feature:line 34
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.ThisIsAScenarioOutlineWhereOneScenarioFails_Fail_1()
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="9bc28dfb-f700-407d-9c16-b7145e317b26" testId="e64af447-d4dc-7221-865a-703128db7b90" testName="ThisIsAScenarioOutlineWhereOneScenarioFails_Pass_1" computerName="DESKTOP" duration="00:00:00.0004433" startTime="2018-08-29T14:10:50.2888315+02:00" endTime="2018-08-29T14:10:50.2918237+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9bc28dfb-f700-407d-9c16-b7145e317b26">
      <Output>
        <StdOut>Then the scenario will 'pass_1'
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("pass_1") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="88e82e4b-5ab7-4426-bf3e-4fe70a4fda01" testId="b04f3200-80ca-d47f-0c01-8a37e5c952e6" testName="ThisIsAScenarioOutlineWhereOneScenarioFails_Pass_2" computerName="DESKTOP" duration="00:00:00.0009369" startTime="2018-08-29T14:10:50.3037913+02:00" endTime="2018-08-29T14:10:50.3107737+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="88e82e4b-5ab7-4426-bf3e-4fe70a4fda01">
      <Output>
        <StdOut>Then the scenario will 'pass_2'
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("pass_2") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="4bba6332-b3d9-40ce-bf94-c1923cd4a90c" testId="8c97c958-0c5d-1594-2cc5-02c96df8fc9b" testName="ThisIsAScenarioOutlineWhereOneScenarioIsInconclusive_Inconclusive_1" computerName="DESKTOP" duration="00:00:00.0029290" startTime="2018-08-29T14:10:50.3237380+02:00" endTime="2018-08-29T14:10:50.3377007+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Inconclusive" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4bba6332-b3d9-40ce-bf94-c1923cd4a90c">
      <Output>
        <StdOut>Then the scenario will 'inconclusive_1'
-&gt; pending: ScenarioOutlineSteps.ThenTheScenarioWill("inconclusive_1")</StdOut>
        <ErrorInfo>
          <Message>Assert.Inconclusive failed. One or more step definitions are not implemented yet.
  ScenarioOutlineSteps.ThenTheScenarioWill("inconclusive_1")</Message>
          <StackTrace>   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.ScenarioCleanup()
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.ThisIsAScenarioOutlineWhereOneScenarioIsInconclusive(String result, String[] exampleTags) in C:\Git\pickles\test-harness\MsTest\ScenarioOutlines.feature:line 21
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.ThisIsAScenarioOutlineWhereOneScenarioIsInconclusive_Inconclusive_1()
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b7c51e4c-ea48-453b-8835-22b1588f72c0" testId="6e54c207-a3b1-f181-06be-066795ac26e1" testName="ThisIsAScenarioOutlineWhereOneScenarioIsInconclusive_Pass_1" computerName="DESKTOP" duration="00:00:00.0006583" startTime="2018-08-29T14:10:50.3626342+02:00" endTime="2018-08-29T14:10:50.3676207+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b7c51e4c-ea48-453b-8835-22b1588f72c0">
      <Output>
        <StdOut>Then the scenario will 'pass_1'
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("pass_1") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f4665bf8-a86f-4ff3-801f-909fcaf8f9c4" testId="8f2bb160-fa82-a566-570e-51eeb5237e95" testName="ThisIsAScenarioOutlineWhereOneScenarioIsInconclusive_Pass_2" computerName="DESKTOP" duration="00:00:00.0006310" startTime="2018-08-29T14:10:50.3825813+02:00" endTime="2018-08-29T14:10:50.3955464+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f4665bf8-a86f-4ff3-801f-909fcaf8f9c4">
      <Output>
        <StdOut>Then the scenario will 'pass_2'
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("pass_2") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="66244aa2-1b69-485b-a8e6-80813ae16f8c" testId="73c03e74-0c0b-5c1d-2193-91dd98f1f95e" testName="ThisIsAScenarioOutlineWithAmpersand_Pass_1" computerName="DESKTOP" duration="00:00:00.0035716" startTime="2018-08-29T14:10:50.4045218+02:00" endTime="2018-08-29T14:10:50.4125009+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="66244aa2-1b69-485b-a8e6-80813ae16f8c">
      <Output>
        <StdOut>Given the calculator has clean memory
-&gt; done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0.0s)
Then the scenario will 'pass_1'
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("pass_1") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="43875087-c3a0-4af4-a390-428a6f8ac228" testId="763d7e52-45c9-3e45-478d-dd6659bc69ba" testName="ThisIsAScenarioOutlineWithGermanUmlautsAouBAOU_Pass_1" computerName="DESKTOP" duration="00:00:00.0010769" startTime="2018-08-29T14:10:50.4294553+02:00" endTime="2018-08-29T14:10:50.4334451+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="43875087-c3a0-4af4-a390-428a6f8ac228">
      <Output>
        <StdOut>Given the calculator has clean memory
-&gt; done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0.0s)
Then the scenario will 'pass_1'
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("pass_1") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d7da7195-00be-4b87-8ada-92edf399920a" testId="f8369e2e-c5ec-dade-ad85-e2c56909c853" testName="ThisIsAScenarioOutlineWithParenthesesHyphenAndComma10_2030_40_Pass_1" computerName="DESKTOP" duration="00:00:00.0006523" startTime="2018-08-29T14:10:50.4424209+02:00" endTime="2018-08-29T14:10:50.4484053+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d7da7195-00be-4b87-8ada-92edf399920a">
      <Output>
        <StdOut>Given the calculator has clean memory
-&gt; done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0.0s)
Then the scenario will 'pass_1'
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("pass_1") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="95867228-8daa-4555-9b09-d8c5146c3ada" testId="5caa1aa9-2d56-0fc8-5599-56bd995599ca" testName="ThisIsAScenarioWithDanishCharactersAEoaAEOA" computerName="DESKTOP" duration="00:00:00.0006395" startTime="2018-08-29T14:10:50.4753322+02:00" endTime="2018-08-29T14:10:50.5002683+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="95867228-8daa-4555-9b09-d8c5146c3ada">
      <Output>
        <StdOut>Given the calculator has clean memory
-&gt; done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0.0s)
Then passing step
-&gt; done: MinimalSteps.ThenPassingStep() (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="584d0a1c-8fda-48fe-8f36-7173bc64cbed" testId="3fe8806f-fabb-1deb-7e27-c59578f16da3" testName="ThisIsAScenarioWithParenthesesHyphenAndComma10_2030_40" computerName="DESKTOP" duration="00:00:00.0012821" startTime="2018-08-29T14:10:50.5351722+02:00" endTime="2018-08-29T14:10:50.5441514+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="584d0a1c-8fda-48fe-8f36-7173bc64cbed">
      <Output>
        <StdOut>Given the calculator has clean memory
-&gt; done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0.0s)
Given I have entered 50 into the calculator
-&gt; done: AdditionSteps.GivenIHaveEnteredIntoTheCalculator(50) (0.0s)
And I have entered 70 into the calculator
-&gt; done: AdditionSteps.GivenIHaveEnteredIntoTheCalculator(70) (0.0s)
When I press add
-&gt; done: AdditionSteps.WhenIPressAdd() (0.0s)
Then the result should be 120 on the screen
-&gt; done: AdditionSteps.ThenTheResultShouldBeOnTheScreen(120) (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="80bb5ba1-3f5a-405d-b92d-31d9076230a7" testId="6a1be91c-570b-7575-7d8f-f960cd83f9ec" testName="ThisIsAScenarioWithSpanishCharactersNaeiou" computerName="DESKTOP" duration="00:00:00.0007978" startTime="2018-08-29T14:10:50.5720729+02:00" endTime="2018-08-29T14:10:50.5840431+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="80bb5ba1-3f5a-405d-b92d-31d9076230a7">
      <Output>
        <StdOut>Given the calculator has clean memory
-&gt; done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0.0s)
Then passing step
-&gt; done: MinimalSteps.ThenPassingStep() (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f6227792-6cce-41f1-85da-f33cea1571d9" testId="b891bd24-e5b1-222b-8d70-96a2ba7b0807" testName="ThisScenarioContainsExamplesWithRegex_SpecialCharacters_Variant0" computerName="DESKTOP" duration="00:00:00.0020369" startTime="2018-08-29T14:10:50.5990020+02:00" endTime="2018-08-29T14:10:50.6039897+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f6227792-6cce-41f1-85da-f33cea1571d9">
      <Output>
        <StdOut>Given the calculator has clean memory
-&gt; done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0.0s)
When I have special characters for regexes in the value, for example a '**'
-&gt; done: ScenarioOutlineSteps.WhenIHaveSpecialCharactersForRegexesInTheValueForExampleARegex("**") (0.0s)
Then the scenario will 'PASS'
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("PASS") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="fd2a3730-0702-48e0-803c-55e557d10709" testId="fb3ec8b2-a410-ecc8-265b-29bfd3772553" testName="ThisScenarioContainsExamplesWithRegex_SpecialCharacters_Variant1" computerName="DESKTOP" duration="00:00:00.0005376" startTime="2018-08-29T14:10:50.6179515+02:00" endTime="2018-08-29T14:10:50.6349060+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="fd2a3730-0702-48e0-803c-55e557d10709">
      <Output>
        <StdOut>Given the calculator has clean memory
-&gt; done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0.0s)
When I have special characters for regexes in the value, for example a '++'
-&gt; done: ScenarioOutlineSteps.WhenIHaveSpecialCharactersForRegexesInTheValueForExampleARegex("++") (0.0s)
Then the scenario will 'PASS'
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("PASS") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b3661575-dd1e-4cf6-961f-5367e95948b1" testId="a3bd6f67-daac-1ebc-5894-1d73dbe8d707" testName="ThisScenarioContainsExamplesWithRegex_SpecialCharacters_Variant2" computerName="DESKTOP" duration="00:00:00.0113058" startTime="2018-08-29T14:10:50.6548527+02:00" endTime="2018-08-29T14:10:50.6718075+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b3661575-dd1e-4cf6-961f-5367e95948b1">
      <Output>
        <StdOut>Given the calculator has clean memory
-&gt; done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0.0s)
When I have special characters for regexes in the value, for example a '.*'
-&gt; done: ScenarioOutlineSteps.WhenIHaveSpecialCharactersForRegexesInTheValueForExampleARegex(".*") (0.0s)
Then the scenario will 'PASS'
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("PASS") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0f856ca7-869a-41fd-8183-e9c504955859" testId="7699da71-b819-eb00-3894-2f0be7eec39c" testName="ThisScenarioContainsExamplesWithRegex_SpecialCharacters_Variant3" computerName="DESKTOP" duration="00:00:00.0004842" startTime="2018-08-29T14:10:50.6837751+02:00" endTime="2018-08-29T14:10:50.6887624+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0f856ca7-869a-41fd-8183-e9c504955859">
      <Output>
        <StdOut>Given the calculator has clean memory
-&gt; done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0.0s)
When I have special characters for regexes in the value, for example a '[]'
-&gt; done: ScenarioOutlineSteps.WhenIHaveSpecialCharactersForRegexesInTheValueForExampleARegex("[]") (0.0s)
Then the scenario will 'PASS'
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("PASS") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="85b2fe15-71b0-4939-9bdd-0c7009ab2326" testId="d253522e-be41-9b3a-247a-ca440d4ac588" testName="ThisScenarioContainsExamplesWithRegex_SpecialCharacters_Variant4" computerName="DESKTOP" duration="00:00:00.0005661" startTime="2018-08-29T14:10:50.7007300+02:00" endTime="2018-08-29T14:10:50.7077115+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="85b2fe15-71b0-4939-9bdd-0c7009ab2326">
      <Output>
        <StdOut>Given the calculator has clean memory
-&gt; done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0.0s)
When I have special characters for regexes in the value, for example a '{}'
-&gt; done: ScenarioOutlineSteps.WhenIHaveSpecialCharactersForRegexesInTheValueForExampleARegex("{}") (0.0s)
Then the scenario will 'PASS'
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("PASS") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="ea6e5b1c-88cc-4209-b9aa-cff67684fe84" testId="cca2404a-911a-a50e-9898-327264f0ea76" testName="ThisScenarioContainsExamplesWithRegex_SpecialCharacters_Variant5" computerName="DESKTOP" duration="00:00:00.0005265" startTime="2018-08-29T14:10:50.7186820+02:00" endTime="2018-08-29T14:10:50.7226717+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ea6e5b1c-88cc-4209-b9aa-cff67684fe84">
      <Output>
        <StdOut>Given the calculator has clean memory
-&gt; done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0.0s)
When I have special characters for regexes in the value, for example a '()'
-&gt; done: ScenarioOutlineSteps.WhenIHaveSpecialCharactersForRegexesInTheValueForExampleARegex("()") (0.0s)
Then the scenario will 'PASS'
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("PASS") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b1fab830-1f7f-4439-b430-876cec5391ff" testId="22ccdb90-02c8-97c1-e2a1-6bec4f044d99" testName="ThisScenarioContainsExamplesWithRegex_SpecialCharacters_Variant6" computerName="DESKTOP" duration="00:00:00.0005218" startTime="2018-08-29T14:10:50.7326447+02:00" endTime="2018-08-29T14:10:50.7376311+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b1fab830-1f7f-4439-b430-876cec5391ff">
      <Output>
        <StdOut>Given the calculator has clean memory
-&gt; done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0.0s)
When I have special characters for regexes in the value, for example a '^.*(?&lt;foo&gt;BAR)\s[^0-9]{3,4}A+$'
-&gt; done: ScenarioOutlineSteps.WhenIHaveSpecialCharactersForRegexesInTheValueForExampleARegex("^.*(?&lt;foo&gt;BAR)\s[...") (0.0s)
Then the scenario will 'PASS'
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("PASS") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
  </Results>
</TestRun>