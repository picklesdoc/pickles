<?xml version="1.0" encoding="UTF-8"?>
<TestRun id="c21ee009-2c8b-416d-9329-b9c4df3ac26b" name="Bas@LENOVOWERK 2017-02-02 21:43:40" runUser="LENOVOWERK\Bas" xmlns="http://microsoft.com/schemas/VisualStudio/TeamTest/2010">
  <TestSettings name="TestSettings" id="3d90c4f8-ccdc-4663-bad3-9f4c55f42318">
    <Description>These are default test settings for a local test run.</Description>
    <Deployment userDeploymentRoot="C:\Users\Bas\Source\Repos\pickles" useDefaultDeploymentRoot="false" enabled="false" runDeploymentRoot="Bas_LENOVOWERK 2017-02-02 21_43_40" />
    <Execution>
      <TestTypeSpecific />
      <AgentRule name="Execution Agents">
      </AgentRule>
    </Execution>
    <Properties />
  </TestSettings>
  <Times creation="2017-02-02T21:43:40.0476177+01:00" queuing="2017-02-02T21:43:40.6347317+01:00" start="2017-02-02T21:43:40.8799259+01:00" finish="2017-02-02T21:43:42.2034759+01:00" />
  <ResultSummary outcome="Failed">
    <Counters total="47" executed="47" passed="30" error="0" failed="8" timeout="0" aborted="0" inconclusive="9" passedButRunAborted="0" notRunnable="0" notExecuted="0" disconnected="0" warning="0" completed="0" inProgress="0" pending="0" />
  </ResultSummary>
  <TestDefinitions>
    <UnitTest name="ThisScenarioContainsExamplesWithRegex_SpecialCharacters_Variant3" storage="c:\users\bas\source\repos\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="7699da71-b819-eb00-3894-2f0be7eec39c">
      <Description>This scenario contains examples with Regex-special characters</Description>
      <Execution id="39a4465d-26ed-45e0-ad5a-91b8da4b0fe7" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenarios With Special Characters</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>Variant 3</Value>
        </Property>
        <Property>
          <Key>Parameter:regex</Key>
          <Value>[]</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Users/Bas/Source/Repos/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.ScenariosWithSpecialCharactersFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="ThisScenarioContainsExamplesWithRegex_SpecialCharacters_Variant3" />
    </UnitTest>
    <UnitTest name="NotAutomatedScenario1" storage="c:\users\bas\source\repos\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="0e090158-43a1-1be8-47c2-13e1b2c9f8c7">
      <Description>Not automated scenario 1</Description>
      <Execution id="4f8ee6a1-3d3b-4b24-9a56-dd37da2c02a4" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Not Automated At All</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Users/Bas/Source/Repos/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.NotAutomatedAtAllFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="NotAutomatedScenario1" />
    </UnitTest>
    <UnitTest name="AddingSeveralNumbers_40" storage="c:\users\bas\source\repos\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="4d0f7327-ed22-9a43-969a-ac2ea8102d66">
      <Description>Adding several numbers</Description>
      <TestCategory>
        <TestCategoryItem TestCategory="tag2" />
      </TestCategory>
      <Execution id="636379ec-8480-4ae3-9532-0e13d0147638" />
      <Properties>
        <Property>
          <Key>Parameter:first number</Key>
          <Value>40</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>40</Value>
        </Property>
        <Property>
          <Key>Parameter:result</Key>
          <Value>180</Value>
        </Property>
        <Property>
          <Key>Parameter:third number</Key>
          <Value>90</Value>
        </Property>
        <Property>
          <Key>Parameter:second number</Key>
          <Value>50</Value>
        </Property>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Addition</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Users/Bas/Source/Repos/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.AdditionFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="AddingSeveralNumbers_40" />
    </UnitTest>
    <UnitTest name="AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet2_Fail_2" storage="c:\users\bas\source\repos\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="40304968-0dee-8e41-4f42-20809899a9d0">
      <Description>And we can go totally bonkers with multiple example sections.</Description>
      <Execution id="0f480644-c25e-441b-a30a-c1e9b9ca2f61" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenario Outlines</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>fail_2</Value>
        </Property>
        <Property>
          <Key>Parameter:result</Key>
          <Value>fail_2</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Users/Bas/Source/Repos/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet2_Fail_2" />
    </UnitTest>
    <UnitTest name="NotAutomatedScenario3" storage="c:\users\bas\source\repos\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="64813bea-d79b-d74b-adb5-1302eaf5641f">
      <Description>Not automated scenario 3</Description>
      <Execution id="379de59b-de9d-4799-b665-f00be26f656a" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Not Automated At All</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Users/Bas/Source/Repos/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.NotAutomatedAtAllFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="NotAutomatedScenario3" />
    </UnitTest>
    <UnitTest name="ThisScenarioContainsExamplesWithRegex_SpecialCharacters_Variant2" storage="c:\users\bas\source\repos\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="a3bd6f67-daac-1ebc-5894-1d73dbe8d707">
      <Description>This scenario contains examples with Regex-special characters</Description>
      <Execution id="71c519c6-928c-4c78-a4f2-5f6650a40625" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenarios With Special Characters</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>Variant 2</Value>
        </Property>
        <Property>
          <Key>Parameter:regex</Key>
          <Value>.*</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Users/Bas/Source/Repos/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.ScenariosWithSpecialCharactersFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="ThisScenarioContainsExamplesWithRegex_SpecialCharacters_Variant2" />
    </UnitTest>
    <UnitTest name="ThisIsAScenarioWithParenthesesHyphenAndComma10_2030_40" storage="c:\users\bas\source\repos\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="3fe8806f-fabb-1deb-7e27-c59578f16da3">
      <Description>This is a scenario with parentheses, hyphen and comma (10-20, 30-40)</Description>
      <Execution id="45704043-909e-4213-9939-73003e03a08d" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenarios With Special Characters</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Users/Bas/Source/Repos/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.ScenariosWithSpecialCharactersFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="ThisIsAScenarioWithParenthesesHyphenAndComma10_2030_40" />
    </UnitTest>
    <UnitTest name="ThisScenarioContainsExamplesWithRegex_SpecialCharacters_Variant1" storage="c:\users\bas\source\repos\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="fb3ec8b2-a410-ecc8-265b-29bfd3772553">
      <Description>This scenario contains examples with Regex-special characters</Description>
      <Execution id="3b5efa31-0ffb-48d2-9846-b239b87188d1" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenarios With Special Characters</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>Variant 1</Value>
        </Property>
        <Property>
          <Key>Parameter:regex</Key>
          <Value>++</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Users/Bas/Source/Repos/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.ScenariosWithSpecialCharactersFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="ThisScenarioContainsExamplesWithRegex_SpecialCharacters_Variant1" />
    </UnitTest>
    <UnitTest name="AddTwoNumbers" storage="c:\users\bas\source\repos\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="ca63316a-39e5-9545-3bca-f1839c7b4664">
      <Description>Add two numbers</Description>
      <Execution id="4ed2d641-2d8c-4de9-a2a9-91a159a77383" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Failing Background</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Users/Bas/Source/Repos/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.FailingBackgroundFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="AddTwoNumbers" />
    </UnitTest>
    <UnitTest name="FailingFeatureInconclusiveScenario" storage="c:\users\bas\source\repos\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="7e6c75c9-5365-7582-f701-20d37d3ff511">
      <Description>Failing Feature Inconclusive Scenario</Description>
      <Execution id="7b3bf790-7524-4675-bd79-8e4b87441beb" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Failing</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Users/Bas/Source/Repos/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.MinimalFeatures.FailingFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="FailingFeatureInconclusiveScenario" />
    </UnitTest>
    <UnitTest name="ThisIsAScenarioOutlineWithParenthesesHyphenAndComma10_2030_40_Pass_1" storage="c:\users\bas\source\repos\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="f8369e2e-c5ec-dade-ad85-e2c56909c853">
      <Description>This is a scenario outline with parentheses, hyphen and comma (10-20, 30-40)</Description>
      <Execution id="92723242-e59b-4426-af79-f7bcffaf140d" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenarios With Special Characters</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>pass_1</Value>
        </Property>
        <Property>
          <Key>Parameter:result</Key>
          <Value>pass_1</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Users/Bas/Source/Repos/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.ScenariosWithSpecialCharactersFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="ThisIsAScenarioOutlineWithParenthesesHyphenAndComma10_2030_40_Pass_1" />
    </UnitTest>
    <UnitTest name="InconclusiveFeatureInconclusiveScenario" storage="c:\users\bas\source\repos\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="add44896-9236-510f-750d-eb49b89a7a65">
      <Description>Inconclusive Feature Inconclusive Scenario</Description>
      <Execution id="38c2b714-9773-4601-b41d-69770f8e8819" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Inconclusive</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Users/Bas/Source/Repos/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.MinimalFeatures.InconclusiveFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="InconclusiveFeatureInconclusiveScenario" />
    </UnitTest>
    <UnitTest name="FailingFeaturePassingScenario" storage="c:\users\bas\source\repos\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="fa1e54c9-cdb0-8bb1-6764-9179c3b61825">
      <Description>Failing Feature Passing Scenario</Description>
      <Execution id="837c84ee-e678-4a77-8021-6bc1221395db" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Failing</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Users/Bas/Source/Repos/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.MinimalFeatures.FailingFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="FailingFeaturePassingScenario" />
    </UnitTest>
    <UnitTest name="DealCorrectlyWithBackslashesInTheExamples_CTemp" storage="c:\users\bas\source\repos\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="72d470fa-c19a-1302-1fcf-eb104ea36048">
      <Description>Deal correctly with backslashes in the examples</Description>
      <Execution id="8bb11ce6-7794-4998-b148-562f39c0f2f1" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenario Outlines</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>c:\Temp\</Value>
        </Property>
        <Property>
          <Key>Parameter:file path</Key>
          <Value>c:\Temp\</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Users/Bas/Source/Repos/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="DealCorrectlyWithBackslashesInTheExamples_CTemp" />
    </UnitTest>
    <UnitTest name="ThisIsAScenarioOutlineWhereOneScenarioFails_Pass_2" storage="c:\users\bas\source\repos\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="b04f3200-80ca-d47f-0c01-8a37e5c952e6">
      <Description>This is a scenario outline where one scenario fails</Description>
      <Execution id="521ca88d-475f-41f5-93f1-203791eea1df" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenario Outlines</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>pass_2</Value>
        </Property>
        <Property>
          <Key>Parameter:result</Key>
          <Value>pass_2</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Users/Bas/Source/Repos/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="ThisIsAScenarioOutlineWhereOneScenarioFails_Pass_2" />
    </UnitTest>
    <UnitTest name="ThisIsAScenarioOutlineWithGermanUmlautsAouBAOU_Pass_1" storage="c:\users\bas\source\repos\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="763d7e52-45c9-3e45-478d-dd6659bc69ba">
      <Description>This is a scenario outline with german umlauts äöüß ÄÖÜ</Description>
      <Execution id="723a3a61-5240-4228-8f03-2c258bab3d49" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenarios With Special Characters</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>pass_1</Value>
        </Property>
        <Property>
          <Key>Parameter:result</Key>
          <Value>pass_1</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Users/Bas/Source/Repos/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.ScenariosWithSpecialCharactersFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="ThisIsAScenarioOutlineWithGermanUmlautsAouBAOU_Pass_1" />
    </UnitTest>
    <UnitTest name="AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet2_Fail_1" storage="c:\users\bas\source\repos\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="78a6b3a3-679e-ee71-7ff5-c9338e3be6c2">
      <Description>And we can go totally bonkers with multiple example sections.</Description>
      <Execution id="4a46c15b-d51c-4090-942a-628cdadc844f" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenario Outlines</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>fail_1</Value>
        </Property>
        <Property>
          <Key>Parameter:result</Key>
          <Value>fail_1</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Users/Bas/Source/Repos/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet2_Fail_1" />
    </UnitTest>
    <UnitTest name="ThisScenarioContainsExamplesWithRegex_SpecialCharacters_Variant6" storage="c:\users\bas\source\repos\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="22ccdb90-02c8-97c1-e2a1-6bec4f044d99">
      <Description>This scenario contains examples with Regex-special characters</Description>
      <Execution id="d8d0c0d2-27cb-4881-a391-7ca4164855d9" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenarios With Special Characters</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>Variant 6</Value>
        </Property>
        <Property>
          <Key>Parameter:regex</Key>
          <Value>^.*(?&lt;foo&gt;BAR)\s[^0-9]{3,4}A+$</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Users/Bas/Source/Repos/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.ScenariosWithSpecialCharactersFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="ThisScenarioContainsExamplesWithRegex_SpecialCharacters_Variant6" />
    </UnitTest>
    <UnitTest name="ThisScenarioContainsExamplesWithRegex_SpecialCharacters_Variant5" storage="c:\users\bas\source\repos\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="cca2404a-911a-a50e-9898-327264f0ea76">
      <Description>This scenario contains examples with Regex-special characters</Description>
      <Execution id="b4fcf215-b3b4-4fad-bc4b-fab6c66eb579" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenarios With Special Characters</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>Variant 5</Value>
        </Property>
        <Property>
          <Key>Parameter:regex</Key>
          <Value>()</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Users/Bas/Source/Repos/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.ScenariosWithSpecialCharactersFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="ThisScenarioContainsExamplesWithRegex_SpecialCharacters_Variant5" />
    </UnitTest>
    <UnitTest name="AddingSeveralNumbers_60" storage="c:\users\bas\source\repos\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="f4b45c2f-fc98-d23c-6179-62d5b5a59825">
      <Description>Adding several numbers</Description>
      <TestCategory>
        <TestCategoryItem TestCategory="tag2" />
      </TestCategory>
      <Execution id="71b07acc-0cf4-46cf-8d19-4d8ffa86d961" />
      <Properties>
        <Property>
          <Key>Parameter:first number</Key>
          <Value>60</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>60</Value>
        </Property>
        <Property>
          <Key>Parameter:result</Key>
          <Value>260</Value>
        </Property>
        <Property>
          <Key>Parameter:third number</Key>
          <Value>130</Value>
        </Property>
        <Property>
          <Key>Parameter:second number</Key>
          <Value>70</Value>
        </Property>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Addition</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Users/Bas/Source/Repos/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.AdditionFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="AddingSeveralNumbers_60" />
    </UnitTest>
    <UnitTest name="AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet0_Pass_2" storage="c:\users\bas\source\repos\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="ee74d71f-f824-19d9-866e-a408a95ffa99">
      <Description>And we can go totally bonkers with multiple example sections.</Description>
      <Execution id="08cf7da8-ed5e-4929-9b59-f4dc84297d02" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenario Outlines</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>pass_2</Value>
        </Property>
        <Property>
          <Key>Parameter:result</Key>
          <Value>pass_2</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Users/Bas/Source/Repos/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet0_Pass_2" />
    </UnitTest>
    <UnitTest name="FailingFeatureFailingScenario" storage="c:\users\bas\source\repos\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="18582dd5-09c7-ce67-9cb7-8e15a9cdffd0">
      <Description>Failing Feature Failing Scenario</Description>
      <Execution id="7d4dde75-2912-4580-bcac-b905668c4ad3" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Failing</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Users/Bas/Source/Repos/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.MinimalFeatures.FailingFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="FailingFeatureFailingScenario" />
    </UnitTest>
    <UnitTest name="DealCorrectlyWithParenthesisInTheExamples_ThisIsADescriptionAndMore" storage="c:\users\bas\source\repos\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="d09c033d-0065-cbeb-bd7c-ee8b6460688f">
      <Description>Deal correctly with parenthesis in the examples</Description>
      <Execution id="80bed3bb-cf6c-4498-ad65-fc058726aea2" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenario Outlines</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>This is a description (and more)</Value>
        </Property>
        <Property>
          <Key>Parameter:overly descriptive field</Key>
          <Value>This is a description (and more)</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Users/Bas/Source/Repos/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="DealCorrectlyWithParenthesisInTheExamples_ThisIsADescriptionAndMore" />
    </UnitTest>
    <UnitTest name="ThisIsAScenarioOutlineWhereOneScenarioIsInconclusive_Pass_1" storage="c:\users\bas\source\repos\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="6e54c207-a3b1-f181-06be-066795ac26e1">
      <Description>This is a scenario outline where one scenario is inconclusive</Description>
      <Execution id="31e76ec9-aeed-44cf-aa4f-618b0fe6d48b" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenario Outlines</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>pass_1</Value>
        </Property>
        <Property>
          <Key>Parameter:result</Key>
          <Value>pass_1</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Users/Bas/Source/Repos/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="ThisIsAScenarioOutlineWhereOneScenarioIsInconclusive_Pass_1" />
    </UnitTest>
    <UnitTest name="ThisIsAScenarioOutlineWhereAllScenariosPass_Pass_2" storage="c:\users\bas\source\repos\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="9efc5df4-5f77-a670-8622-976418721b8f">
      <Description>This is a scenario outline where all scenarios pass</Description>
      <Execution id="90852d30-e5ef-4b9e-9340-f27b827f8c51" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenario Outlines</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>pass_2</Value>
        </Property>
        <Property>
          <Key>Parameter:result</Key>
          <Value>pass_2</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Users/Bas/Source/Repos/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="ThisIsAScenarioOutlineWhereAllScenariosPass_Pass_2" />
    </UnitTest>
    <UnitTest name="InconclusiveFeaturePassingScenario" storage="c:\users\bas\source\repos\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="41cb0c4f-1c07-4937-29e8-dcc987caf94e">
      <Description>Inconclusive Feature Passing Scenario</Description>
      <Execution id="45745e7e-83c4-44da-85c8-bd4717d02da5" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Inconclusive</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Users/Bas/Source/Repos/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.MinimalFeatures.InconclusiveFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="InconclusiveFeaturePassingScenario" />
    </UnitTest>
    <UnitTest name="ThisIsAScenarioOutlineWhereOneScenarioIsInconclusive_Inconclusive_1" storage="c:\users\bas\source\repos\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="8c97c958-0c5d-1594-2cc5-02c96df8fc9b">
      <Description>This is a scenario outline where one scenario is inconclusive</Description>
      <Execution id="d015761e-47dd-4fe8-8c95-152dd4cbe2e3" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenario Outlines</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>inconclusive_1</Value>
        </Property>
        <Property>
          <Key>Parameter:result</Key>
          <Value>inconclusive_1</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Users/Bas/Source/Repos/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="ThisIsAScenarioOutlineWhereOneScenarioIsInconclusive_Inconclusive_1" />
    </UnitTest>
    <UnitTest name="TestMethod" storage="c:\users\bas\source\repos\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="aa71fe8a-e5aa-f23d-c632-cfb3c587ca21">
      <Execution id="9163e985-bacc-4d1f-8cbb-f34759532824" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Addition</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Users/Bas/Source/Repos/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.OrdinaryUnitTest, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="TestMethod" />
    </UnitTest>
    <UnitTest name="ThisIsAScenarioOutlineWithAmpersand_Pass_1" storage="c:\users\bas\source\repos\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="73c03e74-0c0b-5c1d-2193-91dd98f1f95e">
      <Description>This is a scenario outline with ampersand &amp;</Description>
      <Execution id="02218523-4b0d-47d7-b7dd-55d6db0e9daa" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenarios With Special Characters</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>pass_1</Value>
        </Property>
        <Property>
          <Key>Parameter:result</Key>
          <Value>pass_1</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Users/Bas/Source/Repos/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.ScenariosWithSpecialCharactersFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="ThisIsAScenarioOutlineWithAmpersand_Pass_1" />
    </UnitTest>
    <UnitTest name="AddTwoNumbers" storage="c:\users\bas\source\repos\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="6b8581c3-611e-6116-4232-a31382677735">
      <Description>Add two numbers</Description>
      <TestCategory>
        <TestCategoryItem TestCategory="tag1" />
      </TestCategory>
      <Execution id="2a193c2a-d0a2-4bfe-b50e-fc3253b622e3" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Addition</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Users/Bas/Source/Repos/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.AdditionFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="AddTwoNumbers" />
    </UnitTest>
    <UnitTest name="ThisIsAScenarioOutlineWhereOneScenarioIsInconclusive_Pass_2" storage="c:\users\bas\source\repos\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="8f2bb160-fa82-a566-570e-51eeb5237e95">
      <Description>This is a scenario outline where one scenario is inconclusive</Description>
      <Execution id="3d378506-8c2e-4d77-812b-1c9299d7a26b" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenario Outlines</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>pass_2</Value>
        </Property>
        <Property>
          <Key>Parameter:result</Key>
          <Value>pass_2</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Users/Bas/Source/Repos/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="ThisIsAScenarioOutlineWhereOneScenarioIsInconclusive_Pass_2" />
    </UnitTest>
    <UnitTest name="ThisIsAScenarioOutlineWhereOneScenarioFails_Fail_1" storage="c:\users\bas\source\repos\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="05c22c90-eaaa-d3c2-bd2d-36c2df85528e">
      <Description>This is a scenario outline where one scenario fails</Description>
      <Execution id="5fa55760-e921-40f0-8246-dbbd3838a88a" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenario Outlines</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>fail_1</Value>
        </Property>
        <Property>
          <Key>Parameter:result</Key>
          <Value>fail_1</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Users/Bas/Source/Repos/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="ThisIsAScenarioOutlineWhereOneScenarioFails_Fail_1" />
    </UnitTest>
    <UnitTest name="AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet1_Inconclusive_2" storage="c:\users\bas\source\repos\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="4d5f7893-139c-db00-8823-de561780758d">
      <Description>And we can go totally bonkers with multiple example sections.</Description>
      <Execution id="1fe3f0a7-f7a6-466c-93eb-8c68289fbdb8" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenario Outlines</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>inconclusive_2</Value>
        </Property>
        <Property>
          <Key>Parameter:result</Key>
          <Value>inconclusive_2</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Users/Bas/Source/Repos/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet1_Inconclusive_2" />
    </UnitTest>
    <UnitTest name="AddingSeveralNumbers_60" storage="c:\users\bas\source\repos\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="17bb28b8-a770-72be-af08-5a4b0847e4ea">
      <Description>Adding several numbers</Description>
      <Execution id="ff20609f-60df-49eb-a108-83c60f2c97b5" />
      <Properties>
        <Property>
          <Key>Parameter:first number</Key>
          <Value>60</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>60</Value>
        </Property>
        <Property>
          <Key>Parameter:result</Key>
          <Value>260</Value>
        </Property>
        <Property>
          <Key>Parameter:third number</Key>
          <Value>130</Value>
        </Property>
        <Property>
          <Key>Parameter:second number</Key>
          <Value>70</Value>
        </Property>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Failing Background</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Users/Bas/Source/Repos/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.FailingBackgroundFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="AddingSeveralNumbers_60" />
    </UnitTest>
    <UnitTest name="NotAutomatedScenario2" storage="c:\users\bas\source\repos\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="067e1c92-2860-531b-28dc-c2863e91b7f5">
      <Description>Not automated scenario 2</Description>
      <Execution id="60d71832-95b3-4c8b-b905-c0b7f668444d" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Not Automated At All</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Users/Bas/Source/Repos/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.NotAutomatedAtAllFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="NotAutomatedScenario2" />
    </UnitTest>
    <UnitTest name="ThisIsAScenarioOutlineWhereAllScenariosPass_Pass_1" storage="c:\users\bas\source\repos\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="2c8f1abb-446c-6683-6327-8ec4ccd46e1a">
      <Description>This is a scenario outline where all scenarios pass</Description>
      <Execution id="655e07dd-9759-4675-abe3-e97974342beb" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenario Outlines</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>pass_1</Value>
        </Property>
        <Property>
          <Key>Parameter:result</Key>
          <Value>pass_1</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Users/Bas/Source/Repos/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="ThisIsAScenarioOutlineWhereAllScenariosPass_Pass_1" />
    </UnitTest>
    <UnitTest name="DealCorrectlyWithOverlongExampleValues_PleaseEnterAValidTwoLetterCountryCodeE_G_DE" storage="c:\users\bas\source\repos\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="ce4a9bf6-5fc5-0a40-2cbe-242a59cb1296">
      <Description>Deal correctly with overlong example values</Description>
      <Execution id="85ed41c3-fdd6-4bb1-a950-75aaf50015e6" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenario Outlines</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>Please enter a valid two letter country code (e.g. DE)!</Value>
        </Property>
        <Property>
          <Key>Parameter:value1</Key>
          <Value>Please enter a valid two letter country code (e.g. DE)!</Value>
        </Property>
        <Property>
          <Key>Parameter:value2</Key>
          <Value>This is just a very very very veery long error message!</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Users/Bas/Source/Repos/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="DealCorrectlyWithOverlongExampleValues_PleaseEnterAValidTwoLetterCountryCodeE_G_DE" />
    </UnitTest>
    <UnitTest name="AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet0_Pass_1" storage="c:\users\bas\source\repos\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="78aeddd0-4ae5-6103-b7dd-e62b71148721">
      <Description>And we can go totally bonkers with multiple example sections.</Description>
      <Execution id="487e6d0f-ed7b-47a8-ad09-e79b1539044c" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenario Outlines</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>pass_1</Value>
        </Property>
        <Property>
          <Key>Parameter:result</Key>
          <Value>pass_1</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Users/Bas/Source/Repos/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet0_Pass_1" />
    </UnitTest>
    <UnitTest name="PassingFeaturePassingScenario" storage="c:\users\bas\source\repos\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="3af599bd-a8de-95a2-1ecc-194c7f8aceeb">
      <Description>Passing Feature Passing Scenario</Description>
      <Execution id="b69ad1e7-ff02-4ecf-a51e-89147be57c29" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Passing</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Users/Bas/Source/Repos/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.MinimalFeatures.PassingFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="PassingFeaturePassingScenario" />
    </UnitTest>
    <UnitTest name="ThisScenarioContainsExamplesWithRegex_SpecialCharacters_Variant0" storage="c:\users\bas\source\repos\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="b891bd24-e5b1-222b-8d70-96a2ba7b0807">
      <Description>This scenario contains examples with Regex-special characters</Description>
      <Execution id="c00eb885-753d-4d0a-a99e-dee30d523362" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenarios With Special Characters</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>Variant 0</Value>
        </Property>
        <Property>
          <Key>Parameter:regex</Key>
          <Value>**</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Users/Bas/Source/Repos/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.ScenariosWithSpecialCharactersFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="ThisScenarioContainsExamplesWithRegex_SpecialCharacters_Variant0" />
    </UnitTest>
    <UnitTest name="ThisIsAScenarioOutlineWhereAllScenariosPass_Pass_3" storage="c:\users\bas\source\repos\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="9bb2410c-d8c6-90b8-75cd-5c93dc903745">
      <Description>This is a scenario outline where all scenarios pass</Description>
      <Execution id="6f75d59f-71d7-4bb1-a312-de629dcc0f35" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenario Outlines</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>pass_3</Value>
        </Property>
        <Property>
          <Key>Parameter:result</Key>
          <Value>pass_3</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Users/Bas/Source/Repos/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="ThisIsAScenarioOutlineWhereAllScenariosPass_Pass_3" />
    </UnitTest>
    <UnitTest name="ThisIsAScenarioOutlineWhereOneScenarioFails_Pass_1" storage="c:\users\bas\source\repos\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="e64af447-d4dc-7221-865a-703128db7b90">
      <Description>This is a scenario outline where one scenario fails</Description>
      <Execution id="a41914cf-7ed9-4737-9515-85d23e57e158" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenario Outlines</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>pass_1</Value>
        </Property>
        <Property>
          <Key>Parameter:result</Key>
          <Value>pass_1</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Users/Bas/Source/Repos/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="ThisIsAScenarioOutlineWhereOneScenarioFails_Pass_1" />
    </UnitTest>
    <UnitTest name="ThisScenarioContainsExamplesWithRegex_SpecialCharacters_Variant4" storage="c:\users\bas\source\repos\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="d253522e-be41-9b3a-247a-ca440d4ac588">
      <Description>This scenario contains examples with Regex-special characters</Description>
      <Execution id="a2216e3d-4a60-4f17-9398-5cc5767d919f" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenarios With Special Characters</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>Variant 4</Value>
        </Property>
        <Property>
          <Key>Parameter:regex</Key>
          <Value>{}</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Users/Bas/Source/Repos/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.ScenariosWithSpecialCharactersFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="ThisScenarioContainsExamplesWithRegex_SpecialCharacters_Variant4" />
    </UnitTest>
    <UnitTest name="AddingSeveralNumbers_40" storage="c:\users\bas\source\repos\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="b4815779-aba4-cf1b-8df3-4a745af70720">
      <Description>Adding several numbers</Description>
      <Execution id="e3224b22-ad2f-4d31-9e09-784b2c9fec09" />
      <Properties>
        <Property>
          <Key>Parameter:first number</Key>
          <Value>40</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>40</Value>
        </Property>
        <Property>
          <Key>Parameter:result</Key>
          <Value>180</Value>
        </Property>
        <Property>
          <Key>Parameter:third number</Key>
          <Value>90</Value>
        </Property>
        <Property>
          <Key>Parameter:second number</Key>
          <Value>50</Value>
        </Property>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Failing Background</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Users/Bas/Source/Repos/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.FailingBackgroundFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="AddingSeveralNumbers_40" />
    </UnitTest>
    <UnitTest name="FailToAddTwoNumbers" storage="c:\users\bas\source\repos\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="b13a186e-33df-348e-f9e2-a18b445d0d6e">
      <Description>Fail to add two numbers</Description>
      <TestCategory>
        <TestCategoryItem TestCategory="tag1" />
      </TestCategory>
      <Execution id="d30a1fa3-a584-4272-bf66-ad0c5c521842" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Addition</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Users/Bas/Source/Repos/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.AdditionFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="FailToAddTwoNumbers" />
    </UnitTest>
    <UnitTest name="NotAutomatedAddingTwoNumbers" storage="c:\users\bas\source\repos\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="2124dd33-7aaa-d4fb-c72f-98ad434251c0">
      <Description>Not automated adding two numbers</Description>
      <Execution id="1a5af968-f14e-4056-9af5-48062a955305" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Addition</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Users/Bas/Source/Repos/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.AdditionFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="NotAutomatedAddingTwoNumbers" />
    </UnitTest>
    <UnitTest name="AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet1_Inconclusive_1" storage="c:\users\bas\source\repos\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="e30ef794-1ea7-a76a-356b-1668bca94630">
      <Description>And we can go totally bonkers with multiple example sections.</Description>
      <Execution id="69f3c322-1c37-49d2-a381-0402c332eadb" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenario Outlines</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>inconclusive_1</Value>
        </Property>
        <Property>
          <Key>Parameter:result</Key>
          <Value>inconclusive_1</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Users/Bas/Source/Repos/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet1_Inconclusive_1" />
    </UnitTest>
  </TestDefinitions>
  <TestLists>
    <TestList name="Results Not in a List" id="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestList name="All Loaded Results" id="19431567-8539-422a-85d7-44ee4e166bda" />
  </TestLists>
  <TestEntries>
    <TestEntry testId="4d0f7327-ed22-9a43-969a-ac2ea8102d66" executionId="636379ec-8480-4ae3-9532-0e13d0147638" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f4b45c2f-fc98-d23c-6179-62d5b5a59825" executionId="71b07acc-0cf4-46cf-8d19-4d8ffa86d961" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6b8581c3-611e-6116-4232-a31382677735" executionId="2a193c2a-d0a2-4bfe-b50e-fc3253b622e3" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b13a186e-33df-348e-f9e2-a18b445d0d6e" executionId="d30a1fa3-a584-4272-bf66-ad0c5c521842" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2124dd33-7aaa-d4fb-c72f-98ad434251c0" executionId="1a5af968-f14e-4056-9af5-48062a955305" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b4815779-aba4-cf1b-8df3-4a745af70720" executionId="e3224b22-ad2f-4d31-9e09-784b2c9fec09" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="17bb28b8-a770-72be-af08-5a4b0847e4ea" executionId="ff20609f-60df-49eb-a108-83c60f2c97b5" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ca63316a-39e5-9545-3bca-f1839c7b4664" executionId="4ed2d641-2d8c-4de9-a2a9-91a159a77383" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="18582dd5-09c7-ce67-9cb7-8e15a9cdffd0" executionId="7d4dde75-2912-4580-bcac-b905668c4ad3" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7e6c75c9-5365-7582-f701-20d37d3ff511" executionId="7b3bf790-7524-4675-bd79-8e4b87441beb" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="fa1e54c9-cdb0-8bb1-6764-9179c3b61825" executionId="837c84ee-e678-4a77-8021-6bc1221395db" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="add44896-9236-510f-750d-eb49b89a7a65" executionId="38c2b714-9773-4601-b41d-69770f8e8819" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="41cb0c4f-1c07-4937-29e8-dcc987caf94e" executionId="45745e7e-83c4-44da-85c8-bd4717d02da5" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3af599bd-a8de-95a2-1ecc-194c7f8aceeb" executionId="b69ad1e7-ff02-4ecf-a51e-89147be57c29" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0e090158-43a1-1be8-47c2-13e1b2c9f8c7" executionId="4f8ee6a1-3d3b-4b24-9a56-dd37da2c02a4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="067e1c92-2860-531b-28dc-c2863e91b7f5" executionId="60d71832-95b3-4c8b-b905-c0b7f668444d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="64813bea-d79b-d74b-adb5-1302eaf5641f" executionId="379de59b-de9d-4799-b665-f00be26f656a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="aa71fe8a-e5aa-f23d-c632-cfb3c587ca21" executionId="9163e985-bacc-4d1f-8cbb-f34759532824" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="78aeddd0-4ae5-6103-b7dd-e62b71148721" executionId="487e6d0f-ed7b-47a8-ad09-e79b1539044c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ee74d71f-f824-19d9-866e-a408a95ffa99" executionId="08cf7da8-ed5e-4929-9b59-f4dc84297d02" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e30ef794-1ea7-a76a-356b-1668bca94630" executionId="69f3c322-1c37-49d2-a381-0402c332eadb" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4d5f7893-139c-db00-8823-de561780758d" executionId="1fe3f0a7-f7a6-466c-93eb-8c68289fbdb8" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="78a6b3a3-679e-ee71-7ff5-c9338e3be6c2" executionId="4a46c15b-d51c-4090-942a-628cdadc844f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="40304968-0dee-8e41-4f42-20809899a9d0" executionId="0f480644-c25e-441b-a30a-c1e9b9ca2f61" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="72d470fa-c19a-1302-1fcf-eb104ea36048" executionId="8bb11ce6-7794-4998-b148-562f39c0f2f1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ce4a9bf6-5fc5-0a40-2cbe-242a59cb1296" executionId="85ed41c3-fdd6-4bb1-a950-75aaf50015e6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d09c033d-0065-cbeb-bd7c-ee8b6460688f" executionId="80bed3bb-cf6c-4498-ad65-fc058726aea2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2c8f1abb-446c-6683-6327-8ec4ccd46e1a" executionId="655e07dd-9759-4675-abe3-e97974342beb" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9efc5df4-5f77-a670-8622-976418721b8f" executionId="90852d30-e5ef-4b9e-9340-f27b827f8c51" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9bb2410c-d8c6-90b8-75cd-5c93dc903745" executionId="6f75d59f-71d7-4bb1-a312-de629dcc0f35" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="05c22c90-eaaa-d3c2-bd2d-36c2df85528e" executionId="5fa55760-e921-40f0-8246-dbbd3838a88a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e64af447-d4dc-7221-865a-703128db7b90" executionId="a41914cf-7ed9-4737-9515-85d23e57e158" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b04f3200-80ca-d47f-0c01-8a37e5c952e6" executionId="521ca88d-475f-41f5-93f1-203791eea1df" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8c97c958-0c5d-1594-2cc5-02c96df8fc9b" executionId="d015761e-47dd-4fe8-8c95-152dd4cbe2e3" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6e54c207-a3b1-f181-06be-066795ac26e1" executionId="31e76ec9-aeed-44cf-aa4f-618b0fe6d48b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8f2bb160-fa82-a566-570e-51eeb5237e95" executionId="3d378506-8c2e-4d77-812b-1c9299d7a26b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="73c03e74-0c0b-5c1d-2193-91dd98f1f95e" executionId="02218523-4b0d-47d7-b7dd-55d6db0e9daa" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="763d7e52-45c9-3e45-478d-dd6659bc69ba" executionId="723a3a61-5240-4228-8f03-2c258bab3d49" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f8369e2e-c5ec-dade-ad85-e2c56909c853" executionId="92723242-e59b-4426-af79-f7bcffaf140d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3fe8806f-fabb-1deb-7e27-c59578f16da3" executionId="45704043-909e-4213-9939-73003e03a08d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b891bd24-e5b1-222b-8d70-96a2ba7b0807" executionId="c00eb885-753d-4d0a-a99e-dee30d523362" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="fb3ec8b2-a410-ecc8-265b-29bfd3772553" executionId="3b5efa31-0ffb-48d2-9846-b239b87188d1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a3bd6f67-daac-1ebc-5894-1d73dbe8d707" executionId="71c519c6-928c-4c78-a4f2-5f6650a40625" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7699da71-b819-eb00-3894-2f0be7eec39c" executionId="39a4465d-26ed-45e0-ad5a-91b8da4b0fe7" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d253522e-be41-9b3a-247a-ca440d4ac588" executionId="a2216e3d-4a60-4f17-9398-5cc5767d919f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="cca2404a-911a-a50e-9898-327264f0ea76" executionId="b4fcf215-b3b4-4fad-bc4b-fab6c66eb579" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="22ccdb90-02c8-97c1-e2a1-6bec4f044d99" executionId="d8d0c0d2-27cb-4881-a391-7ca4164855d9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
  </TestEntries>
  <Results>
    <UnitTestResult executionId="636379ec-8480-4ae3-9532-0e13d0147638" testId="4d0f7327-ed22-9a43-969a-ac2ea8102d66" testName="AddingSeveralNumbers_40" computerName="LENOVOWERK" duration="00:00:00.0929641" startTime="2017-02-02T21:43:40.9639923+01:00" endTime="2017-02-02T21:43:41.5722379+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="636379ec-8480-4ae3-9532-0e13d0147638">
      <Output>
        <StdOut>Given the calculator has clean memory
-&gt; done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0.0s)
Given I have entered 40 into the calculator
-&gt; done: AdditionSteps.GivenIHaveEnteredIntoTheCalculator(40) (0.0s)
And I have entered 50 into the calculator
-&gt; done: AdditionSteps.GivenIHaveEnteredIntoTheCalculator(50) (0.0s)
And I have entered 90 into the calculator
-&gt; done: AdditionSteps.GivenIHaveEnteredIntoTheCalculator(90) (0.0s)
When I press add
-&gt; done: AdditionSteps.WhenIPressAdd() (0.0s)
Then the result should be 180 on the screen
-&gt; done: AdditionSteps.ThenTheResultShouldBeOnTheScreen(180) (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="71b07acc-0cf4-46cf-8d19-4d8ffa86d961" testId="f4b45c2f-fc98-d23c-6179-62d5b5a59825" testName="AddingSeveralNumbers_60" computerName="LENOVOWERK" duration="00:00:00.0036739" startTime="2017-02-02T21:43:41.5782422+01:00" endTime="2017-02-02T21:43:41.5852476+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="71b07acc-0cf4-46cf-8d19-4d8ffa86d961">
      <Output>
        <StdOut>Given the calculator has clean memory
-&gt; done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0.0s)
Given I have entered 60 into the calculator
-&gt; done: AdditionSteps.GivenIHaveEnteredIntoTheCalculator(60) (0.0s)
And I have entered 70 into the calculator
-&gt; done: AdditionSteps.GivenIHaveEnteredIntoTheCalculator(70) (0.0s)
And I have entered 130 into the calculator
-&gt; done: AdditionSteps.GivenIHaveEnteredIntoTheCalculator(130) (0.0s)
When I press add
-&gt; done: AdditionSteps.WhenIPressAdd() (0.0s)
Then the result should be 260 on the screen
-&gt; done: AdditionSteps.ThenTheResultShouldBeOnTheScreen(260) (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="2a193c2a-d0a2-4bfe-b50e-fc3253b622e3" testId="6b8581c3-611e-6116-4232-a31382677735" testName="AddTwoNumbers" computerName="LENOVOWERK" duration="00:00:00.0004178" startTime="2017-02-02T21:43:41.5892495+01:00" endTime="2017-02-02T21:43:41.5932549+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2a193c2a-d0a2-4bfe-b50e-fc3253b622e3">
      <Output>
        <StdOut>Given the calculator has clean memory
-&gt; done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0.0s)
Given I have entered 1 into the calculator
-&gt; done: AdditionSteps.GivenIHaveEnteredIntoTheCalculator(1) (0.0s)
And I have entered 2 into the calculator
-&gt; done: AdditionSteps.GivenIHaveEnteredIntoTheCalculator(2) (0.0s)
When I press add
-&gt; done: AdditionSteps.WhenIPressAdd() (0.0s)
Then the result should be 3 on the screen
-&gt; done: AdditionSteps.ThenTheResultShouldBeOnTheScreen(3) (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d30a1fa3-a584-4272-bf66-ad0c5c521842" testId="b13a186e-33df-348e-f9e2-a18b445d0d6e" testName="FailToAddTwoNumbers" computerName="LENOVOWERK" duration="00:00:00.0392162" startTime="2017-02-02T21:43:41.5982760+01:00" endTime="2017-02-02T21:43:41.6403678+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d30a1fa3-a584-4272-bf66-ad0c5c521842">
      <Output>
        <StdOut>Given the calculator has clean memory
-&gt; done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0.0s)
Given I have entered 1 into the calculator
-&gt; done: AdditionSteps.GivenIHaveEnteredIntoTheCalculator(1) (0.0s)
And I have entered 2.2 into the calculator
-&gt; done: AdditionSteps.GivenIHaveEnteredIntoTheCalculator(2.2) (0.0s)
When I press add
-&gt; done: AdditionSteps.WhenIPressAdd() (0.0s)
Then the result should be 3.2 on the screen
-&gt; error: Input string was not in a correct format.</StdOut>
        <ErrorInfo>
          <Message>Test method Pickles.TestHarness.MsTest.AdditionFeature.FailToAddTwoNumbers threw exception: 
System.FormatException: Input string was not in a correct format.</Message>
          <StackTrace>    at System.Number.StringToNumber(String str, NumberStyles options, NumberBuffer&amp; number, NumberFormatInfo info, Boolean parseDecimal)
   at System.Number.ParseInt32(String s, NumberStyles style, NumberFormatInfo info)
   at System.String.System.IConvertible.ToInt32(IFormatProvider provider)
   at System.Convert.ChangeType(Object value, Type conversionType, IFormatProvider provider)
   at TechTalk.SpecFlow.Bindings.StepArgumentTypeConverter.ConvertSimple(Type typeToConvertTo, Object value, CultureInfo cultureInfo)
   at TechTalk.SpecFlow.Bindings.StepArgumentTypeConverter.ConvertSimple(IBindingType typeToConvertTo, Object value, CultureInfo cultureInfo)
   at TechTalk.SpecFlow.Bindings.StepArgumentTypeConverter.Convert(Object value, IBindingType typeToConvertTo, CultureInfo cultureInfo)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ConvertArg(Object value, IBindingType typeToConvertTo)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.&lt;&gt;c__DisplayClass5.&lt;GetExecuteArguments&gt;b__4(Object arg, Int32 argIndex)
   at System.Linq.Enumerable.&lt;SelectIterator&gt;d__5`2.MoveNext()
   at System.Linq.Buffer`1..ctor(IEnumerable`1 source)
   at System.Linq.Enumerable.ToArray[TSource](IEnumerable`1 source)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.GetExecuteArguments(BindingMatch match)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep(StepInstance stepInstance)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()
   at Pickles.TestHarness.MsTest.AdditionFeature.ScenarioCleanup() in C:\Users\Bas\Source\Repos\pickles\test-harness\MsTest\Addition.feature.cs:line 0
   at Pickles.TestHarness.MsTest.AdditionFeature.FailToAddTwoNumbers() in C:\Users\Bas\Source\Repos\pickles\test-harness\MsTest\Addition.feature:line 34
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="1a5af968-f14e-4056-9af5-48062a955305" testId="2124dd33-7aaa-d4fb-c72f-98ad434251c0" testName="NotAutomatedAddingTwoNumbers" computerName="LENOVOWERK" duration="00:00:00.0768180" startTime="2017-02-02T21:43:41.6473736+01:00" endTime="2017-02-02T21:43:41.7262140+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Inconclusive" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1a5af968-f14e-4056-9af5-48062a955305">
      <Output>
        <StdOut>Given the calculator has clean memory
-&gt; done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0.0s)
Given unimplemented step
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Given(@"unimplemented step")]
        public void GivenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }

When unimplemented step
-&gt; No matching step definition found for the step. Use the following code to create one:
        [When(@"unimplemented step")]
        public void WhenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }

Then unimplemented step
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Then(@"unimplemented step")]
        public void ThenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }</StdOut>
        <ErrorInfo>
          <Message>Assert.Inconclusive failed. No matching step definition found for one or more steps.
using System;
using TechTalk.SpecFlow;

namespace MyNamespace
{
    [Binding]
    public class StepDefinitions
    {
        [Given(@"unimplemented step")]
        public void GivenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }
        
        [When(@"unimplemented step")]
        public void WhenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }
        
        [Then(@"unimplemented step")]
        public void ThenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }
    }
}
</Message>
          <StackTrace>   at lambda_method(Closure , String , Object[] )
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestInconclusive(String message)
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestPending(String message)
   at TechTalk.SpecFlow.ErrorHandling.ErrorProvider.ThrowPendingError(TestStatus testStatus, String message)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()
   at Pickles.TestHarness.MsTest.AdditionFeature.ScenarioCleanup() in C:\Users\Bas\Source\Repos\pickles\test-harness\MsTest\Addition.feature.cs:line 0
   at Pickles.TestHarness.MsTest.AdditionFeature.NotAutomatedAddingTwoNumbers() in C:\Users\Bas\Source\Repos\pickles\test-harness\MsTest\Addition.feature:line 46
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="e3224b22-ad2f-4d31-9e09-784b2c9fec09" testId="b4815779-aba4-cf1b-8df3-4a745af70720" testName="AddingSeveralNumbers_40" computerName="LENOVOWERK" duration="00:00:00.0194424" startTime="2017-02-02T21:43:41.7312026+01:00" endTime="2017-02-02T21:43:41.7542215+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e3224b22-ad2f-4d31-9e09-784b2c9fec09">
      <Output>
        <StdOut>Given the background step fails
-&gt; error: 
    1
        should be
    2
        but was
    1
And the calculator has clean memory
-&gt; skipped because of previous errors
Given I have entered 40 into the calculator
-&gt; skipped because of previous errors
And I have entered 50 into the calculator
-&gt; skipped because of previous errors
And I have entered 90 into the calculator
-&gt; skipped because of previous errors
When I press add
-&gt; skipped because of previous errors
Then the result should be 180 on the screen
-&gt; skipped because of previous errors</StdOut>
        <ErrorInfo>
          <Message>Test method Pickles.TestHarness.MsTest.FailingBackgroundFeature.AddingSeveralNumbers_40 threw exception: 
Shouldly.ChuckedAWobbly: 
    1
        should be
    2
        but was
    1</Message>
          <StackTrace>    at Shouldly.ShouldlyCoreExtensions.AssertAwesomely[T](T actual, Func`2 specifiedConstraint, Object originalActual, Object originalExpected) in c:\TeamCity\buildAgent\work\10efaabfa8adbd4e\src\Shouldly\ShouldlyCoreExtensions.cs:line 18
   at Shouldly.ShouldBeTestExtensions.ShouldBe[T](T actual, T expected) in c:\TeamCity\buildAgent\work\10efaabfa8adbd4e\src\Shouldly\ShouldBeTestExtensions.cs:line 17
   at AutomationLayer.AdditionSteps.GivenTheBackgroundStepFails() in C:\Users\Bas\Source\Repos\pickles\test-harness\AutomationLayer\AdditionSteps.cs:line 25
   at lambda_method(Closure , IContextManager )
   at TechTalk.SpecFlow.Bindings.BindingInvoker.InvokeBinding(IBinding binding, IContextManager contextManager, Object[] arguments, ITestTracer testTracer, TimeSpan&amp; duration)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStepMatch(BindingMatch match, Object[] arguments)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep(StepInstance stepInstance)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()
   at Pickles.TestHarness.MsTest.FailingBackgroundFeature.ScenarioCleanup() in C:\Users\Bas\Source\Repos\pickles\test-harness\MsTest\FailingBackground.feature.cs:line 0
   at Pickles.TestHarness.MsTest.FailingBackgroundFeature.AddingSeveralNumbers(String firstNumber, String secondNumber, String thirdNumber, String result, String[] exampleTags) in C:\Users\Bas\Source\Repos\pickles\test-harness\MsTest\FailingBackground.feature:line 19
   at Pickles.TestHarness.MsTest.FailingBackgroundFeature.AddingSeveralNumbers_40() in C:\Users\Bas\Source\Repos\pickles\test-harness\MsTest\FailingBackground.feature.cs:line 0
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="ff20609f-60df-49eb-a108-83c60f2c97b5" testId="17bb28b8-a770-72be-af08-5a4b0847e4ea" testName="AddingSeveralNumbers_60" computerName="LENOVOWERK" duration="00:00:00.0027681" startTime="2017-02-02T21:43:41.7592225+01:00" endTime="2017-02-02T21:43:41.7642457+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ff20609f-60df-49eb-a108-83c60f2c97b5">
      <Output>
        <StdOut>Given the background step fails
-&gt; error: 
    1
        should be
    2
        but was
    1
And the calculator has clean memory
-&gt; skipped because of previous errors
Given I have entered 60 into the calculator
-&gt; skipped because of previous errors
And I have entered 70 into the calculator
-&gt; skipped because of previous errors
And I have entered 130 into the calculator
-&gt; skipped because of previous errors
When I press add
-&gt; skipped because of previous errors
Then the result should be 260 on the screen
-&gt; skipped because of previous errors</StdOut>
        <ErrorInfo>
          <Message>Test method Pickles.TestHarness.MsTest.FailingBackgroundFeature.AddingSeveralNumbers_60 threw exception: 
Shouldly.ChuckedAWobbly: 
    1
        should be
    2
        but was
    1</Message>
          <StackTrace>    at Shouldly.ShouldlyCoreExtensions.AssertAwesomely[T](T actual, Func`2 specifiedConstraint, Object originalActual, Object originalExpected) in c:\TeamCity\buildAgent\work\10efaabfa8adbd4e\src\Shouldly\ShouldlyCoreExtensions.cs:line 18
   at Shouldly.ShouldBeTestExtensions.ShouldBe[T](T actual, T expected) in c:\TeamCity\buildAgent\work\10efaabfa8adbd4e\src\Shouldly\ShouldBeTestExtensions.cs:line 17
   at AutomationLayer.AdditionSteps.GivenTheBackgroundStepFails() in C:\Users\Bas\Source\Repos\pickles\test-harness\AutomationLayer\AdditionSteps.cs:line 25
   at lambda_method(Closure , IContextManager )
   at TechTalk.SpecFlow.Bindings.BindingInvoker.InvokeBinding(IBinding binding, IContextManager contextManager, Object[] arguments, ITestTracer testTracer, TimeSpan&amp; duration)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStepMatch(BindingMatch match, Object[] arguments)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep(StepInstance stepInstance)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()
   at Pickles.TestHarness.MsTest.FailingBackgroundFeature.ScenarioCleanup() in C:\Users\Bas\Source\Repos\pickles\test-harness\MsTest\FailingBackground.feature.cs:line 0
   at Pickles.TestHarness.MsTest.FailingBackgroundFeature.AddingSeveralNumbers(String firstNumber, String secondNumber, String thirdNumber, String result, String[] exampleTags) in C:\Users\Bas\Source\Repos\pickles\test-harness\MsTest\FailingBackground.feature:line 19
   at Pickles.TestHarness.MsTest.FailingBackgroundFeature.AddingSeveralNumbers_60() in C:\Users\Bas\Source\Repos\pickles\test-harness\MsTest\FailingBackground.feature.cs:line 0
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="4ed2d641-2d8c-4de9-a2a9-91a159a77383" testId="ca63316a-39e5-9545-3bca-f1839c7b4664" testName="AddTwoNumbers" computerName="LENOVOWERK" duration="00:00:00.0025693" startTime="2017-02-02T21:43:41.7692526+01:00" endTime="2017-02-02T21:43:41.7742549+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4ed2d641-2d8c-4de9-a2a9-91a159a77383">
      <Output>
        <StdOut>Given the background step fails
-&gt; error: 
    1
        should be
    2
        but was
    1
And the calculator has clean memory
-&gt; skipped because of previous errors
Given I have entered 50 into the calculator
-&gt; skipped because of previous errors
And I have entered 70 into the calculator
-&gt; skipped because of previous errors
When I press add
-&gt; skipped because of previous errors
Then the result should be 120 on the screen
-&gt; skipped because of previous errors</StdOut>
        <ErrorInfo>
          <Message>Test method Pickles.TestHarness.MsTest.FailingBackgroundFeature.AddTwoNumbers threw exception: 
Shouldly.ChuckedAWobbly: 
    1
        should be
    2
        but was
    1</Message>
          <StackTrace>    at Shouldly.ShouldlyCoreExtensions.AssertAwesomely[T](T actual, Func`2 specifiedConstraint, Object originalActual, Object originalExpected) in c:\TeamCity\buildAgent\work\10efaabfa8adbd4e\src\Shouldly\ShouldlyCoreExtensions.cs:line 18
   at Shouldly.ShouldBeTestExtensions.ShouldBe[T](T actual, T expected) in c:\TeamCity\buildAgent\work\10efaabfa8adbd4e\src\Shouldly\ShouldBeTestExtensions.cs:line 17
   at AutomationLayer.AdditionSteps.GivenTheBackgroundStepFails() in C:\Users\Bas\Source\Repos\pickles\test-harness\AutomationLayer\AdditionSteps.cs:line 25
   at lambda_method(Closure , IContextManager )
   at TechTalk.SpecFlow.Bindings.BindingInvoker.InvokeBinding(IBinding binding, IContextManager contextManager, Object[] arguments, ITestTracer testTracer, TimeSpan&amp; duration)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStepMatch(BindingMatch match, Object[] arguments)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep(StepInstance stepInstance)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()
   at Pickles.TestHarness.MsTest.FailingBackgroundFeature.ScenarioCleanup() in C:\Users\Bas\Source\Repos\pickles\test-harness\MsTest\FailingBackground.feature.cs:line 0
   at Pickles.TestHarness.MsTest.FailingBackgroundFeature.AddTwoNumbers() in C:\Users\Bas\Source\Repos\pickles\test-harness\MsTest\FailingBackground.feature:line 12
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="7d4dde75-2912-4580-bcac-b905668c4ad3" testId="18582dd5-09c7-ce67-9cb7-8e15a9cdffd0" testName="FailingFeatureFailingScenario" computerName="LENOVOWERK" duration="00:00:00.0061013" startTime="2017-02-02T21:43:41.7802373+01:00" endTime="2017-02-02T21:43:41.7892642+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7d4dde75-2912-4580-bcac-b905668c4ad3">
      <Output>
        <StdOut>Then failing step
-&gt; error: 
    true
        should be
    False
        but was
    True</StdOut>
        <ErrorInfo>
          <Message>Test method Pickles.TestHarness.MsTest.MinimalFeatures.FailingFeature.FailingFeatureFailingScenario threw exception: 
Shouldly.ChuckedAWobbly: 
    true
        should be
    False
        but was
    True</Message>
          <StackTrace>    at Shouldly.ShouldlyCoreExtensions.AssertAwesomely[T](T actual, Func`2 specifiedConstraint, Object originalActual, Object originalExpected) in c:\TeamCity\buildAgent\work\10efaabfa8adbd4e\src\Shouldly\ShouldlyCoreExtensions.cs:line 18
   at Shouldly.ShouldBeTestExtensions.ShouldBe[T](T actual, T expected) in c:\TeamCity\buildAgent\work\10efaabfa8adbd4e\src\Shouldly\ShouldBeTestExtensions.cs:line 17
   at AutomationLayer.MinimalFeatures.MinimalSteps.ThenFailingStep() in C:\Users\Bas\Source\Repos\pickles\test-harness\AutomationLayer\MinimalFeatures\MinimalSteps.cs:line 24
   at lambda_method(Closure , IContextManager )
   at TechTalk.SpecFlow.Bindings.BindingInvoker.InvokeBinding(IBinding binding, IContextManager contextManager, Object[] arguments, ITestTracer testTracer, TimeSpan&amp; duration)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStepMatch(BindingMatch match, Object[] arguments)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep(StepInstance stepInstance)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()
   at Pickles.TestHarness.MsTest.MinimalFeatures.FailingFeature.ScenarioCleanup() in C:\Users\Bas\Source\Repos\pickles\test-harness\MsTest\Minimal Features\Failing.feature.cs:line 0
   at Pickles.TestHarness.MsTest.MinimalFeatures.FailingFeature.FailingFeatureFailingScenario() in C:\Users\Bas\Source\Repos\pickles\test-harness\MsTest\Minimal Features\Failing.feature:line 10
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="7b3bf790-7524-4675-bd79-8e4b87441beb" testId="7e6c75c9-5365-7582-f701-20d37d3ff511" testName="FailingFeatureInconclusiveScenario" computerName="LENOVOWERK" duration="00:00:00.0028870" startTime="2017-02-02T21:43:41.7942485+01:00" endTime="2017-02-02T21:43:41.7992705+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Inconclusive" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7b3bf790-7524-4675-bd79-8e4b87441beb">
      <Output>
        <StdOut>Then inconclusive step
-&gt; pending: MinimalSteps.ThenInconclusiveStep()</StdOut>
        <ErrorInfo>
          <Message>Assert.Inconclusive failed. One or more step definitions are not implemented yet.
  MinimalSteps.ThenInconclusiveStep()</Message>
          <StackTrace>   at lambda_method(Closure , String , Object[] )
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestInconclusive(String message)
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestPending(String message)
   at TechTalk.SpecFlow.ErrorHandling.ErrorProvider.ThrowPendingError(TestStatus testStatus, String message)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()
   at Pickles.TestHarness.MsTest.MinimalFeatures.FailingFeature.ScenarioCleanup() in C:\Users\Bas\Source\Repos\pickles\test-harness\MsTest\Minimal Features\Failing.feature.cs:line 0
   at Pickles.TestHarness.MsTest.MinimalFeatures.FailingFeature.FailingFeatureInconclusiveScenario() in C:\Users\Bas\Source\Repos\pickles\test-harness\MsTest\Minimal Features\Failing.feature:line 7
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="837c84ee-e678-4a77-8021-6bc1221395db" testId="fa1e54c9-cdb0-8bb1-6764-9179c3b61825" testName="FailingFeaturePassingScenario" computerName="LENOVOWERK" duration="00:00:00.0005123" startTime="2017-02-02T21:43:41.8032729+01:00" endTime="2017-02-02T21:43:41.8052747+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="837c84ee-e678-4a77-8021-6bc1221395db">
      <Output>
        <StdOut>Then passing step
-&gt; done: MinimalSteps.ThenPassingStep() (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="38c2b714-9773-4601-b41d-69770f8e8819" testId="add44896-9236-510f-750d-eb49b89a7a65" testName="InconclusiveFeatureInconclusiveScenario" computerName="LENOVOWERK" duration="00:00:00.0024136" startTime="2017-02-02T21:43:41.8122600+01:00" endTime="2017-02-02T21:43:41.8177883+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Inconclusive" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="38c2b714-9773-4601-b41d-69770f8e8819">
      <Output>
        <StdOut>Then inconclusive step
-&gt; pending: MinimalSteps.ThenInconclusiveStep()</StdOut>
        <ErrorInfo>
          <Message>Assert.Inconclusive failed. One or more step definitions are not implemented yet.
  MinimalSteps.ThenInconclusiveStep()</Message>
          <StackTrace>   at lambda_method(Closure , String , Object[] )
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestInconclusive(String message)
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestPending(String message)
   at TechTalk.SpecFlow.ErrorHandling.ErrorProvider.ThrowPendingError(TestStatus testStatus, String message)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()
   at Pickles.TestHarness.MsTest.MinimalFeatures.InconclusiveFeature.ScenarioCleanup() in C:\Users\Bas\Source\Repos\pickles\test-harness\MsTest\Minimal Features\Inconclusive.feature.cs:line 0
   at Pickles.TestHarness.MsTest.MinimalFeatures.InconclusiveFeature.InconclusiveFeatureInconclusiveScenario() in C:\Users\Bas\Source\Repos\pickles\test-harness\MsTest\Minimal Features\Inconclusive.feature:line 7
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="45745e7e-83c4-44da-85c8-bd4717d02da5" testId="41cb0c4f-1c07-4937-29e8-dcc987caf94e" testName="InconclusiveFeaturePassingScenario" computerName="LENOVOWERK" duration="00:00:00.0002715" startTime="2017-02-02T21:43:41.8217702+01:00" endTime="2017-02-02T21:43:41.8242925+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="45745e7e-83c4-44da-85c8-bd4717d02da5">
      <Output>
        <StdOut>Then passing step
-&gt; done: MinimalSteps.ThenPassingStep() (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b69ad1e7-ff02-4ecf-a51e-89147be57c29" testId="3af599bd-a8de-95a2-1ecc-194c7f8aceeb" testName="PassingFeaturePassingScenario" computerName="LENOVOWERK" duration="00:00:00.0004956" startTime="2017-02-02T21:43:41.8299969+01:00" endTime="2017-02-02T21:43:41.8339998+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b69ad1e7-ff02-4ecf-a51e-89147be57c29">
      <Output>
        <StdOut>Then passing step
-&gt; done: MinimalSteps.ThenPassingStep() (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="4f8ee6a1-3d3b-4b24-9a56-dd37da2c02a4" testId="0e090158-43a1-1be8-47c2-13e1b2c9f8c7" testName="NotAutomatedScenario1" computerName="LENOVOWERK" duration="00:00:00.0064075" startTime="2017-02-02T21:43:41.8389841+01:00" endTime="2017-02-02T21:43:41.8480097+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Inconclusive" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4f8ee6a1-3d3b-4b24-9a56-dd37da2c02a4">
      <Output>
        <StdOut>Given unimplemented step
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Given(@"unimplemented step")]
        public void GivenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }

Given unimplemented step
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Given(@"unimplemented step")]
        public void GivenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }

When unimplemented step
-&gt; No matching step definition found for the step. Use the following code to create one:
        [When(@"unimplemented step")]
        public void WhenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }

Then unimplemented step
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Then(@"unimplemented step")]
        public void ThenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }</StdOut>
        <ErrorInfo>
          <Message>Assert.Inconclusive failed. No matching step definition found for one or more steps.
using System;
using TechTalk.SpecFlow;

namespace MyNamespace
{
    [Binding]
    public class StepDefinitions
    {
        [Given(@"unimplemented step")]
        public void GivenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }
        
        [When(@"unimplemented step")]
        public void WhenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }
        
        [Then(@"unimplemented step")]
        public void ThenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }
    }
}
</Message>
          <StackTrace>   at lambda_method(Closure , String , Object[] )
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestInconclusive(String message)
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestPending(String message)
   at TechTalk.SpecFlow.ErrorHandling.ErrorProvider.ThrowPendingError(TestStatus testStatus, String message)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()
   at Pickles.TestHarness.MsTest.NotAutomatedAtAllFeature.ScenarioCleanup() in C:\Users\Bas\Source\Repos\pickles\test-harness\MsTest\NotAutomatedAtAll.feature.cs:line 0
   at Pickles.TestHarness.MsTest.NotAutomatedAtAllFeature.NotAutomatedScenario1() in C:\Users\Bas\Source\Repos\pickles\test-harness\MsTest\NotAutomatedAtAll.feature:line 9
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="60d71832-95b3-4c8b-b905-c0b7f668444d" testId="067e1c92-2860-531b-28dc-c2863e91b7f5" testName="NotAutomatedScenario2" computerName="LENOVOWERK" duration="00:00:00.0055877" startTime="2017-02-02T21:43:41.8520117+01:00" endTime="2017-02-02T21:43:41.8599981+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Inconclusive" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="60d71832-95b3-4c8b-b905-c0b7f668444d">
      <Output>
        <StdOut>Given unimplemented step
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Given(@"unimplemented step")]
        public void GivenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }

Given unimplemented step
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Given(@"unimplemented step")]
        public void GivenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }

When unimplemented step
-&gt; No matching step definition found for the step. Use the following code to create one:
        [When(@"unimplemented step")]
        public void WhenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }

Then unimplemented step
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Then(@"unimplemented step")]
        public void ThenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }</StdOut>
        <ErrorInfo>
          <Message>Assert.Inconclusive failed. No matching step definition found for one or more steps.
using System;
using TechTalk.SpecFlow;

namespace MyNamespace
{
    [Binding]
    public class StepDefinitions
    {
        [Given(@"unimplemented step")]
        public void GivenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }
        
        [When(@"unimplemented step")]
        public void WhenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }
        
        [Then(@"unimplemented step")]
        public void ThenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }
    }
}
</Message>
          <StackTrace>   at lambda_method(Closure , String , Object[] )
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestInconclusive(String message)
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestPending(String message)
   at TechTalk.SpecFlow.ErrorHandling.ErrorProvider.ThrowPendingError(TestStatus testStatus, String message)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()
   at Pickles.TestHarness.MsTest.NotAutomatedAtAllFeature.ScenarioCleanup() in C:\Users\Bas\Source\Repos\pickles\test-harness\MsTest\NotAutomatedAtAll.feature.cs:line 0
   at Pickles.TestHarness.MsTest.NotAutomatedAtAllFeature.NotAutomatedScenario2() in C:\Users\Bas\Source\Repos\pickles\test-harness\MsTest\NotAutomatedAtAll.feature:line 14
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="379de59b-de9d-4799-b665-f00be26f656a" testId="64813bea-d79b-d74b-adb5-1302eaf5641f" testName="NotAutomatedScenario3" computerName="LENOVOWERK" duration="00:00:00.0059931" startTime="2017-02-02T21:43:41.8650021+01:00" endTime="2017-02-02T21:43:41.8730278+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Inconclusive" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="379de59b-de9d-4799-b665-f00be26f656a">
      <Output>
        <StdOut>Given unimplemented step
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Given(@"unimplemented step")]
        public void GivenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }

Given unimplemented step
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Given(@"unimplemented step")]
        public void GivenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }

When unimplemented step
-&gt; No matching step definition found for the step. Use the following code to create one:
        [When(@"unimplemented step")]
        public void WhenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }

Then unimplemented step
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Then(@"unimplemented step")]
        public void ThenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }</StdOut>
        <ErrorInfo>
          <Message>Assert.Inconclusive failed. No matching step definition found for one or more steps.
using System;
using TechTalk.SpecFlow;

namespace MyNamespace
{
    [Binding]
    public class StepDefinitions
    {
        [Given(@"unimplemented step")]
        public void GivenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }
        
        [When(@"unimplemented step")]
        public void WhenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }
        
        [Then(@"unimplemented step")]
        public void ThenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }
    }
}
</Message>
          <StackTrace>   at lambda_method(Closure , String , Object[] )
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestInconclusive(String message)
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestPending(String message)
   at TechTalk.SpecFlow.ErrorHandling.ErrorProvider.ThrowPendingError(TestStatus testStatus, String message)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()
   at Pickles.TestHarness.MsTest.NotAutomatedAtAllFeature.ScenarioCleanup() in C:\Users\Bas\Source\Repos\pickles\test-harness\MsTest\NotAutomatedAtAll.feature.cs:line 0
   at Pickles.TestHarness.MsTest.NotAutomatedAtAllFeature.NotAutomatedScenario3() in C:\Users\Bas\Source\Repos\pickles\test-harness\MsTest\NotAutomatedAtAll.feature:line 19
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="9163e985-bacc-4d1f-8cbb-f34759532824" testId="aa71fe8a-e5aa-f23d-c632-cfb3c587ca21" testName="TestMethod" computerName="LENOVOWERK" duration="00:00:00.0001445" startTime="2017-02-02T21:43:41.8790128+01:00" endTime="2017-02-02T21:43:41.8810331+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9163e985-bacc-4d1f-8cbb-f34759532824">
    </UnitTestResult>
    <UnitTestResult executionId="487e6d0f-ed7b-47a8-ad09-e79b1539044c" testId="78aeddd0-4ae5-6103-b7dd-e62b71148721" testName="AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet0_Pass_1" computerName="LENOVOWERK" duration="00:00:00.0019017" startTime="2017-02-02T21:43:41.8850355+01:00" endTime="2017-02-02T21:43:41.8900232+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="487e6d0f-ed7b-47a8-ad09-e79b1539044c">
      <Output>
        <StdOut>Then the scenario will 'pass_1'
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("pass_1") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="08cf7da8-ed5e-4929-9b59-f4dc84297d02" testId="ee74d71f-f824-19d9-866e-a408a95ffa99" testName="AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet0_Pass_2" computerName="LENOVOWERK" duration="00:00:00.0002044" startTime="2017-02-02T21:43:41.8960240+01:00" endTime="2017-02-02T21:43:41.8980451+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="08cf7da8-ed5e-4929-9b59-f4dc84297d02">
      <Output>
        <StdOut>Then the scenario will 'pass_2'
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("pass_2") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="69f3c322-1c37-49d2-a381-0402c332eadb" testId="e30ef794-1ea7-a76a-356b-1668bca94630" testName="AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet1_Inconclusive_1" computerName="LENOVOWERK" duration="00:00:00.0018731" startTime="2017-02-02T21:43:41.9030290+01:00" endTime="2017-02-02T21:43:41.9070310+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Inconclusive" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="69f3c322-1c37-49d2-a381-0402c332eadb">
      <Output>
        <StdOut>Then the scenario will 'inconclusive_1'
-&gt; pending: ScenarioOutlineSteps.ThenTheScenarioWill("inconclusive_1")</StdOut>
        <ErrorInfo>
          <Message>Assert.Inconclusive failed. One or more step definitions are not implemented yet.
  ScenarioOutlineSteps.ThenTheScenarioWill("inconclusive_1")</Message>
          <StackTrace>   at lambda_method(Closure , String , Object[] )
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestInconclusive(String message)
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestPending(String message)
   at TechTalk.SpecFlow.ErrorHandling.ErrorProvider.ThrowPendingError(TestStatus testStatus, String message)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.ScenarioCleanup() in C:\Users\Bas\Source\Repos\pickles\test-harness\MsTest\ScenarioOutlines.feature.cs:line 0
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.AndWeCanGoTotallyBonkersWithMultipleExampleSections_(String result, String[] exampleTags) in C:\Users\Bas\Source\Repos\pickles\test-harness\MsTest\ScenarioOutlines.feature:line 45
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet1_Inconclusive_1() in C:\Users\Bas\Source\Repos\pickles\test-harness\MsTest\ScenarioOutlines.feature.cs:line 0
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="1fe3f0a7-f7a6-466c-93eb-8c68289fbdb8" testId="4d5f7893-139c-db00-8823-de561780758d" testName="AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet1_Inconclusive_2" computerName="LENOVOWERK" duration="00:00:00.0015964" startTime="2017-02-02T21:43:41.9130391+01:00" endTime="2017-02-02T21:43:41.9165612+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Inconclusive" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1fe3f0a7-f7a6-466c-93eb-8c68289fbdb8">
      <Output>
        <StdOut>Then the scenario will 'inconclusive_2'
-&gt; pending: ScenarioOutlineSteps.ThenTheScenarioWill("inconclusive_2")</StdOut>
        <ErrorInfo>
          <Message>Assert.Inconclusive failed. One or more step definitions are not implemented yet.
  ScenarioOutlineSteps.ThenTheScenarioWill("inconclusive_2")</Message>
          <StackTrace>   at lambda_method(Closure , String , Object[] )
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestInconclusive(String message)
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestPending(String message)
   at TechTalk.SpecFlow.ErrorHandling.ErrorProvider.ThrowPendingError(TestStatus testStatus, String message)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.ScenarioCleanup() in C:\Users\Bas\Source\Repos\pickles\test-harness\MsTest\ScenarioOutlines.feature.cs:line 0
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.AndWeCanGoTotallyBonkersWithMultipleExampleSections_(String result, String[] exampleTags) in C:\Users\Bas\Source\Repos\pickles\test-harness\MsTest\ScenarioOutlines.feature:line 45
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet1_Inconclusive_2() in C:\Users\Bas\Source\Repos\pickles\test-harness\MsTest\ScenarioOutlines.feature.cs:line 0
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="4a46c15b-d51c-4090-942a-628cdadc844f" testId="78a6b3a3-679e-ee71-7ff5-c9338e3be6c2" testName="AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet2_Fail_1" computerName="LENOVOWERK" duration="00:00:00.0034524" startTime="2017-02-02T21:43:41.9215571+01:00" endTime="2017-02-02T21:43:41.9270691+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4a46c15b-d51c-4090-942a-628cdadc844f">
      <Output>
        <StdOut>Then the scenario will 'fail_1'
-&gt; error: 
    true
        should be
    False
        but was
    True</StdOut>
        <ErrorInfo>
          <Message>Test method Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet2_Fail_1 threw exception: 
Shouldly.ChuckedAWobbly: 
    true
        should be
    False
        but was
    True</Message>
          <StackTrace>    at Shouldly.ShouldlyCoreExtensions.AssertAwesomely[T](T actual, Func`2 specifiedConstraint, Object originalActual, Object originalExpected) in c:\TeamCity\buildAgent\work\10efaabfa8adbd4e\src\Shouldly\ShouldlyCoreExtensions.cs:line 18
   at Shouldly.ShouldBeTestExtensions.ShouldBe[T](T actual, T expected) in c:\TeamCity\buildAgent\work\10efaabfa8adbd4e\src\Shouldly\ShouldBeTestExtensions.cs:line 17
   at AutomationLayer.ScenarioOutlineSteps.ThenTheScenarioWill(String result) in C:\Users\Bas\Source\Repos\pickles\test-harness\AutomationLayer\ScenarioOutlineSteps.cs:line 21
   at lambda_method(Closure , IContextManager , String )
   at TechTalk.SpecFlow.Bindings.BindingInvoker.InvokeBinding(IBinding binding, IContextManager contextManager, Object[] arguments, ITestTracer testTracer, TimeSpan&amp; duration)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStepMatch(BindingMatch match, Object[] arguments)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep(StepInstance stepInstance)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.ScenarioCleanup() in C:\Users\Bas\Source\Repos\pickles\test-harness\MsTest\ScenarioOutlines.feature.cs:line 0
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.AndWeCanGoTotallyBonkersWithMultipleExampleSections_(String result, String[] exampleTags) in C:\Users\Bas\Source\Repos\pickles\test-harness\MsTest\ScenarioOutlines.feature:line 45
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet2_Fail_1() in C:\Users\Bas\Source\Repos\pickles\test-harness\MsTest\ScenarioOutlines.feature.cs:line 0
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0f480644-c25e-441b-a30a-c1e9b9ca2f61" testId="40304968-0dee-8e41-4f42-20809899a9d0" testName="AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet2_Fail_2" computerName="LENOVOWERK" duration="00:00:00.0027395" startTime="2017-02-02T21:43:41.9325734+01:00" endTime="2017-02-02T21:43:41.9365758+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0f480644-c25e-441b-a30a-c1e9b9ca2f61">
      <Output>
        <StdOut>Then the scenario will 'fail_2'
-&gt; error: 
    true
        should be
    False
        but was
    True</StdOut>
        <ErrorInfo>
          <Message>Test method Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet2_Fail_2 threw exception: 
Shouldly.ChuckedAWobbly: 
    true
        should be
    False
        but was
    True</Message>
          <StackTrace>    at Shouldly.ShouldlyCoreExtensions.AssertAwesomely[T](T actual, Func`2 specifiedConstraint, Object originalActual, Object originalExpected) in c:\TeamCity\buildAgent\work\10efaabfa8adbd4e\src\Shouldly\ShouldlyCoreExtensions.cs:line 18
   at Shouldly.ShouldBeTestExtensions.ShouldBe[T](T actual, T expected) in c:\TeamCity\buildAgent\work\10efaabfa8adbd4e\src\Shouldly\ShouldBeTestExtensions.cs:line 17
   at AutomationLayer.ScenarioOutlineSteps.ThenTheScenarioWill(String result) in C:\Users\Bas\Source\Repos\pickles\test-harness\AutomationLayer\ScenarioOutlineSteps.cs:line 21
   at lambda_method(Closure , IContextManager , String )
   at TechTalk.SpecFlow.Bindings.BindingInvoker.InvokeBinding(IBinding binding, IContextManager contextManager, Object[] arguments, ITestTracer testTracer, TimeSpan&amp; duration)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStepMatch(BindingMatch match, Object[] arguments)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep(StepInstance stepInstance)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.ScenarioCleanup() in C:\Users\Bas\Source\Repos\pickles\test-harness\MsTest\ScenarioOutlines.feature.cs:line 0
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.AndWeCanGoTotallyBonkersWithMultipleExampleSections_(String result, String[] exampleTags) in C:\Users\Bas\Source\Repos\pickles\test-harness\MsTest\ScenarioOutlines.feature:line 45
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet2_Fail_2() in C:\Users\Bas\Source\Repos\pickles\test-harness\MsTest\ScenarioOutlines.feature.cs:line 0
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="8bb11ce6-7794-4998-b148-562f39c0f2f1" testId="72d470fa-c19a-1302-1fcf-eb104ea36048" testName="DealCorrectlyWithBackslashesInTheExamples_CTemp" computerName="LENOVOWERK" duration="00:00:00.0006500" startTime="2017-02-02T21:43:41.9425788+01:00" endTime="2017-02-02T21:43:41.9455997+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8bb11ce6-7794-4998-b148-562f39c0f2f1">
      <Output>
        <StdOut>When I have backslashes in the value, for example a 'c:\Temp\'
-&gt; done: ScenarioOutlineSteps.WhenIHaveBackslashesInTheValueForExampleAFilePath("c:\Temp\") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="85ed41c3-fdd6-4bb1-a950-75aaf50015e6" testId="ce4a9bf6-5fc5-0a40-2cbe-242a59cb1296" testName="DealCorrectlyWithOverlongExampleValues_PleaseEnterAValidTwoLetterCountryCodeE_G_DE" computerName="LENOVOWERK" duration="00:00:00.0007744" startTime="2017-02-02T21:43:41.9505982+01:00" endTime="2017-02-02T21:43:41.9536054+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="85ed41c3-fdd6-4bb1-a950-75aaf50015e6">
      <Output>
        <StdOut>When I have a field with value 'Please enter a valid two letter country code (e.g. DE)!'
-&gt; done: ScenarioOutlineSteps.WhenIHaveAFieldWithValue("Please enter a va...") (0.0s)
And I have a field with value 'This is just a very very very veery long error message!'
-&gt; done: ScenarioOutlineSteps.WhenIHaveAFieldWithValue("This is just a ve...") (0.0s)
Then the scenario will 'pass_1'
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("pass_1") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="80bed3bb-cf6c-4498-ad65-fc058726aea2" testId="d09c033d-0065-cbeb-bd7c-ee8b6460688f" testName="DealCorrectlyWithParenthesisInTheExamples_ThisIsADescriptionAndMore" computerName="LENOVOWERK" duration="00:00:00.0006821" startTime="2017-02-02T21:43:41.9620477+01:00" endTime="2017-02-02T21:43:41.9650494+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="80bed3bb-cf6c-4498-ad65-fc058726aea2">
      <Output>
        <StdOut>When I have parenthesis in the value, for example an 'This is a description (and more)'
-&gt; done: ScenarioOutlineSteps.WhenIHaveParenthesisInTheValueForExampleAnOverlyDescriptiveField("This is a descrip...") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="655e07dd-9759-4675-abe3-e97974342beb" testId="2c8f1abb-446c-6683-6327-8ec4ccd46e1a" testName="ThisIsAScenarioOutlineWhereAllScenariosPass_Pass_1" computerName="LENOVOWERK" duration="00:00:00.0006072" startTime="2017-02-02T21:43:41.9690711+01:00" endTime="2017-02-02T21:43:41.9720557+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="655e07dd-9759-4675-abe3-e97974342beb">
      <Output>
        <StdOut>Then the scenario will 'pass_1'
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("pass_1") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="90852d30-e5ef-4b9e-9340-f27b827f8c51" testId="9efc5df4-5f77-a670-8622-976418721b8f" testName="ThisIsAScenarioOutlineWhereAllScenariosPass_Pass_2" computerName="LENOVOWERK" duration="00:00:00.0002052" startTime="2017-02-02T21:43:41.9770780+01:00" endTime="2017-02-02T21:43:41.9810612+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="90852d30-e5ef-4b9e-9340-f27b827f8c51">
      <Output>
        <StdOut>Then the scenario will 'pass_2'
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("pass_2") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6f75d59f-71d7-4bb1-a312-de629dcc0f35" testId="9bb2410c-d8c6-90b8-75cd-5c93dc903745" testName="ThisIsAScenarioOutlineWhereAllScenariosPass_Pass_3" computerName="LENOVOWERK" duration="00:00:00.0002086" startTime="2017-02-02T21:43:41.9850828+01:00" endTime="2017-02-02T21:43:41.9870851+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6f75d59f-71d7-4bb1-a312-de629dcc0f35">
      <Output>
        <StdOut>Then the scenario will 'pass_3'
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("pass_3") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="5fa55760-e921-40f0-8246-dbbd3838a88a" testId="05c22c90-eaaa-d3c2-bd2d-36c2df85528e" testName="ThisIsAScenarioOutlineWhereOneScenarioFails_Fail_1" computerName="LENOVOWERK" duration="00:00:00.0028896" startTime="2017-02-02T21:43:41.9920690+01:00" endTime="2017-02-02T21:43:41.9980925+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5fa55760-e921-40f0-8246-dbbd3838a88a">
      <Output>
        <StdOut>Then the scenario will 'fail_1'
-&gt; error: 
    true
        should be
    False
        but was
    True</StdOut>
        <ErrorInfo>
          <Message>Test method Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.ThisIsAScenarioOutlineWhereOneScenarioFails_Fail_1 threw exception: 
Shouldly.ChuckedAWobbly: 
    true
        should be
    False
        but was
    True</Message>
          <StackTrace>    at Shouldly.ShouldlyCoreExtensions.AssertAwesomely[T](T actual, Func`2 specifiedConstraint, Object originalActual, Object originalExpected) in c:\TeamCity\buildAgent\work\10efaabfa8adbd4e\src\Shouldly\ShouldlyCoreExtensions.cs:line 18
   at Shouldly.ShouldBeTestExtensions.ShouldBe[T](T actual, T expected) in c:\TeamCity\buildAgent\work\10efaabfa8adbd4e\src\Shouldly\ShouldBeTestExtensions.cs:line 17
   at AutomationLayer.ScenarioOutlineSteps.ThenTheScenarioWill(String result) in C:\Users\Bas\Source\Repos\pickles\test-harness\AutomationLayer\ScenarioOutlineSteps.cs:line 21
   at lambda_method(Closure , IContextManager , String )
   at TechTalk.SpecFlow.Bindings.BindingInvoker.InvokeBinding(IBinding binding, IContextManager contextManager, Object[] arguments, ITestTracer testTracer, TimeSpan&amp; duration)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStepMatch(BindingMatch match, Object[] arguments)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep(StepInstance stepInstance)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.ScenarioCleanup() in C:\Users\Bas\Source\Repos\pickles\test-harness\MsTest\ScenarioOutlines.feature.cs:line 0
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.ThisIsAScenarioOutlineWhereOneScenarioFails(String result, String[] exampleTags) in C:\Users\Bas\Source\Repos\pickles\test-harness\MsTest\ScenarioOutlines.feature:line 34
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.ThisIsAScenarioOutlineWhereOneScenarioFails_Fail_1() in C:\Users\Bas\Source\Repos\pickles\test-harness\MsTest\ScenarioOutlines.feature.cs:line 0
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="a41914cf-7ed9-4737-9515-85d23e57e158" testId="e64af447-d4dc-7221-865a-703128db7b90" testName="ThisIsAScenarioOutlineWhereOneScenarioFails_Pass_1" computerName="LENOVOWERK" duration="00:00:00.0002189" startTime="2017-02-02T21:43:42.0030780+01:00" endTime="2017-02-02T21:43:42.0050795+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a41914cf-7ed9-4737-9515-85d23e57e158">
      <Output>
        <StdOut>Then the scenario will 'pass_1'
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("pass_1") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="521ca88d-475f-41f5-93f1-203791eea1df" testId="b04f3200-80ca-d47f-0c01-8a37e5c952e6" testName="ThisIsAScenarioOutlineWhereOneScenarioFails_Pass_2" computerName="LENOVOWERK" duration="00:00:00.0002715" startTime="2017-02-02T21:43:42.0100822+01:00" endTime="2017-02-02T21:43:42.0130843+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="521ca88d-475f-41f5-93f1-203791eea1df">
      <Output>
        <StdOut>Then the scenario will 'pass_2'
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("pass_2") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d015761e-47dd-4fe8-8c95-152dd4cbe2e3" testId="8c97c958-0c5d-1594-2cc5-02c96df8fc9b" testName="ThisIsAScenarioOutlineWhereOneScenarioIsInconclusive_Inconclusive_1" computerName="LENOVOWERK" duration="00:00:00.0017136" startTime="2017-02-02T21:43:42.0175922+01:00" endTime="2017-02-02T21:43:42.0211126+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Inconclusive" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d015761e-47dd-4fe8-8c95-152dd4cbe2e3">
      <Output>
        <StdOut>Then the scenario will 'inconclusive_1'
-&gt; pending: ScenarioOutlineSteps.ThenTheScenarioWill("inconclusive_1")</StdOut>
        <ErrorInfo>
          <Message>Assert.Inconclusive failed. One or more step definitions are not implemented yet.
  ScenarioOutlineSteps.ThenTheScenarioWill("inconclusive_1")</Message>
          <StackTrace>   at lambda_method(Closure , String , Object[] )
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestInconclusive(String message)
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestPending(String message)
   at TechTalk.SpecFlow.ErrorHandling.ErrorProvider.ThrowPendingError(TestStatus testStatus, String message)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.ScenarioCleanup() in C:\Users\Bas\Source\Repos\pickles\test-harness\MsTest\ScenarioOutlines.feature.cs:line 0
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.ThisIsAScenarioOutlineWhereOneScenarioIsInconclusive(String result, String[] exampleTags) in C:\Users\Bas\Source\Repos\pickles\test-harness\MsTest\ScenarioOutlines.feature:line 21
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.ThisIsAScenarioOutlineWhereOneScenarioIsInconclusive_Inconclusive_1() in C:\Users\Bas\Source\Repos\pickles\test-harness\MsTest\ScenarioOutlines.feature.cs:line 0
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="31e76ec9-aeed-44cf-aa4f-618b0fe6d48b" testId="6e54c207-a3b1-f181-06be-066795ac26e1" testName="ThisIsAScenarioOutlineWhereOneScenarioIsInconclusive_Pass_1" computerName="LENOVOWERK" duration="00:00:00.0002347" startTime="2017-02-02T21:43:42.0270972+01:00" endTime="2017-02-02T21:43:42.0292534+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="31e76ec9-aeed-44cf-aa4f-618b0fe6d48b">
      <Output>
        <StdOut>Then the scenario will 'pass_1'
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("pass_1") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="3d378506-8c2e-4d77-812b-1c9299d7a26b" testId="8f2bb160-fa82-a566-570e-51eeb5237e95" testName="ThisIsAScenarioOutlineWhereOneScenarioIsInconclusive_Pass_2" computerName="LENOVOWERK" duration="00:00:00.0002065" startTime="2017-02-02T21:43:42.0342377+01:00" endTime="2017-02-02T21:43:42.0362413+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3d378506-8c2e-4d77-812b-1c9299d7a26b">
      <Output>
        <StdOut>Then the scenario will 'pass_2'
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("pass_2") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="02218523-4b0d-47d7-b7dd-55d6db0e9daa" testId="73c03e74-0c0b-5c1d-2193-91dd98f1f95e" testName="ThisIsAScenarioOutlineWithAmpersand_Pass_1" computerName="LENOVOWERK" duration="00:00:00.0006812" startTime="2017-02-02T21:43:42.0402428+01:00" endTime="2017-02-02T21:43:42.0452648+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="02218523-4b0d-47d7-b7dd-55d6db0e9daa">
      <Output>
        <StdOut>Given the calculator has clean memory
-&gt; done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0.0s)
Then the scenario will 'pass_1'
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("pass_1") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="723a3a61-5240-4228-8f03-2c258bab3d49" testId="763d7e52-45c9-3e45-478d-dd6659bc69ba" testName="ThisIsAScenarioOutlineWithGermanUmlautsAouBAOU_Pass_1" computerName="LENOVOWERK" duration="00:00:00.0003579" startTime="2017-02-02T21:43:42.0502503+01:00" endTime="2017-02-02T21:43:42.0522693+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="723a3a61-5240-4228-8f03-2c258bab3d49">
      <Output>
        <StdOut>Given the calculator has clean memory
-&gt; done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0.0s)
Then the scenario will 'pass_1'
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("pass_1") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="92723242-e59b-4426-af79-f7bcffaf140d" testId="f8369e2e-c5ec-dade-ad85-e2c56909c853" testName="ThisIsAScenarioOutlineWithParenthesesHyphenAndComma10_2030_40_Pass_1" computerName="LENOVOWERK" duration="00:00:00.0003754" startTime="2017-02-02T21:43:42.0572536+01:00" endTime="2017-02-02T21:43:42.0592854+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="92723242-e59b-4426-af79-f7bcffaf140d">
      <Output>
        <StdOut>Given the calculator has clean memory
-&gt; done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0.0s)
Then the scenario will 'pass_1'
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("pass_1") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="45704043-909e-4213-9939-73003e03a08d" testId="3fe8806f-fabb-1deb-7e27-c59578f16da3" testName="ThisIsAScenarioWithParenthesesHyphenAndComma10_2030_40" computerName="LENOVOWERK" duration="00:00:00.0004280" startTime="2017-02-02T21:43:42.0652601+01:00" endTime="2017-02-02T21:43:42.0672803+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="45704043-909e-4213-9939-73003e03a08d">
      <Output>
        <StdOut>Given the calculator has clean memory
-&gt; done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0.0s)
Given I have entered 50 into the calculator
-&gt; done: AdditionSteps.GivenIHaveEnteredIntoTheCalculator(50) (0.0s)
And I have entered 70 into the calculator
-&gt; done: AdditionSteps.GivenIHaveEnteredIntoTheCalculator(70) (0.0s)
When I press add
-&gt; done: AdditionSteps.WhenIPressAdd() (0.0s)
Then the result should be 120 on the screen
-&gt; done: AdditionSteps.ThenTheResultShouldBeOnTheScreen(120) (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c00eb885-753d-4d0a-a99e-dee30d523362" testId="b891bd24-e5b1-222b-8d70-96a2ba7b0807" testName="ThisScenarioContainsExamplesWithRegex_SpecialCharacters_Variant0" computerName="LENOVOWERK" duration="00:00:00.0013783" startTime="2017-02-02T21:43:42.0712652+01:00" endTime="2017-02-02T21:43:42.0752689+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c00eb885-753d-4d0a-a99e-dee30d523362">
      <Output>
        <StdOut>Given the calculator has clean memory
-&gt; done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0.0s)
When I have special characters for regexes in the value, for example a '**'
-&gt; done: ScenarioOutlineSteps.WhenIHaveSpecialCharactersForRegexesInTheValueForExampleARegex("**") (0.0s)
Then the scenario will 'PASS'
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("PASS") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="3b5efa31-0ffb-48d2-9846-b239b87188d1" testId="fb3ec8b2-a410-ecc8-265b-29bfd3772553" testName="ThisScenarioContainsExamplesWithRegex_SpecialCharacters_Variant1" computerName="LENOVOWERK" duration="00:00:00.0002625" startTime="2017-02-02T21:43:42.0802720+01:00" endTime="2017-02-02T21:43:42.0822914+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3b5efa31-0ffb-48d2-9846-b239b87188d1">
      <Output>
        <StdOut>Given the calculator has clean memory
-&gt; done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0.0s)
When I have special characters for regexes in the value, for example a '++'
-&gt; done: ScenarioOutlineSteps.WhenIHaveSpecialCharactersForRegexesInTheValueForExampleARegex("++") (0.0s)
Then the scenario will 'PASS'
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("PASS") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="71c519c6-928c-4c78-a4f2-5f6650a40625" testId="a3bd6f67-daac-1ebc-5894-1d73dbe8d707" testName="ThisScenarioContainsExamplesWithRegex_SpecialCharacters_Variant2" computerName="LENOVOWERK" duration="00:00:00.0002600" startTime="2017-02-02T21:43:42.0872941+01:00" endTime="2017-02-02T21:43:42.0892959+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="71c519c6-928c-4c78-a4f2-5f6650a40625">
      <Output>
        <StdOut>Given the calculator has clean memory
-&gt; done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0.0s)
When I have special characters for regexes in the value, for example a '.*'
-&gt; done: ScenarioOutlineSteps.WhenIHaveSpecialCharactersForRegexesInTheValueForExampleARegex(".*") (0.0s)
Then the scenario will 'PASS'
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("PASS") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="39a4465d-26ed-45e0-ad5a-91b8da4b0fe7" testId="7699da71-b819-eb00-3894-2f0be7eec39c" testName="ThisScenarioContainsExamplesWithRegex_SpecialCharacters_Variant3" computerName="LENOVOWERK" duration="00:00:00.0002587" startTime="2017-02-02T21:43:42.0952814+01:00" endTime="2017-02-02T21:43:42.0973020+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="39a4465d-26ed-45e0-ad5a-91b8da4b0fe7">
      <Output>
        <StdOut>Given the calculator has clean memory
-&gt; done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0.0s)
When I have special characters for regexes in the value, for example a '[]'
-&gt; done: ScenarioOutlineSteps.WhenIHaveSpecialCharactersForRegexesInTheValueForExampleARegex("[]") (0.0s)
Then the scenario will 'PASS'
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("PASS") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="a2216e3d-4a60-4f17-9398-5cc5767d919f" testId="d253522e-be41-9b3a-247a-ca440d4ac588" testName="ThisScenarioContainsExamplesWithRegex_SpecialCharacters_Variant4" computerName="LENOVOWERK" duration="00:00:00.0002822" startTime="2017-02-02T21:43:42.1022855+01:00" endTime="2017-02-02T21:43:42.1043074+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a2216e3d-4a60-4f17-9398-5cc5767d919f">
      <Output>
        <StdOut>Given the calculator has clean memory
-&gt; done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0.0s)
When I have special characters for regexes in the value, for example a '{}'
-&gt; done: ScenarioOutlineSteps.WhenIHaveSpecialCharactersForRegexesInTheValueForExampleARegex("{}") (0.0s)
Then the scenario will 'PASS'
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("PASS") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b4fcf215-b3b4-4fad-bc4b-fab6c66eb579" testId="cca2404a-911a-a50e-9898-327264f0ea76" testName="ThisScenarioContainsExamplesWithRegex_SpecialCharacters_Variant5" computerName="LENOVOWERK" duration="00:00:00.0002583" startTime="2017-02-02T21:43:42.1102911+01:00" endTime="2017-02-02T21:43:42.1123131+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b4fcf215-b3b4-4fad-bc4b-fab6c66eb579">
      <Output>
        <StdOut>Given the calculator has clean memory
-&gt; done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0.0s)
When I have special characters for regexes in the value, for example a '()'
-&gt; done: ScenarioOutlineSteps.WhenIHaveSpecialCharactersForRegexesInTheValueForExampleARegex("()") (0.0s)
Then the scenario will 'PASS'
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("PASS") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d8d0c0d2-27cb-4881-a391-7ca4164855d9" testId="22ccdb90-02c8-97c1-e2a1-6bec4f044d99" testName="ThisScenarioContainsExamplesWithRegex_SpecialCharacters_Variant6" computerName="LENOVOWERK" duration="00:00:00.0002681" startTime="2017-02-02T21:43:42.1177990+01:00" endTime="2017-02-02T21:43:42.1198210+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d8d0c0d2-27cb-4881-a391-7ca4164855d9">
      <Output>
        <StdOut>Given the calculator has clean memory
-&gt; done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0.0s)
When I have special characters for regexes in the value, for example a '^.*(?&lt;foo&gt;BAR)\s[^0-9]{3,4}A+$'
-&gt; done: ScenarioOutlineSteps.WhenIHaveSpecialCharactersForRegexesInTheValueForExampleARegex("^.*(?&lt;foo&gt;BAR)\s[...") (0.0s)
Then the scenario will 'PASS'
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("PASS") (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
  </Results>
</TestRun>