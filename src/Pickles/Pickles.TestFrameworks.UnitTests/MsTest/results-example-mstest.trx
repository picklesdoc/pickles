<?xml version="1.0" encoding="UTF-8"?>
<TestRun id="60c49509-a48c-407c-9b6e-261cf32df049" name="dirkr@DESKTOP-5DEA222 2017-02-06 17:10:54" runUser="DESKTOP-5DEA222\dirkr" xmlns="http://microsoft.com/schemas/VisualStudio/TeamTest/2010">
  <TestSettings name="TestSettings" id="3d90c4f8-ccdc-4663-bad3-9f4c55f42318">
    <Description>These are default test settings for a local test run.</Description>
    <Deployment userDeploymentRoot="C:\Dev\Code\GitHub\DirkRombauts\pickles" useDefaultDeploymentRoot="false" enabled="false" runDeploymentRoot="dirkr_DESKTOP-5DEA222 2017-02-06 17_10_54" />
    <Execution>
      <TestTypeSpecific />
      <AgentRule name="Execution Agents">
      </AgentRule>
    </Execution>
    <Properties />
  </TestSettings>
  <Times creation="2017-02-06T17:10:54.0815346+01:00" queuing="2017-02-06T17:10:54.4897849+01:00" start="2017-02-06T17:10:54.6227591+01:00" finish="2017-02-06T17:10:55.4398814+01:00" />
  <ResultSummary outcome="Failed">
    <Counters total="47" executed="47" passed="30" error="0" failed="8" timeout="0" aborted="0" inconclusive="9" passedButRunAborted="0" notRunnable="0" notExecuted="0" disconnected="0" warning="0" completed="0" inProgress="0" pending="0" />
  </ResultSummary>
  <TestDefinitions>
    <UnitTest name="ThisScenarioContainsExamplesWithRegex_SpecialCharacters_Variant3" storage="c:\dev\code\github\dirkrombauts\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="7699da71-b819-eb00-3894-2f0be7eec39c">
      <Description>This scenario contains examples with Regex-special characters</Description>
      <Execution id="6d92ba39-2017-4597-9ddc-b66a1dc001b6" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenarios With Special Characters</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>Variant 3</Value>
        </Property>
        <Property>
          <Key>Parameter:regex</Key>
          <Value>[]</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Dev/Code/GitHub/DirkRombauts/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.ScenariosWithSpecialCharactersFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="ThisScenarioContainsExamplesWithRegex_SpecialCharacters_Variant3" />
    </UnitTest>
    <UnitTest name="NotAutomatedScenario1" storage="c:\dev\code\github\dirkrombauts\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="0e090158-43a1-1be8-47c2-13e1b2c9f8c7">
      <Description>Not automated scenario 1</Description>
      <Execution id="720f9d5d-974a-4761-b5f0-debba29d809a" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Not Automated At All</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Dev/Code/GitHub/DirkRombauts/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.NotAutomatedAtAllFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="NotAutomatedScenario1" />
    </UnitTest>
    <UnitTest name="AddingSeveralNumbers_40" storage="c:\dev\code\github\dirkrombauts\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="4d0f7327-ed22-9a43-969a-ac2ea8102d66">
      <Description>Adding several numbers</Description>
      <TestCategory>
        <TestCategoryItem TestCategory="tag2" />
      </TestCategory>
      <Execution id="fda966b5-6328-44c7-b6b7-8fcebdc8535c" />
      <Properties>
        <Property>
          <Key>Parameter:first number</Key>
          <Value>40</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>40</Value>
        </Property>
        <Property>
          <Key>Parameter:result</Key>
          <Value>180</Value>
        </Property>
        <Property>
          <Key>Parameter:third number</Key>
          <Value>90</Value>
        </Property>
        <Property>
          <Key>Parameter:second number</Key>
          <Value>50</Value>
        </Property>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Addition</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Dev/Code/GitHub/DirkRombauts/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.AdditionFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="AddingSeveralNumbers_40" />
    </UnitTest>
    <UnitTest name="AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet2_Fail_2" storage="c:\dev\code\github\dirkrombauts\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="40304968-0dee-8e41-4f42-20809899a9d0">
      <Description>And we can go totally bonkers with multiple example sections.</Description>
      <Execution id="6240d9de-e95c-4983-8c6f-bb8b564ffe2c" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenario Outlines</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>fail_2</Value>
        </Property>
        <Property>
          <Key>Parameter:result</Key>
          <Value>fail_2</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Dev/Code/GitHub/DirkRombauts/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet2_Fail_2" />
    </UnitTest>
    <UnitTest name="NotAutomatedScenario3" storage="c:\dev\code\github\dirkrombauts\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="64813bea-d79b-d74b-adb5-1302eaf5641f">
      <Description>Not automated scenario 3</Description>
      <Execution id="7ea0380a-39a5-4261-8323-034fe8ba5b5d" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Not Automated At All</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Dev/Code/GitHub/DirkRombauts/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.NotAutomatedAtAllFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="NotAutomatedScenario3" />
    </UnitTest>
    <UnitTest name="ThisScenarioContainsExamplesWithRegex_SpecialCharacters_Variant2" storage="c:\dev\code\github\dirkrombauts\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="a3bd6f67-daac-1ebc-5894-1d73dbe8d707">
      <Description>This scenario contains examples with Regex-special characters</Description>
      <Execution id="f88d041d-6c5d-4fe7-8853-4dff41a2b1f2" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenarios With Special Characters</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>Variant 2</Value>
        </Property>
        <Property>
          <Key>Parameter:regex</Key>
          <Value>.*</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Dev/Code/GitHub/DirkRombauts/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.ScenariosWithSpecialCharactersFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="ThisScenarioContainsExamplesWithRegex_SpecialCharacters_Variant2" />
    </UnitTest>
    <UnitTest name="ThisIsAScenarioWithParenthesesHyphenAndComma10_2030_40" storage="c:\dev\code\github\dirkrombauts\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="3fe8806f-fabb-1deb-7e27-c59578f16da3">
      <Description>This is a scenario with parentheses, hyphen and comma (10-20, 30-40)</Description>
      <Execution id="e4913852-5b3e-4a2f-b787-1af56a7446c4" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenarios With Special Characters</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Dev/Code/GitHub/DirkRombauts/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.ScenariosWithSpecialCharactersFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="ThisIsAScenarioWithParenthesesHyphenAndComma10_2030_40" />
    </UnitTest>
    <UnitTest name="ThisScenarioContainsExamplesWithRegex_SpecialCharacters_Variant1" storage="c:\dev\code\github\dirkrombauts\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="fb3ec8b2-a410-ecc8-265b-29bfd3772553">
      <Description>This scenario contains examples with Regex-special characters</Description>
      <Execution id="c7f4b4f7-734c-41d7-863a-73a058b6684c" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenarios With Special Characters</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>Variant 1</Value>
        </Property>
        <Property>
          <Key>Parameter:regex</Key>
          <Value>++</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Dev/Code/GitHub/DirkRombauts/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.ScenariosWithSpecialCharactersFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="ThisScenarioContainsExamplesWithRegex_SpecialCharacters_Variant1" />
    </UnitTest>
    <UnitTest name="AddTwoNumbers" storage="c:\dev\code\github\dirkrombauts\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="ca63316a-39e5-9545-3bca-f1839c7b4664">
      <Description>Add two numbers</Description>
      <Execution id="d8cb075f-3d81-4e72-b215-b9765db84238" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Failing Background</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Dev/Code/GitHub/DirkRombauts/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.FailingBackgroundFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="AddTwoNumbers" />
    </UnitTest>
    <UnitTest name="FailingFeatureInconclusiveScenario" storage="c:\dev\code\github\dirkrombauts\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="7e6c75c9-5365-7582-f701-20d37d3ff511">
      <Description>Failing Feature Inconclusive Scenario</Description>
      <Execution id="c8ae12ff-bf8e-4278-9305-2ae42602f7e3" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Failing</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Dev/Code/GitHub/DirkRombauts/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.MinimalFeatures.FailingFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="FailingFeatureInconclusiveScenario" />
    </UnitTest>
    <UnitTest name="ThisIsAScenarioOutlineWithParenthesesHyphenAndComma10_2030_40_Pass_1" storage="c:\dev\code\github\dirkrombauts\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="f8369e2e-c5ec-dade-ad85-e2c56909c853">
      <Description>This is a scenario outline with parentheses, hyphen and comma (10-20, 30-40)</Description>
      <Execution id="421e02cd-b167-4854-aec5-95e59c3b80c5" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenarios With Special Characters</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>pass_1</Value>
        </Property>
        <Property>
          <Key>Parameter:result</Key>
          <Value>pass_1</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Dev/Code/GitHub/DirkRombauts/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.ScenariosWithSpecialCharactersFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="ThisIsAScenarioOutlineWithParenthesesHyphenAndComma10_2030_40_Pass_1" />
    </UnitTest>
    <UnitTest name="InconclusiveFeatureInconclusiveScenario" storage="c:\dev\code\github\dirkrombauts\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="add44896-9236-510f-750d-eb49b89a7a65">
      <Description>Inconclusive Feature Inconclusive Scenario</Description>
      <Execution id="423412f5-4855-4a29-8a1a-d87a80d75231" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Inconclusive</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Dev/Code/GitHub/DirkRombauts/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.MinimalFeatures.InconclusiveFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="InconclusiveFeatureInconclusiveScenario" />
    </UnitTest>
    <UnitTest name="FailingFeaturePassingScenario" storage="c:\dev\code\github\dirkrombauts\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="fa1e54c9-cdb0-8bb1-6764-9179c3b61825">
      <Description>Failing Feature Passing Scenario</Description>
      <Execution id="5ff42286-24f3-4edd-9434-5363de0dd1c3" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Failing</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Dev/Code/GitHub/DirkRombauts/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.MinimalFeatures.FailingFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="FailingFeaturePassingScenario" />
    </UnitTest>
    <UnitTest name="DealCorrectlyWithBackslashesInTheExamples_CTemp" storage="c:\dev\code\github\dirkrombauts\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="72d470fa-c19a-1302-1fcf-eb104ea36048">
      <Description>Deal correctly with backslashes in the examples</Description>
      <Execution id="bd01c6a1-7886-4e91-9d6f-08c7e7cfaa3e" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenario Outlines</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>c:\Temp\</Value>
        </Property>
        <Property>
          <Key>Parameter:file path</Key>
          <Value>c:\Temp\</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Dev/Code/GitHub/DirkRombauts/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="DealCorrectlyWithBackslashesInTheExamples_CTemp" />
    </UnitTest>
    <UnitTest name="ThisIsAScenarioOutlineWhereOneScenarioFails_Pass_2" storage="c:\dev\code\github\dirkrombauts\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="b04f3200-80ca-d47f-0c01-8a37e5c952e6">
      <Description>This is a scenario outline where one scenario fails</Description>
      <Execution id="ec265078-a919-473d-aae6-81118b2b602d" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenario Outlines</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>pass_2</Value>
        </Property>
        <Property>
          <Key>Parameter:result</Key>
          <Value>pass_2</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Dev/Code/GitHub/DirkRombauts/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="ThisIsAScenarioOutlineWhereOneScenarioFails_Pass_2" />
    </UnitTest>
    <UnitTest name="ThisIsAScenarioOutlineWithGermanUmlautsAouBAOU_Pass_1" storage="c:\dev\code\github\dirkrombauts\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="763d7e52-45c9-3e45-478d-dd6659bc69ba">
      <Description>This is a scenario outline with german umlauts äöüß ÄÖÜ</Description>
      <Execution id="ce5816d1-1275-43c2-9908-fc8967f16e2c" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenarios With Special Characters</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>pass_1</Value>
        </Property>
        <Property>
          <Key>Parameter:result</Key>
          <Value>pass_1</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Dev/Code/GitHub/DirkRombauts/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.ScenariosWithSpecialCharactersFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="ThisIsAScenarioOutlineWithGermanUmlautsAouBAOU_Pass_1" />
    </UnitTest>
    <UnitTest name="AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet2_Fail_1" storage="c:\dev\code\github\dirkrombauts\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="78a6b3a3-679e-ee71-7ff5-c9338e3be6c2">
      <Description>And we can go totally bonkers with multiple example sections.</Description>
      <Execution id="e5a559bf-b05d-4bf4-9ecd-9e1ed69be9a2" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenario Outlines</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>fail_1</Value>
        </Property>
        <Property>
          <Key>Parameter:result</Key>
          <Value>fail_1</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Dev/Code/GitHub/DirkRombauts/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet2_Fail_1" />
    </UnitTest>
    <UnitTest name="ThisScenarioContainsExamplesWithRegex_SpecialCharacters_Variant6" storage="c:\dev\code\github\dirkrombauts\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="22ccdb90-02c8-97c1-e2a1-6bec4f044d99">
      <Description>This scenario contains examples with Regex-special characters</Description>
      <Execution id="951f42cc-b91f-4935-b6a1-e3666ba2d7b4" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenarios With Special Characters</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>Variant 6</Value>
        </Property>
        <Property>
          <Key>Parameter:regex</Key>
          <Value>^.*(?&lt;foo&gt;BAR)\s[^0-9]{3,4}A+$</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Dev/Code/GitHub/DirkRombauts/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.ScenariosWithSpecialCharactersFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="ThisScenarioContainsExamplesWithRegex_SpecialCharacters_Variant6" />
    </UnitTest>
    <UnitTest name="ThisScenarioContainsExamplesWithRegex_SpecialCharacters_Variant5" storage="c:\dev\code\github\dirkrombauts\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="cca2404a-911a-a50e-9898-327264f0ea76">
      <Description>This scenario contains examples with Regex-special characters</Description>
      <Execution id="197ebfef-0875-417e-9fab-e0030978e3a9" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenarios With Special Characters</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>Variant 5</Value>
        </Property>
        <Property>
          <Key>Parameter:regex</Key>
          <Value>()</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Dev/Code/GitHub/DirkRombauts/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.ScenariosWithSpecialCharactersFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="ThisScenarioContainsExamplesWithRegex_SpecialCharacters_Variant5" />
    </UnitTest>
    <UnitTest name="AddingSeveralNumbers_60" storage="c:\dev\code\github\dirkrombauts\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="f4b45c2f-fc98-d23c-6179-62d5b5a59825">
      <Description>Adding several numbers</Description>
      <TestCategory>
        <TestCategoryItem TestCategory="tag2" />
      </TestCategory>
      <Execution id="d45992f2-05ae-4a43-9beb-c90b2a35ad67" />
      <Properties>
        <Property>
          <Key>Parameter:first number</Key>
          <Value>60</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>60</Value>
        </Property>
        <Property>
          <Key>Parameter:result</Key>
          <Value>260</Value>
        </Property>
        <Property>
          <Key>Parameter:third number</Key>
          <Value>130</Value>
        </Property>
        <Property>
          <Key>Parameter:second number</Key>
          <Value>70</Value>
        </Property>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Addition</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Dev/Code/GitHub/DirkRombauts/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.AdditionFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="AddingSeveralNumbers_60" />
    </UnitTest>
    <UnitTest name="AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet0_Pass_2" storage="c:\dev\code\github\dirkrombauts\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="ee74d71f-f824-19d9-866e-a408a95ffa99">
      <Description>And we can go totally bonkers with multiple example sections.</Description>
      <Execution id="99f3f185-7fde-42ef-876c-93cf8897be94" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenario Outlines</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>pass_2</Value>
        </Property>
        <Property>
          <Key>Parameter:result</Key>
          <Value>pass_2</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Dev/Code/GitHub/DirkRombauts/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet0_Pass_2" />
    </UnitTest>
    <UnitTest name="FailingFeatureFailingScenario" storage="c:\dev\code\github\dirkrombauts\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="18582dd5-09c7-ce67-9cb7-8e15a9cdffd0">
      <Description>Failing Feature Failing Scenario</Description>
      <Execution id="f1c88008-26fc-4fa6-8d95-3ce9bd32fb19" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Failing</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Dev/Code/GitHub/DirkRombauts/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.MinimalFeatures.FailingFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="FailingFeatureFailingScenario" />
    </UnitTest>
    <UnitTest name="DealCorrectlyWithParenthesisInTheExamples_ThisIsADescriptionAndMore" storage="c:\dev\code\github\dirkrombauts\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="d09c033d-0065-cbeb-bd7c-ee8b6460688f">
      <Description>Deal correctly with parenthesis in the examples</Description>
      <Execution id="6488a267-deec-495b-965d-bd873b6fd994" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenario Outlines</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>This is a description (and more)</Value>
        </Property>
        <Property>
          <Key>Parameter:overly descriptive field</Key>
          <Value>This is a description (and more)</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Dev/Code/GitHub/DirkRombauts/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="DealCorrectlyWithParenthesisInTheExamples_ThisIsADescriptionAndMore" />
    </UnitTest>
    <UnitTest name="ThisIsAScenarioOutlineWhereOneScenarioIsInconclusive_Pass_1" storage="c:\dev\code\github\dirkrombauts\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="6e54c207-a3b1-f181-06be-066795ac26e1">
      <Description>This is a scenario outline where one scenario is inconclusive</Description>
      <Execution id="6345903e-4f6b-44e9-b158-743e9679a8e5" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenario Outlines</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>pass_1</Value>
        </Property>
        <Property>
          <Key>Parameter:result</Key>
          <Value>pass_1</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Dev/Code/GitHub/DirkRombauts/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="ThisIsAScenarioOutlineWhereOneScenarioIsInconclusive_Pass_1" />
    </UnitTest>
    <UnitTest name="ThisIsAScenarioOutlineWhereAllScenariosPass_Pass_2" storage="c:\dev\code\github\dirkrombauts\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="9efc5df4-5f77-a670-8622-976418721b8f">
      <Description>This is a scenario outline where all scenarios pass</Description>
      <Execution id="ff531493-ddfc-42d6-b034-f0d5bb0764f2" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenario Outlines</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>pass_2</Value>
        </Property>
        <Property>
          <Key>Parameter:result</Key>
          <Value>pass_2</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Dev/Code/GitHub/DirkRombauts/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="ThisIsAScenarioOutlineWhereAllScenariosPass_Pass_2" />
    </UnitTest>
    <UnitTest name="InconclusiveFeaturePassingScenario" storage="c:\dev\code\github\dirkrombauts\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="41cb0c4f-1c07-4937-29e8-dcc987caf94e">
      <Description>Inconclusive Feature Passing Scenario</Description>
      <Execution id="eab6df6a-314f-4c53-9627-c7738185a565" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Inconclusive</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Dev/Code/GitHub/DirkRombauts/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.MinimalFeatures.InconclusiveFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="InconclusiveFeaturePassingScenario" />
    </UnitTest>
    <UnitTest name="ThisIsAScenarioOutlineWhereOneScenarioIsInconclusive_Inconclusive_1" storage="c:\dev\code\github\dirkrombauts\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="8c97c958-0c5d-1594-2cc5-02c96df8fc9b">
      <Description>This is a scenario outline where one scenario is inconclusive</Description>
      <Execution id="b83f21b7-6f17-4b08-8944-dca64a9e4864" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenario Outlines</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>inconclusive_1</Value>
        </Property>
        <Property>
          <Key>Parameter:result</Key>
          <Value>inconclusive_1</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Dev/Code/GitHub/DirkRombauts/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="ThisIsAScenarioOutlineWhereOneScenarioIsInconclusive_Inconclusive_1" />
    </UnitTest>
    <UnitTest name="TestMethod" storage="c:\dev\code\github\dirkrombauts\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="aa71fe8a-e5aa-f23d-c632-cfb3c587ca21">
      <Execution id="379df550-33ea-40d6-8493-defadc0271a8" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Addition</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Dev/Code/GitHub/DirkRombauts/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.OrdinaryUnitTest, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="TestMethod" />
    </UnitTest>
    <UnitTest name="ThisIsAScenarioOutlineWithAmpersand_Pass_1" storage="c:\dev\code\github\dirkrombauts\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="73c03e74-0c0b-5c1d-2193-91dd98f1f95e">
      <Description>This is a scenario outline with ampersand &amp;</Description>
      <Execution id="ed45ebe5-d187-4dba-9ff8-c7301500a083" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenarios With Special Characters</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>pass_1</Value>
        </Property>
        <Property>
          <Key>Parameter:result</Key>
          <Value>pass_1</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Dev/Code/GitHub/DirkRombauts/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.ScenariosWithSpecialCharactersFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="ThisIsAScenarioOutlineWithAmpersand_Pass_1" />
    </UnitTest>
    <UnitTest name="AddTwoNumbers" storage="c:\dev\code\github\dirkrombauts\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="6b8581c3-611e-6116-4232-a31382677735">
      <Description>Add two numbers</Description>
      <TestCategory>
        <TestCategoryItem TestCategory="tag1" />
      </TestCategory>
      <Execution id="2ea96f13-9a23-4b57-8aeb-923b368c3758" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Addition</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Dev/Code/GitHub/DirkRombauts/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.AdditionFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="AddTwoNumbers" />
    </UnitTest>
    <UnitTest name="ThisIsAScenarioOutlineWhereOneScenarioIsInconclusive_Pass_2" storage="c:\dev\code\github\dirkrombauts\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="8f2bb160-fa82-a566-570e-51eeb5237e95">
      <Description>This is a scenario outline where one scenario is inconclusive</Description>
      <Execution id="5503a3d1-c5b4-4116-aaa8-53e6dad5e018" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenario Outlines</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>pass_2</Value>
        </Property>
        <Property>
          <Key>Parameter:result</Key>
          <Value>pass_2</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Dev/Code/GitHub/DirkRombauts/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="ThisIsAScenarioOutlineWhereOneScenarioIsInconclusive_Pass_2" />
    </UnitTest>
    <UnitTest name="ThisIsAScenarioOutlineWhereOneScenarioFails_Fail_1" storage="c:\dev\code\github\dirkrombauts\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="05c22c90-eaaa-d3c2-bd2d-36c2df85528e">
      <Description>This is a scenario outline where one scenario fails</Description>
      <Execution id="436f9511-6345-46b2-8c8b-1f9bc4dae751" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenario Outlines</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>fail_1</Value>
        </Property>
        <Property>
          <Key>Parameter:result</Key>
          <Value>fail_1</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Dev/Code/GitHub/DirkRombauts/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="ThisIsAScenarioOutlineWhereOneScenarioFails_Fail_1" />
    </UnitTest>
    <UnitTest name="AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet1_Inconclusive_2" storage="c:\dev\code\github\dirkrombauts\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="4d5f7893-139c-db00-8823-de561780758d">
      <Description>And we can go totally bonkers with multiple example sections.</Description>
      <Execution id="24a636a0-e978-444d-915b-a5612c3936d4" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenario Outlines</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>inconclusive_2</Value>
        </Property>
        <Property>
          <Key>Parameter:result</Key>
          <Value>inconclusive_2</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Dev/Code/GitHub/DirkRombauts/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet1_Inconclusive_2" />
    </UnitTest>
    <UnitTest name="AddingSeveralNumbers_60" storage="c:\dev\code\github\dirkrombauts\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="17bb28b8-a770-72be-af08-5a4b0847e4ea">
      <Description>Adding several numbers</Description>
      <Execution id="78f6173e-dbfa-4052-be30-014bd67d09ce" />
      <Properties>
        <Property>
          <Key>Parameter:first number</Key>
          <Value>60</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>60</Value>
        </Property>
        <Property>
          <Key>Parameter:result</Key>
          <Value>260</Value>
        </Property>
        <Property>
          <Key>Parameter:third number</Key>
          <Value>130</Value>
        </Property>
        <Property>
          <Key>Parameter:second number</Key>
          <Value>70</Value>
        </Property>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Failing Background</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Dev/Code/GitHub/DirkRombauts/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.FailingBackgroundFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="AddingSeveralNumbers_60" />
    </UnitTest>
    <UnitTest name="NotAutomatedScenario2" storage="c:\dev\code\github\dirkrombauts\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="067e1c92-2860-531b-28dc-c2863e91b7f5">
      <Description>Not automated scenario 2</Description>
      <Execution id="85199848-c892-4c48-858f-efba83f45a3a" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Not Automated At All</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Dev/Code/GitHub/DirkRombauts/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.NotAutomatedAtAllFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="NotAutomatedScenario2" />
    </UnitTest>
    <UnitTest name="ThisIsAScenarioOutlineWhereAllScenariosPass_Pass_1" storage="c:\dev\code\github\dirkrombauts\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="2c8f1abb-446c-6683-6327-8ec4ccd46e1a">
      <Description>This is a scenario outline where all scenarios pass</Description>
      <Execution id="d92c0861-ba31-40fc-960c-bc48d2f35daa" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenario Outlines</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>pass_1</Value>
        </Property>
        <Property>
          <Key>Parameter:result</Key>
          <Value>pass_1</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Dev/Code/GitHub/DirkRombauts/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="ThisIsAScenarioOutlineWhereAllScenariosPass_Pass_1" />
    </UnitTest>
    <UnitTest name="DealCorrectlyWithOverlongExampleValues_PleaseEnterAValidTwoLetterCountryCodeE_G_DE" storage="c:\dev\code\github\dirkrombauts\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="ce4a9bf6-5fc5-0a40-2cbe-242a59cb1296">
      <Description>Deal correctly with overlong example values</Description>
      <Execution id="6c8d5514-f328-4a6b-9626-56de18a92994" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenario Outlines</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>Please enter a valid two letter country code (e.g. DE)!</Value>
        </Property>
        <Property>
          <Key>Parameter:value1</Key>
          <Value>Please enter a valid two letter country code (e.g. DE)!</Value>
        </Property>
        <Property>
          <Key>Parameter:value2</Key>
          <Value>This is just a very very very veery long error message!</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Dev/Code/GitHub/DirkRombauts/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="DealCorrectlyWithOverlongExampleValues_PleaseEnterAValidTwoLetterCountryCodeE_G_DE" />
    </UnitTest>
    <UnitTest name="AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet0_Pass_1" storage="c:\dev\code\github\dirkrombauts\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="78aeddd0-4ae5-6103-b7dd-e62b71148721">
      <Description>And we can go totally bonkers with multiple example sections.</Description>
      <Execution id="28d3e694-dec4-4fd1-a9d8-4809b133381b" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenario Outlines</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>pass_1</Value>
        </Property>
        <Property>
          <Key>Parameter:result</Key>
          <Value>pass_1</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Dev/Code/GitHub/DirkRombauts/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet0_Pass_1" />
    </UnitTest>
    <UnitTest name="PassingFeaturePassingScenario" storage="c:\dev\code\github\dirkrombauts\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="3af599bd-a8de-95a2-1ecc-194c7f8aceeb">
      <Description>Passing Feature Passing Scenario</Description>
      <Execution id="a026f702-66be-4336-8d69-9cbc377fec6c" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Passing</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Dev/Code/GitHub/DirkRombauts/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.MinimalFeatures.PassingFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="PassingFeaturePassingScenario" />
    </UnitTest>
    <UnitTest name="ThisScenarioContainsExamplesWithRegex_SpecialCharacters_Variant0" storage="c:\dev\code\github\dirkrombauts\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="b891bd24-e5b1-222b-8d70-96a2ba7b0807">
      <Description>This scenario contains examples with Regex-special characters</Description>
      <Execution id="72b5ae3a-afbb-4fef-8616-618654294f80" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenarios With Special Characters</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>Variant 0</Value>
        </Property>
        <Property>
          <Key>Parameter:regex</Key>
          <Value>**</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Dev/Code/GitHub/DirkRombauts/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.ScenariosWithSpecialCharactersFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="ThisScenarioContainsExamplesWithRegex_SpecialCharacters_Variant0" />
    </UnitTest>
    <UnitTest name="ThisIsAScenarioOutlineWhereAllScenariosPass_Pass_3" storage="c:\dev\code\github\dirkrombauts\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="9bb2410c-d8c6-90b8-75cd-5c93dc903745">
      <Description>This is a scenario outline where all scenarios pass</Description>
      <Execution id="25a9d752-f77c-43b7-b2e2-1dc752d3e7a4" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenario Outlines</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>pass_3</Value>
        </Property>
        <Property>
          <Key>Parameter:result</Key>
          <Value>pass_3</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Dev/Code/GitHub/DirkRombauts/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="ThisIsAScenarioOutlineWhereAllScenariosPass_Pass_3" />
    </UnitTest>
    <UnitTest name="ThisIsAScenarioOutlineWhereOneScenarioFails_Pass_1" storage="c:\dev\code\github\dirkrombauts\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="e64af447-d4dc-7221-865a-703128db7b90">
      <Description>This is a scenario outline where one scenario fails</Description>
      <Execution id="0d0eca73-92d1-458a-ad89-676742029145" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenario Outlines</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>pass_1</Value>
        </Property>
        <Property>
          <Key>Parameter:result</Key>
          <Value>pass_1</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Dev/Code/GitHub/DirkRombauts/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="ThisIsAScenarioOutlineWhereOneScenarioFails_Pass_1" />
    </UnitTest>
    <UnitTest name="ThisScenarioContainsExamplesWithRegex_SpecialCharacters_Variant4" storage="c:\dev\code\github\dirkrombauts\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="d253522e-be41-9b3a-247a-ca440d4ac588">
      <Description>This scenario contains examples with Regex-special characters</Description>
      <Execution id="cc8a447e-aedf-4f4f-8b90-cf492773712b" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenarios With Special Characters</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>Variant 4</Value>
        </Property>
        <Property>
          <Key>Parameter:regex</Key>
          <Value>{}</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Dev/Code/GitHub/DirkRombauts/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.ScenariosWithSpecialCharactersFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="ThisScenarioContainsExamplesWithRegex_SpecialCharacters_Variant4" />
    </UnitTest>
    <UnitTest name="AddingSeveralNumbers_40" storage="c:\dev\code\github\dirkrombauts\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="b4815779-aba4-cf1b-8df3-4a745af70720">
      <Description>Adding several numbers</Description>
      <Execution id="df017bc0-c6be-422b-be0c-c19701e1ad30" />
      <Properties>
        <Property>
          <Key>Parameter:first number</Key>
          <Value>40</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>40</Value>
        </Property>
        <Property>
          <Key>Parameter:result</Key>
          <Value>180</Value>
        </Property>
        <Property>
          <Key>Parameter:third number</Key>
          <Value>90</Value>
        </Property>
        <Property>
          <Key>Parameter:second number</Key>
          <Value>50</Value>
        </Property>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Failing Background</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Dev/Code/GitHub/DirkRombauts/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.FailingBackgroundFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="AddingSeveralNumbers_40" />
    </UnitTest>
    <UnitTest name="FailToAddTwoNumbers" storage="c:\dev\code\github\dirkrombauts\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="b13a186e-33df-348e-f9e2-a18b445d0d6e">
      <Description>Fail to add two numbers</Description>
      <TestCategory>
        <TestCategoryItem TestCategory="tag1" />
      </TestCategory>
      <Execution id="f0f44364-a28f-4c26-b8fb-93aff8e08cf9" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Addition</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Dev/Code/GitHub/DirkRombauts/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.AdditionFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="FailToAddTwoNumbers" />
    </UnitTest>
    <UnitTest name="NotAutomatedAddingTwoNumbers" storage="c:\dev\code\github\dirkrombauts\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="2124dd33-7aaa-d4fb-c72f-98ad434251c0">
      <Description>Not automated adding two numbers</Description>
      <Execution id="36043178-3758-47ee-b7d8-ae8b5f982bb4" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Addition</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Dev/Code/GitHub/DirkRombauts/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.AdditionFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="NotAutomatedAddingTwoNumbers" />
    </UnitTest>
    <UnitTest name="AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet1_Inconclusive_1" storage="c:\dev\code\github\dirkrombauts\pickles\\test-harness\mstest\bin\debug\mstestharness.dll" id="e30ef794-1ea7-a76a-356b-1668bca94630">
      <Description>And we can go totally bonkers with multiple example sections.</Description>
      <Execution id="e36fd1e1-ff34-45f0-bce6-69ccc8ce70f3" />
      <Properties>
        <Property>
          <Key>FeatureTitle</Key>
          <Value>Scenario Outlines</Value>
        </Property>
        <Property>
          <Key>VariantName</Key>
          <Value>inconclusive_1</Value>
        </Property>
        <Property>
          <Key>Parameter:result</Key>
          <Value>inconclusive_1</Value>
        </Property>
      </Properties>
      <TestMethod codeBase="C:/Dev/Code/GitHub/DirkRombauts/pickles/test-harness/mstest/bin/Debug/MsTestHarness.DLL" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter, Microsoft.VisualStudio.QualityTools.Tips.UnitTest.Adapter, Version=14.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature, MsTestHarness, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" name="AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet1_Inconclusive_1" />
    </UnitTest>
  </TestDefinitions>
  <TestLists>
    <TestList name="Results Not in a List" id="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestList name="All Loaded Results" id="19431567-8539-422a-85d7-44ee4e166bda" />
  </TestLists>
  <TestEntries>
    <TestEntry testId="4d0f7327-ed22-9a43-969a-ac2ea8102d66" executionId="fda966b5-6328-44c7-b6b7-8fcebdc8535c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f4b45c2f-fc98-d23c-6179-62d5b5a59825" executionId="d45992f2-05ae-4a43-9beb-c90b2a35ad67" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6b8581c3-611e-6116-4232-a31382677735" executionId="2ea96f13-9a23-4b57-8aeb-923b368c3758" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b13a186e-33df-348e-f9e2-a18b445d0d6e" executionId="f0f44364-a28f-4c26-b8fb-93aff8e08cf9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2124dd33-7aaa-d4fb-c72f-98ad434251c0" executionId="36043178-3758-47ee-b7d8-ae8b5f982bb4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b4815779-aba4-cf1b-8df3-4a745af70720" executionId="df017bc0-c6be-422b-be0c-c19701e1ad30" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="17bb28b8-a770-72be-af08-5a4b0847e4ea" executionId="78f6173e-dbfa-4052-be30-014bd67d09ce" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ca63316a-39e5-9545-3bca-f1839c7b4664" executionId="d8cb075f-3d81-4e72-b215-b9765db84238" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="18582dd5-09c7-ce67-9cb7-8e15a9cdffd0" executionId="f1c88008-26fc-4fa6-8d95-3ce9bd32fb19" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7e6c75c9-5365-7582-f701-20d37d3ff511" executionId="c8ae12ff-bf8e-4278-9305-2ae42602f7e3" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="fa1e54c9-cdb0-8bb1-6764-9179c3b61825" executionId="5ff42286-24f3-4edd-9434-5363de0dd1c3" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="add44896-9236-510f-750d-eb49b89a7a65" executionId="423412f5-4855-4a29-8a1a-d87a80d75231" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="41cb0c4f-1c07-4937-29e8-dcc987caf94e" executionId="eab6df6a-314f-4c53-9627-c7738185a565" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3af599bd-a8de-95a2-1ecc-194c7f8aceeb" executionId="a026f702-66be-4336-8d69-9cbc377fec6c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0e090158-43a1-1be8-47c2-13e1b2c9f8c7" executionId="720f9d5d-974a-4761-b5f0-debba29d809a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="067e1c92-2860-531b-28dc-c2863e91b7f5" executionId="85199848-c892-4c48-858f-efba83f45a3a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="64813bea-d79b-d74b-adb5-1302eaf5641f" executionId="7ea0380a-39a5-4261-8323-034fe8ba5b5d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="aa71fe8a-e5aa-f23d-c632-cfb3c587ca21" executionId="379df550-33ea-40d6-8493-defadc0271a8" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="78aeddd0-4ae5-6103-b7dd-e62b71148721" executionId="28d3e694-dec4-4fd1-a9d8-4809b133381b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ee74d71f-f824-19d9-866e-a408a95ffa99" executionId="99f3f185-7fde-42ef-876c-93cf8897be94" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e30ef794-1ea7-a76a-356b-1668bca94630" executionId="e36fd1e1-ff34-45f0-bce6-69ccc8ce70f3" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4d5f7893-139c-db00-8823-de561780758d" executionId="24a636a0-e978-444d-915b-a5612c3936d4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="78a6b3a3-679e-ee71-7ff5-c9338e3be6c2" executionId="e5a559bf-b05d-4bf4-9ecd-9e1ed69be9a2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="40304968-0dee-8e41-4f42-20809899a9d0" executionId="6240d9de-e95c-4983-8c6f-bb8b564ffe2c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="72d470fa-c19a-1302-1fcf-eb104ea36048" executionId="bd01c6a1-7886-4e91-9d6f-08c7e7cfaa3e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ce4a9bf6-5fc5-0a40-2cbe-242a59cb1296" executionId="6c8d5514-f328-4a6b-9626-56de18a92994" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d09c033d-0065-cbeb-bd7c-ee8b6460688f" executionId="6488a267-deec-495b-965d-bd873b6fd994" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2c8f1abb-446c-6683-6327-8ec4ccd46e1a" executionId="d92c0861-ba31-40fc-960c-bc48d2f35daa" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9efc5df4-5f77-a670-8622-976418721b8f" executionId="ff531493-ddfc-42d6-b034-f0d5bb0764f2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9bb2410c-d8c6-90b8-75cd-5c93dc903745" executionId="25a9d752-f77c-43b7-b2e2-1dc752d3e7a4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="05c22c90-eaaa-d3c2-bd2d-36c2df85528e" executionId="436f9511-6345-46b2-8c8b-1f9bc4dae751" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e64af447-d4dc-7221-865a-703128db7b90" executionId="0d0eca73-92d1-458a-ad89-676742029145" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b04f3200-80ca-d47f-0c01-8a37e5c952e6" executionId="ec265078-a919-473d-aae6-81118b2b602d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8c97c958-0c5d-1594-2cc5-02c96df8fc9b" executionId="b83f21b7-6f17-4b08-8944-dca64a9e4864" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6e54c207-a3b1-f181-06be-066795ac26e1" executionId="6345903e-4f6b-44e9-b158-743e9679a8e5" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8f2bb160-fa82-a566-570e-51eeb5237e95" executionId="5503a3d1-c5b4-4116-aaa8-53e6dad5e018" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="73c03e74-0c0b-5c1d-2193-91dd98f1f95e" executionId="ed45ebe5-d187-4dba-9ff8-c7301500a083" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="763d7e52-45c9-3e45-478d-dd6659bc69ba" executionId="ce5816d1-1275-43c2-9908-fc8967f16e2c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f8369e2e-c5ec-dade-ad85-e2c56909c853" executionId="421e02cd-b167-4854-aec5-95e59c3b80c5" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3fe8806f-fabb-1deb-7e27-c59578f16da3" executionId="e4913852-5b3e-4a2f-b787-1af56a7446c4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b891bd24-e5b1-222b-8d70-96a2ba7b0807" executionId="72b5ae3a-afbb-4fef-8616-618654294f80" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="fb3ec8b2-a410-ecc8-265b-29bfd3772553" executionId="c7f4b4f7-734c-41d7-863a-73a058b6684c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a3bd6f67-daac-1ebc-5894-1d73dbe8d707" executionId="f88d041d-6c5d-4fe7-8853-4dff41a2b1f2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7699da71-b819-eb00-3894-2f0be7eec39c" executionId="6d92ba39-2017-4597-9ddc-b66a1dc001b6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d253522e-be41-9b3a-247a-ca440d4ac588" executionId="cc8a447e-aedf-4f4f-8b90-cf492773712b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="cca2404a-911a-a50e-9898-327264f0ea76" executionId="197ebfef-0875-417e-9fab-e0030978e3a9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="22ccdb90-02c8-97c1-e2a1-6bec4f044d99" executionId="951f42cc-b91f-4935-b6a1-e3666ba2d7b4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
  </TestEntries>
  <Results>
    <UnitTestResult executionId="fda966b5-6328-44c7-b6b7-8fcebdc8535c" testId="4d0f7327-ed22-9a43-969a-ac2ea8102d66" testName="AddingSeveralNumbers_40" computerName="DESKTOP-5DEA222" duration="00:00:00.0526498" startTime="2017-02-06T17:10:54.6607704+01:00" endTime="2017-02-06T17:10:54.9763727+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="fda966b5-6328-44c7-b6b7-8fcebdc8535c">
      <Output>
        <StdOut>Given the calculator has clean memory
-&gt; done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0,0s)
Given I have entered 40 into the calculator
-&gt; done: AdditionSteps.GivenIHaveEnteredIntoTheCalculator(40) (0,0s)
And I have entered 50 into the calculator
-&gt; done: AdditionSteps.GivenIHaveEnteredIntoTheCalculator(50) (0,0s)
And I have entered 90 into the calculator
-&gt; done: AdditionSteps.GivenIHaveEnteredIntoTheCalculator(90) (0,0s)
When I press add
-&gt; done: AdditionSteps.WhenIPressAdd() (0,0s)
Then the result should be 180 on the screen
-&gt; done: AdditionSteps.ThenTheResultShouldBeOnTheScreen(180) (0,0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d45992f2-05ae-4a43-9beb-c90b2a35ad67" testId="f4b45c2f-fc98-d23c-6179-62d5b5a59825" testName="AddingSeveralNumbers_60" computerName="DESKTOP-5DEA222" duration="00:00:00.0003638" startTime="2017-02-06T17:10:54.9804047+01:00" endTime="2017-02-06T17:10:54.9834044+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d45992f2-05ae-4a43-9beb-c90b2a35ad67">
      <Output>
        <StdOut>Given the calculator has clean memory
-&gt; done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0,0s)
Given I have entered 60 into the calculator
-&gt; done: AdditionSteps.GivenIHaveEnteredIntoTheCalculator(60) (0,0s)
And I have entered 70 into the calculator
-&gt; done: AdditionSteps.GivenIHaveEnteredIntoTheCalculator(70) (0,0s)
And I have entered 130 into the calculator
-&gt; done: AdditionSteps.GivenIHaveEnteredIntoTheCalculator(130) (0,0s)
When I press add
-&gt; done: AdditionSteps.WhenIPressAdd() (0,0s)
Then the result should be 260 on the screen
-&gt; done: AdditionSteps.ThenTheResultShouldBeOnTheScreen(260) (0,0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="2ea96f13-9a23-4b57-8aeb-923b368c3758" testId="6b8581c3-611e-6116-4232-a31382677735" testName="AddTwoNumbers" computerName="DESKTOP-5DEA222" duration="00:00:00.0003338" startTime="2017-02-06T17:10:54.9883743+01:00" endTime="2017-02-06T17:10:54.9903757+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2ea96f13-9a23-4b57-8aeb-923b368c3758">
      <Output>
        <StdOut>Given the calculator has clean memory
-&gt; done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0,0s)
Given I have entered 1 into the calculator
-&gt; done: AdditionSteps.GivenIHaveEnteredIntoTheCalculator(1) (0,0s)
And I have entered 2 into the calculator
-&gt; done: AdditionSteps.GivenIHaveEnteredIntoTheCalculator(2) (0,0s)
When I press add
-&gt; done: AdditionSteps.WhenIPressAdd() (0,0s)
Then the result should be 3 on the screen
-&gt; done: AdditionSteps.ThenTheResultShouldBeOnTheScreen(3) (0,0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f0f44364-a28f-4c26-b8fb-93aff8e08cf9" testId="b13a186e-33df-348e-f9e2-a18b445d0d6e" testName="FailToAddTwoNumbers" computerName="DESKTOP-5DEA222" duration="00:00:00.0254637" startTime="2017-02-06T17:10:54.9943733+01:00" endTime="2017-02-06T17:10:55.0223986+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f0f44364-a28f-4c26-b8fb-93aff8e08cf9">
      <Output>
        <StdOut>Given the calculator has clean memory
-&gt; done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0,0s)
Given I have entered 1 into the calculator
-&gt; done: AdditionSteps.GivenIHaveEnteredIntoTheCalculator(1) (0,0s)
And I have entered 2.2 into the calculator
-&gt; done: AdditionSteps.GivenIHaveEnteredIntoTheCalculator(2,2) (0,0s)
When I press add
-&gt; done: AdditionSteps.WhenIPressAdd() (0,0s)
Then the result should be 3.2 on the screen
-&gt; error: Input string was not in a correct format.</StdOut>
        <ErrorInfo>
          <Message>Test method Pickles.TestHarness.MsTest.AdditionFeature.FailToAddTwoNumbers threw exception: 
System.FormatException: Input string was not in a correct format.</Message>
          <StackTrace>    at System.Number.StringToNumber(String str, NumberStyles options, NumberBuffer&amp; number, NumberFormatInfo info, Boolean parseDecimal)
   at System.Number.ParseInt32(String s, NumberStyles style, NumberFormatInfo info)
   at System.String.System.IConvertible.ToInt32(IFormatProvider provider)
   at System.Convert.ChangeType(Object value, Type conversionType, IFormatProvider provider)
   at TechTalk.SpecFlow.Bindings.StepArgumentTypeConverter.ConvertSimple(Type typeToConvertTo, Object value, CultureInfo cultureInfo)
   at TechTalk.SpecFlow.Bindings.StepArgumentTypeConverter.ConvertSimple(IBindingType typeToConvertTo, Object value, CultureInfo cultureInfo)
   at TechTalk.SpecFlow.Bindings.StepArgumentTypeConverter.Convert(Object value, IBindingType typeToConvertTo, CultureInfo cultureInfo)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ConvertArg(Object value, IBindingType typeToConvertTo)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.&lt;&gt;c__DisplayClass5.&lt;GetExecuteArguments&gt;b__4(Object arg, Int32 argIndex)
   at System.Linq.Enumerable.&lt;SelectIterator&gt;d__5`2.MoveNext()
   at System.Linq.Buffer`1..ctor(IEnumerable`1 source)
   at System.Linq.Enumerable.ToArray[TSource](IEnumerable`1 source)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.GetExecuteArguments(BindingMatch match)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep(StepInstance stepInstance)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()
   at Pickles.TestHarness.MsTest.AdditionFeature.ScenarioCleanup()
   at Pickles.TestHarness.MsTest.AdditionFeature.FailToAddTwoNumbers() in C:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\MsTest\Addition.feature:line 34
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="36043178-3758-47ee-b7d8-ae8b5f982bb4" testId="2124dd33-7aaa-d4fb-c72f-98ad434251c0" testName="NotAutomatedAddingTwoNumbers" computerName="DESKTOP-5DEA222" duration="00:00:00.0277199" startTime="2017-02-06T17:10:55.0263978+01:00" endTime="2017-02-06T17:10:55.0564332+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Inconclusive" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="36043178-3758-47ee-b7d8-ae8b5f982bb4">
      <Output>
        <StdOut>Given the calculator has clean memory
-&gt; done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0,0s)
Given unimplemented step
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Given(@"unimplemented step")]
        public void GivenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }

When unimplemented step
-&gt; No matching step definition found for the step. Use the following code to create one:
        [When(@"unimplemented step")]
        public void WhenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }

Then unimplemented step
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Then(@"unimplemented step")]
        public void ThenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }</StdOut>
        <ErrorInfo>
          <Message>Assert.Inconclusive failed. No matching step definition found for one or more steps.
using System;
using TechTalk.SpecFlow;

namespace MyNamespace
{
    [Binding]
    public class StepDefinitions
    {
        [Given(@"unimplemented step")]
        public void GivenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }
        
        [When(@"unimplemented step")]
        public void WhenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }
        
        [Then(@"unimplemented step")]
        public void ThenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }
    }
}
</Message>
          <StackTrace>   at lambda_method(Closure , String , Object[] )
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestInconclusive(String message)
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestPending(String message)
   at TechTalk.SpecFlow.ErrorHandling.ErrorProvider.ThrowPendingError(TestStatus testStatus, String message)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()
   at Pickles.TestHarness.MsTest.AdditionFeature.ScenarioCleanup()
   at Pickles.TestHarness.MsTest.AdditionFeature.NotAutomatedAddingTwoNumbers() in C:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\MsTest\Addition.feature:line 46
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="df017bc0-c6be-422b-be0c-c19701e1ad30" testId="b4815779-aba4-cf1b-8df3-4a745af70720" testName="AddingSeveralNumbers_40" computerName="DESKTOP-5DEA222" duration="00:00:00.0107571" startTime="2017-02-06T17:10:55.0614141+01:00" endTime="2017-02-06T17:10:55.0751078+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="df017bc0-c6be-422b-be0c-c19701e1ad30">
      <Output>
        <StdOut>Given the background step fails
-&gt; error: 
    1
        should be
    2
        but was
    1
And the calculator has clean memory
-&gt; skipped because of previous errors
Given I have entered 40 into the calculator
-&gt; skipped because of previous errors
And I have entered 50 into the calculator
-&gt; skipped because of previous errors
And I have entered 90 into the calculator
-&gt; skipped because of previous errors
When I press add
-&gt; skipped because of previous errors
Then the result should be 180 on the screen
-&gt; skipped because of previous errors</StdOut>
        <ErrorInfo>
          <Message>Test method Pickles.TestHarness.MsTest.FailingBackgroundFeature.AddingSeveralNumbers_40 threw exception: 
Shouldly.ChuckedAWobbly: 
    1
        should be
    2
        but was
    1</Message>
          <StackTrace>    at Shouldly.ShouldlyCoreExtensions.AssertAwesomely[T](T actual, Func`2 specifiedConstraint, Object originalActual, Object originalExpected) in c:\TeamCity\buildAgent\work\10efaabfa8adbd4e\src\Shouldly\ShouldlyCoreExtensions.cs:line 18
   at Shouldly.ShouldBeTestExtensions.ShouldBe[T](T actual, T expected) in c:\TeamCity\buildAgent\work\10efaabfa8adbd4e\src\Shouldly\ShouldBeTestExtensions.cs:line 17
   at AutomationLayer.AdditionSteps.GivenTheBackgroundStepFails() in C:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\AutomationLayer\AdditionSteps.cs:line 25
   at lambda_method(Closure , IContextManager )
   at TechTalk.SpecFlow.Bindings.BindingInvoker.InvokeBinding(IBinding binding, IContextManager contextManager, Object[] arguments, ITestTracer testTracer, TimeSpan&amp; duration)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStepMatch(BindingMatch match, Object[] arguments)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep(StepInstance stepInstance)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()
   at Pickles.TestHarness.MsTest.FailingBackgroundFeature.ScenarioCleanup()
   at Pickles.TestHarness.MsTest.FailingBackgroundFeature.AddingSeveralNumbers(String firstNumber, String secondNumber, String thirdNumber, String result, String[] exampleTags) in C:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\MsTest\FailingBackground.feature:line 19
   at Pickles.TestHarness.MsTest.FailingBackgroundFeature.AddingSeveralNumbers_40()
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="78f6173e-dbfa-4052-be30-014bd67d09ce" testId="17bb28b8-a770-72be-af08-5a4b0847e4ea" testName="AddingSeveralNumbers_60" computerName="DESKTOP-5DEA222" duration="00:00:00.0022862" startTime="2017-02-06T17:10:55.0801010+01:00" endTime="2017-02-06T17:10:55.0850791+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="78f6173e-dbfa-4052-be30-014bd67d09ce">
      <Output>
        <StdOut>Given the background step fails
-&gt; error: 
    1
        should be
    2
        but was
    1
And the calculator has clean memory
-&gt; skipped because of previous errors
Given I have entered 60 into the calculator
-&gt; skipped because of previous errors
And I have entered 70 into the calculator
-&gt; skipped because of previous errors
And I have entered 130 into the calculator
-&gt; skipped because of previous errors
When I press add
-&gt; skipped because of previous errors
Then the result should be 260 on the screen
-&gt; skipped because of previous errors</StdOut>
        <ErrorInfo>
          <Message>Test method Pickles.TestHarness.MsTest.FailingBackgroundFeature.AddingSeveralNumbers_60 threw exception: 
Shouldly.ChuckedAWobbly: 
    1
        should be
    2
        but was
    1</Message>
          <StackTrace>    at Shouldly.ShouldlyCoreExtensions.AssertAwesomely[T](T actual, Func`2 specifiedConstraint, Object originalActual, Object originalExpected) in c:\TeamCity\buildAgent\work\10efaabfa8adbd4e\src\Shouldly\ShouldlyCoreExtensions.cs:line 18
   at Shouldly.ShouldBeTestExtensions.ShouldBe[T](T actual, T expected) in c:\TeamCity\buildAgent\work\10efaabfa8adbd4e\src\Shouldly\ShouldBeTestExtensions.cs:line 17
   at AutomationLayer.AdditionSteps.GivenTheBackgroundStepFails() in C:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\AutomationLayer\AdditionSteps.cs:line 25
   at lambda_method(Closure , IContextManager )
   at TechTalk.SpecFlow.Bindings.BindingInvoker.InvokeBinding(IBinding binding, IContextManager contextManager, Object[] arguments, ITestTracer testTracer, TimeSpan&amp; duration)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStepMatch(BindingMatch match, Object[] arguments)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep(StepInstance stepInstance)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()
   at Pickles.TestHarness.MsTest.FailingBackgroundFeature.ScenarioCleanup()
   at Pickles.TestHarness.MsTest.FailingBackgroundFeature.AddingSeveralNumbers(String firstNumber, String secondNumber, String thirdNumber, String result, String[] exampleTags) in C:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\MsTest\FailingBackground.feature:line 19
   at Pickles.TestHarness.MsTest.FailingBackgroundFeature.AddingSeveralNumbers_60()
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d8cb075f-3d81-4e72-b215-b9765db84238" testId="ca63316a-39e5-9545-3bca-f1839c7b4664" testName="AddTwoNumbers" computerName="DESKTOP-5DEA222" duration="00:00:00.0022680" startTime="2017-02-06T17:10:55.0900782+01:00" endTime="2017-02-06T17:10:55.0941181+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d8cb075f-3d81-4e72-b215-b9765db84238">
      <Output>
        <StdOut>Given the background step fails
-&gt; error: 
    1
        should be
    2
        but was
    1
And the calculator has clean memory
-&gt; skipped because of previous errors
Given I have entered 50 into the calculator
-&gt; skipped because of previous errors
And I have entered 70 into the calculator
-&gt; skipped because of previous errors
When I press add
-&gt; skipped because of previous errors
Then the result should be 120 on the screen
-&gt; skipped because of previous errors</StdOut>
        <ErrorInfo>
          <Message>Test method Pickles.TestHarness.MsTest.FailingBackgroundFeature.AddTwoNumbers threw exception: 
Shouldly.ChuckedAWobbly: 
    1
        should be
    2
        but was
    1</Message>
          <StackTrace>    at Shouldly.ShouldlyCoreExtensions.AssertAwesomely[T](T actual, Func`2 specifiedConstraint, Object originalActual, Object originalExpected) in c:\TeamCity\buildAgent\work\10efaabfa8adbd4e\src\Shouldly\ShouldlyCoreExtensions.cs:line 18
   at Shouldly.ShouldBeTestExtensions.ShouldBe[T](T actual, T expected) in c:\TeamCity\buildAgent\work\10efaabfa8adbd4e\src\Shouldly\ShouldBeTestExtensions.cs:line 17
   at AutomationLayer.AdditionSteps.GivenTheBackgroundStepFails() in C:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\AutomationLayer\AdditionSteps.cs:line 25
   at lambda_method(Closure , IContextManager )
   at TechTalk.SpecFlow.Bindings.BindingInvoker.InvokeBinding(IBinding binding, IContextManager contextManager, Object[] arguments, ITestTracer testTracer, TimeSpan&amp; duration)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStepMatch(BindingMatch match, Object[] arguments)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep(StepInstance stepInstance)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()
   at Pickles.TestHarness.MsTest.FailingBackgroundFeature.ScenarioCleanup()
   at Pickles.TestHarness.MsTest.FailingBackgroundFeature.AddTwoNumbers() in C:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\MsTest\FailingBackground.feature:line 12
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f1c88008-26fc-4fa6-8d95-3ce9bd32fb19" testId="18582dd5-09c7-ce67-9cb7-8e15a9cdffd0" testName="FailingFeatureFailingScenario" computerName="DESKTOP-5DEA222" duration="00:00:00.0054194" startTime="2017-02-06T17:10:55.0971096+01:00" endTime="2017-02-06T17:10:55.1060759+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f1c88008-26fc-4fa6-8d95-3ce9bd32fb19">
      <Output>
        <StdOut>Then failing step
-&gt; error: 
    true
        should be
    False
        but was
    True</StdOut>
        <ErrorInfo>
          <Message>Test method Pickles.TestHarness.MsTest.MinimalFeatures.FailingFeature.FailingFeatureFailingScenario threw exception: 
Shouldly.ChuckedAWobbly: 
    true
        should be
    False
        but was
    True</Message>
          <StackTrace>    at Shouldly.ShouldlyCoreExtensions.AssertAwesomely[T](T actual, Func`2 specifiedConstraint, Object originalActual, Object originalExpected) in c:\TeamCity\buildAgent\work\10efaabfa8adbd4e\src\Shouldly\ShouldlyCoreExtensions.cs:line 18
   at Shouldly.ShouldBeTestExtensions.ShouldBe[T](T actual, T expected) in c:\TeamCity\buildAgent\work\10efaabfa8adbd4e\src\Shouldly\ShouldBeTestExtensions.cs:line 17
   at AutomationLayer.MinimalFeatures.MinimalSteps.ThenFailingStep() in C:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\AutomationLayer\MinimalFeatures\MinimalSteps.cs:line 24
   at lambda_method(Closure , IContextManager )
   at TechTalk.SpecFlow.Bindings.BindingInvoker.InvokeBinding(IBinding binding, IContextManager contextManager, Object[] arguments, ITestTracer testTracer, TimeSpan&amp; duration)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStepMatch(BindingMatch match, Object[] arguments)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep(StepInstance stepInstance)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()
   at Pickles.TestHarness.MsTest.MinimalFeatures.FailingFeature.ScenarioCleanup()
   at Pickles.TestHarness.MsTest.MinimalFeatures.FailingFeature.FailingFeatureFailingScenario() in C:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\MsTest\Minimal Features\Failing.feature:line 10
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c8ae12ff-bf8e-4278-9305-2ae42602f7e3" testId="7e6c75c9-5365-7582-f701-20d37d3ff511" testName="FailingFeatureInconclusiveScenario" computerName="DESKTOP-5DEA222" duration="00:00:00.0018571" startTime="2017-02-06T17:10:55.1100747+01:00" endTime="2017-02-06T17:10:55.1140763+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Inconclusive" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c8ae12ff-bf8e-4278-9305-2ae42602f7e3">
      <Output>
        <StdOut>Then inconclusive step
-&gt; pending: MinimalSteps.ThenInconclusiveStep()</StdOut>
        <ErrorInfo>
          <Message>Assert.Inconclusive failed. One or more step definitions are not implemented yet.
  MinimalSteps.ThenInconclusiveStep()</Message>
          <StackTrace>   at lambda_method(Closure , String , Object[] )
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestInconclusive(String message)
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestPending(String message)
   at TechTalk.SpecFlow.ErrorHandling.ErrorProvider.ThrowPendingError(TestStatus testStatus, String message)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()
   at Pickles.TestHarness.MsTest.MinimalFeatures.FailingFeature.ScenarioCleanup()
   at Pickles.TestHarness.MsTest.MinimalFeatures.FailingFeature.FailingFeatureInconclusiveScenario() in C:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\MsTest\Minimal Features\Failing.feature:line 7
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="5ff42286-24f3-4edd-9434-5363de0dd1c3" testId="fa1e54c9-cdb0-8bb1-6764-9179c3b61825" testName="FailingFeaturePassingScenario" computerName="DESKTOP-5DEA222" duration="00:00:00.0004416" startTime="2017-02-06T17:10:55.1190817+01:00" endTime="2017-02-06T17:10:55.1211052+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5ff42286-24f3-4edd-9434-5363de0dd1c3">
      <Output>
        <StdOut>Then passing step
-&gt; done: MinimalSteps.ThenPassingStep() (0,0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="423412f5-4855-4a29-8a1a-d87a80d75231" testId="add44896-9236-510f-750d-eb49b89a7a65" testName="InconclusiveFeatureInconclusiveScenario" computerName="DESKTOP-5DEA222" duration="00:00:00.0013839" startTime="2017-02-06T17:10:55.1250791+01:00" endTime="2017-02-06T17:10:55.1291044+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Inconclusive" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="423412f5-4855-4a29-8a1a-d87a80d75231">
      <Output>
        <StdOut>Then inconclusive step
-&gt; pending: MinimalSteps.ThenInconclusiveStep()</StdOut>
        <ErrorInfo>
          <Message>Assert.Inconclusive failed. One or more step definitions are not implemented yet.
  MinimalSteps.ThenInconclusiveStep()</Message>
          <StackTrace>   at lambda_method(Closure , String , Object[] )
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestInconclusive(String message)
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestPending(String message)
   at TechTalk.SpecFlow.ErrorHandling.ErrorProvider.ThrowPendingError(TestStatus testStatus, String message)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()
   at Pickles.TestHarness.MsTest.MinimalFeatures.InconclusiveFeature.ScenarioCleanup()
   at Pickles.TestHarness.MsTest.MinimalFeatures.InconclusiveFeature.InconclusiveFeatureInconclusiveScenario() in C:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\MsTest\Minimal Features\Inconclusive.feature:line 7
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="eab6df6a-314f-4c53-9627-c7738185a565" testId="41cb0c4f-1c07-4937-29e8-dcc987caf94e" testName="InconclusiveFeaturePassingScenario" computerName="DESKTOP-5DEA222" duration="00:00:00.0004258" startTime="2017-02-06T17:10:55.1331048+01:00" endTime="2017-02-06T17:10:55.1361124+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="eab6df6a-314f-4c53-9627-c7738185a565">
      <Output>
        <StdOut>Then passing step
-&gt; done: MinimalSteps.ThenPassingStep() (0,0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="a026f702-66be-4336-8d69-9cbc377fec6c" testId="3af599bd-a8de-95a2-1ecc-194c7f8aceeb" testName="PassingFeaturePassingScenario" computerName="DESKTOP-5DEA222" duration="00:00:00.0004223" startTime="2017-02-06T17:10:55.1401045+01:00" endTime="2017-02-06T17:10:55.1441057+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a026f702-66be-4336-8d69-9cbc377fec6c">
      <Output>
        <StdOut>Then passing step
-&gt; done: MinimalSteps.ThenPassingStep() (0,0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="720f9d5d-974a-4761-b5f0-debba29d809a" testId="0e090158-43a1-1be8-47c2-13e1b2c9f8c7" testName="NotAutomatedScenario1" computerName="DESKTOP-5DEA222" duration="00:00:00.0058307" startTime="2017-02-06T17:10:55.1480765+01:00" endTime="2017-02-06T17:10:55.1566130+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Inconclusive" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="720f9d5d-974a-4761-b5f0-debba29d809a">
      <Output>
        <StdOut>Given unimplemented step
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Given(@"unimplemented step")]
        public void GivenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }

Given unimplemented step
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Given(@"unimplemented step")]
        public void GivenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }

When unimplemented step
-&gt; No matching step definition found for the step. Use the following code to create one:
        [When(@"unimplemented step")]
        public void WhenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }

Then unimplemented step
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Then(@"unimplemented step")]
        public void ThenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }</StdOut>
        <ErrorInfo>
          <Message>Assert.Inconclusive failed. No matching step definition found for one or more steps.
using System;
using TechTalk.SpecFlow;

namespace MyNamespace
{
    [Binding]
    public class StepDefinitions
    {
        [Given(@"unimplemented step")]
        public void GivenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }
        
        [When(@"unimplemented step")]
        public void WhenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }
        
        [Then(@"unimplemented step")]
        public void ThenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }
    }
}
</Message>
          <StackTrace>   at lambda_method(Closure , String , Object[] )
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestInconclusive(String message)
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestPending(String message)
   at TechTalk.SpecFlow.ErrorHandling.ErrorProvider.ThrowPendingError(TestStatus testStatus, String message)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()
   at Pickles.TestHarness.MsTest.NotAutomatedAtAllFeature.ScenarioCleanup()
   at Pickles.TestHarness.MsTest.NotAutomatedAtAllFeature.NotAutomatedScenario1() in C:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\MsTest\NotAutomatedAtAll.feature:line 9
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="85199848-c892-4c48-858f-efba83f45a3a" testId="067e1c92-2860-531b-28dc-c2863e91b7f5" testName="NotAutomatedScenario2" computerName="DESKTOP-5DEA222" duration="00:00:00.0037649" startTime="2017-02-06T17:10:55.1601105+01:00" endTime="2017-02-06T17:10:55.1656402+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Inconclusive" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="85199848-c892-4c48-858f-efba83f45a3a">
      <Output>
        <StdOut>Given unimplemented step
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Given(@"unimplemented step")]
        public void GivenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }

Given unimplemented step
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Given(@"unimplemented step")]
        public void GivenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }

When unimplemented step
-&gt; No matching step definition found for the step. Use the following code to create one:
        [When(@"unimplemented step")]
        public void WhenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }

Then unimplemented step
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Then(@"unimplemented step")]
        public void ThenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }</StdOut>
        <ErrorInfo>
          <Message>Assert.Inconclusive failed. No matching step definition found for one or more steps.
using System;
using TechTalk.SpecFlow;

namespace MyNamespace
{
    [Binding]
    public class StepDefinitions
    {
        [Given(@"unimplemented step")]
        public void GivenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }
        
        [When(@"unimplemented step")]
        public void WhenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }
        
        [Then(@"unimplemented step")]
        public void ThenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }
    }
}
</Message>
          <StackTrace>   at lambda_method(Closure , String , Object[] )
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestInconclusive(String message)
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestPending(String message)
   at TechTalk.SpecFlow.ErrorHandling.ErrorProvider.ThrowPendingError(TestStatus testStatus, String message)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()
   at Pickles.TestHarness.MsTest.NotAutomatedAtAllFeature.ScenarioCleanup()
   at Pickles.TestHarness.MsTest.NotAutomatedAtAllFeature.NotAutomatedScenario2() in C:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\MsTest\NotAutomatedAtAll.feature:line 14
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="7ea0380a-39a5-4261-8323-034fe8ba5b5d" testId="64813bea-d79b-d74b-adb5-1302eaf5641f" testName="NotAutomatedScenario3" computerName="DESKTOP-5DEA222" duration="00:00:00.0039928" startTime="2017-02-06T17:10:55.1711110+01:00" endTime="2017-02-06T17:10:55.1772036+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Inconclusive" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7ea0380a-39a5-4261-8323-034fe8ba5b5d">
      <Output>
        <StdOut>Given unimplemented step
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Given(@"unimplemented step")]
        public void GivenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }

Given unimplemented step
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Given(@"unimplemented step")]
        public void GivenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }

When unimplemented step
-&gt; No matching step definition found for the step. Use the following code to create one:
        [When(@"unimplemented step")]
        public void WhenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }

Then unimplemented step
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Then(@"unimplemented step")]
        public void ThenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }</StdOut>
        <ErrorInfo>
          <Message>Assert.Inconclusive failed. No matching step definition found for one or more steps.
using System;
using TechTalk.SpecFlow;

namespace MyNamespace
{
    [Binding]
    public class StepDefinitions
    {
        [Given(@"unimplemented step")]
        public void GivenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }
        
        [When(@"unimplemented step")]
        public void WhenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }
        
        [Then(@"unimplemented step")]
        public void ThenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }
    }
}
</Message>
          <StackTrace>   at lambda_method(Closure , String , Object[] )
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestInconclusive(String message)
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestPending(String message)
   at TechTalk.SpecFlow.ErrorHandling.ErrorProvider.ThrowPendingError(TestStatus testStatus, String message)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()
   at Pickles.TestHarness.MsTest.NotAutomatedAtAllFeature.ScenarioCleanup()
   at Pickles.TestHarness.MsTest.NotAutomatedAtAllFeature.NotAutomatedScenario3() in C:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\MsTest\NotAutomatedAtAll.feature:line 19
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="379df550-33ea-40d6-8493-defadc0271a8" testId="aa71fe8a-e5aa-f23d-c632-cfb3c587ca21" testName="TestMethod" computerName="DESKTOP-5DEA222" duration="00:00:00.0003168" startTime="2017-02-06T17:10:55.1812052+01:00" endTime="2017-02-06T17:10:55.1832161+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="379df550-33ea-40d6-8493-defadc0271a8">
    </UnitTestResult>
    <UnitTestResult executionId="28d3e694-dec4-4fd1-a9d8-4809b133381b" testId="78aeddd0-4ae5-6103-b7dd-e62b71148721" testName="AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet0_Pass_1" computerName="DESKTOP-5DEA222" duration="00:00:00.0009564" startTime="2017-02-06T17:10:55.1882065+01:00" endTime="2017-02-06T17:10:55.1912354+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="28d3e694-dec4-4fd1-a9d8-4809b133381b">
      <Output>
        <StdOut>Then the scenario will 'pass_1'
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("pass_1") (0,0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="99f3f185-7fde-42ef-876c-93cf8897be94" testId="ee74d71f-f824-19d9-866e-a408a95ffa99" testName="AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet0_Pass_2" computerName="DESKTOP-5DEA222" duration="00:00:00.0001995" startTime="2017-02-06T17:10:55.1952058+01:00" endTime="2017-02-06T17:10:55.1982051+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="99f3f185-7fde-42ef-876c-93cf8897be94">
      <Output>
        <StdOut>Then the scenario will 'pass_2'
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("pass_2") (0,0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="e36fd1e1-ff34-45f0-bce6-69ccc8ce70f3" testId="e30ef794-1ea7-a76a-356b-1668bca94630" testName="AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet1_Inconclusive_1" computerName="DESKTOP-5DEA222" duration="00:00:00.0012408" startTime="2017-02-06T17:10:55.2032042+01:00" endTime="2017-02-06T17:10:55.2062387+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Inconclusive" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e36fd1e1-ff34-45f0-bce6-69ccc8ce70f3">
      <Output>
        <StdOut>Then the scenario will 'inconclusive_1'
-&gt; pending: ScenarioOutlineSteps.ThenTheScenarioWill("inconclusive_1")</StdOut>
        <ErrorInfo>
          <Message>Assert.Inconclusive failed. One or more step definitions are not implemented yet.
  ScenarioOutlineSteps.ThenTheScenarioWill("inconclusive_1")</Message>
          <StackTrace>   at lambda_method(Closure , String , Object[] )
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestInconclusive(String message)
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestPending(String message)
   at TechTalk.SpecFlow.ErrorHandling.ErrorProvider.ThrowPendingError(TestStatus testStatus, String message)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.ScenarioCleanup()
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.AndWeCanGoTotallyBonkersWithMultipleExampleSections_(String result, String[] exampleTags) in C:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\MsTest\ScenarioOutlines.feature:line 45
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet1_Inconclusive_1()
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="24a636a0-e978-444d-915b-a5612c3936d4" testId="4d5f7893-139c-db00-8823-de561780758d" testName="AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet1_Inconclusive_2" computerName="DESKTOP-5DEA222" duration="00:00:00.0010449" startTime="2017-02-06T17:10:55.2102047+01:00" endTime="2017-02-06T17:10:55.2122033+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Inconclusive" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="24a636a0-e978-444d-915b-a5612c3936d4">
      <Output>
        <StdOut>Then the scenario will 'inconclusive_2'
-&gt; pending: ScenarioOutlineSteps.ThenTheScenarioWill("inconclusive_2")</StdOut>
        <ErrorInfo>
          <Message>Assert.Inconclusive failed. One or more step definitions are not implemented yet.
  ScenarioOutlineSteps.ThenTheScenarioWill("inconclusive_2")</Message>
          <StackTrace>   at lambda_method(Closure , String , Object[] )
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestInconclusive(String message)
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestPending(String message)
   at TechTalk.SpecFlow.ErrorHandling.ErrorProvider.ThrowPendingError(TestStatus testStatus, String message)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.ScenarioCleanup()
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.AndWeCanGoTotallyBonkersWithMultipleExampleSections_(String result, String[] exampleTags) in C:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\MsTest\ScenarioOutlines.feature:line 45
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet1_Inconclusive_2()
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="e5a559bf-b05d-4bf4-9ecd-9e1ed69be9a2" testId="78a6b3a3-679e-ee71-7ff5-c9338e3be6c2" testName="AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet2_Fail_1" computerName="DESKTOP-5DEA222" duration="00:00:00.0020973" startTime="2017-02-06T17:10:55.2172325+01:00" endTime="2017-02-06T17:10:55.2222324+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e5a559bf-b05d-4bf4-9ecd-9e1ed69be9a2">
      <Output>
        <StdOut>Then the scenario will 'fail_1'
-&gt; error: 
    true
        should be
    False
        but was
    True</StdOut>
        <ErrorInfo>
          <Message>Test method Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet2_Fail_1 threw exception: 
Shouldly.ChuckedAWobbly: 
    true
        should be
    False
        but was
    True</Message>
          <StackTrace>    at Shouldly.ShouldlyCoreExtensions.AssertAwesomely[T](T actual, Func`2 specifiedConstraint, Object originalActual, Object originalExpected) in c:\TeamCity\buildAgent\work\10efaabfa8adbd4e\src\Shouldly\ShouldlyCoreExtensions.cs:line 18
   at Shouldly.ShouldBeTestExtensions.ShouldBe[T](T actual, T expected) in c:\TeamCity\buildAgent\work\10efaabfa8adbd4e\src\Shouldly\ShouldBeTestExtensions.cs:line 17
   at AutomationLayer.ScenarioOutlineSteps.ThenTheScenarioWill(String result) in C:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\AutomationLayer\ScenarioOutlineSteps.cs:line 21
   at lambda_method(Closure , IContextManager , String )
   at TechTalk.SpecFlow.Bindings.BindingInvoker.InvokeBinding(IBinding binding, IContextManager contextManager, Object[] arguments, ITestTracer testTracer, TimeSpan&amp; duration)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStepMatch(BindingMatch match, Object[] arguments)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep(StepInstance stepInstance)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.ScenarioCleanup()
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.AndWeCanGoTotallyBonkersWithMultipleExampleSections_(String result, String[] exampleTags) in C:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\MsTest\ScenarioOutlines.feature:line 45
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet2_Fail_1()
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6240d9de-e95c-4983-8c6f-bb8b564ffe2c" testId="40304968-0dee-8e41-4f42-20809899a9d0" testName="AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet2_Fail_2" computerName="DESKTOP-5DEA222" duration="00:00:00.0019863" startTime="2017-02-06T17:10:55.2262395+01:00" endTime="2017-02-06T17:10:55.2302371+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6240d9de-e95c-4983-8c6f-bb8b564ffe2c">
      <Output>
        <StdOut>Then the scenario will 'fail_2'
-&gt; error: 
    true
        should be
    False
        but was
    True</StdOut>
        <ErrorInfo>
          <Message>Test method Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet2_Fail_2 threw exception: 
Shouldly.ChuckedAWobbly: 
    true
        should be
    False
        but was
    True</Message>
          <StackTrace>    at Shouldly.ShouldlyCoreExtensions.AssertAwesomely[T](T actual, Func`2 specifiedConstraint, Object originalActual, Object originalExpected) in c:\TeamCity\buildAgent\work\10efaabfa8adbd4e\src\Shouldly\ShouldlyCoreExtensions.cs:line 18
   at Shouldly.ShouldBeTestExtensions.ShouldBe[T](T actual, T expected) in c:\TeamCity\buildAgent\work\10efaabfa8adbd4e\src\Shouldly\ShouldBeTestExtensions.cs:line 17
   at AutomationLayer.ScenarioOutlineSteps.ThenTheScenarioWill(String result) in C:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\AutomationLayer\ScenarioOutlineSteps.cs:line 21
   at lambda_method(Closure , IContextManager , String )
   at TechTalk.SpecFlow.Bindings.BindingInvoker.InvokeBinding(IBinding binding, IContextManager contextManager, Object[] arguments, ITestTracer testTracer, TimeSpan&amp; duration)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStepMatch(BindingMatch match, Object[] arguments)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep(StepInstance stepInstance)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.ScenarioCleanup()
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.AndWeCanGoTotallyBonkersWithMultipleExampleSections_(String result, String[] exampleTags) in C:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\MsTest\ScenarioOutlines.feature:line 45
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet2_Fail_2()
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="bd01c6a1-7886-4e91-9d6f-08c7e7cfaa3e" testId="72d470fa-c19a-1302-1fcf-eb104ea36048" testName="DealCorrectlyWithBackslashesInTheExamples_CTemp" computerName="DESKTOP-5DEA222" duration="00:00:00.0005720" startTime="2017-02-06T17:10:55.2352113+01:00" endTime="2017-02-06T17:10:55.2382427+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="bd01c6a1-7886-4e91-9d6f-08c7e7cfaa3e">
      <Output>
        <StdOut>When I have backslashes in the value, for example a 'c:\Temp\'
-&gt; done: ScenarioOutlineSteps.WhenIHaveBackslashesInTheValueForExampleAFilePath("c:\Temp\") (0,0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6c8d5514-f328-4a6b-9626-56de18a92994" testId="ce4a9bf6-5fc5-0a40-2cbe-242a59cb1296" testName="DealCorrectlyWithOverlongExampleValues_PleaseEnterAValidTwoLetterCountryCodeE_G_DE" computerName="DESKTOP-5DEA222" duration="00:00:00.0006660" startTime="2017-02-06T17:10:55.2422039+01:00" endTime="2017-02-06T17:10:55.2442353+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6c8d5514-f328-4a6b-9626-56de18a92994">
      <Output>
        <StdOut>When I have a field with value 'Please enter a valid two letter country code (e.g. DE)!'
-&gt; done: ScenarioOutlineSteps.WhenIHaveAFieldWithValue("Please enter a va...") (0,0s)
And I have a field with value 'This is just a very very very veery long error message!'
-&gt; done: ScenarioOutlineSteps.WhenIHaveAFieldWithValue("This is just a ve...") (0,0s)
Then the scenario will 'pass_1'
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("pass_1") (0,0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6488a267-deec-495b-965d-bd873b6fd994" testId="d09c033d-0065-cbeb-bd7c-ee8b6460688f" testName="DealCorrectlyWithParenthesisInTheExamples_ThisIsADescriptionAndMore" computerName="DESKTOP-5DEA222" duration="00:00:00.0008284" startTime="2017-02-06T17:10:55.2492048+01:00" endTime="2017-02-06T17:10:55.2522401+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6488a267-deec-495b-965d-bd873b6fd994">
      <Output>
        <StdOut>When I have parenthesis in the value, for example an 'This is a description (and more)'
-&gt; done: ScenarioOutlineSteps.WhenIHaveParenthesisInTheValueForExampleAnOverlyDescriptiveField("This is a descrip...") (0,0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d92c0861-ba31-40fc-960c-bc48d2f35daa" testId="2c8f1abb-446c-6683-6327-8ec4ccd46e1a" testName="ThisIsAScenarioOutlineWhereAllScenariosPass_Pass_1" computerName="DESKTOP-5DEA222" duration="00:00:00.0003417" startTime="2017-02-06T17:10:55.2562037+01:00" endTime="2017-02-06T17:10:55.2587393+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d92c0861-ba31-40fc-960c-bc48d2f35daa">
      <Output>
        <StdOut>Then the scenario will 'pass_1'
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("pass_1") (0,0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="ff531493-ddfc-42d6-b034-f0d5bb0764f2" testId="9efc5df4-5f77-a670-8622-976418721b8f" testName="ThisIsAScenarioOutlineWhereAllScenariosPass_Pass_2" computerName="DESKTOP-5DEA222" duration="00:00:00.0001829" startTime="2017-02-06T17:10:55.2622118+01:00" endTime="2017-02-06T17:10:55.2647102+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ff531493-ddfc-42d6-b034-f0d5bb0764f2">
      <Output>
        <StdOut>Then the scenario will 'pass_2'
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("pass_2") (0,0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="25a9d752-f77c-43b7-b2e2-1dc752d3e7a4" testId="9bb2410c-d8c6-90b8-75cd-5c93dc903745" testName="ThisIsAScenarioOutlineWhereAllScenariosPass_Pass_3" computerName="DESKTOP-5DEA222" duration="00:00:00.0001829" startTime="2017-02-06T17:10:55.2697279+01:00" endTime="2017-02-06T17:10:55.2712390+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="25a9d752-f77c-43b7-b2e2-1dc752d3e7a4">
      <Output>
        <StdOut>Then the scenario will 'pass_3'
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("pass_3") (0,0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="436f9511-6345-46b2-8c8b-1f9bc4dae751" testId="05c22c90-eaaa-d3c2-bd2d-36c2df85528e" testName="ThisIsAScenarioOutlineWhereOneScenarioFails_Fail_1" computerName="DESKTOP-5DEA222" duration="00:00:00.0026236" startTime="2017-02-06T17:10:55.2753682+01:00" endTime="2017-02-06T17:10:55.2803594+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="436f9511-6345-46b2-8c8b-1f9bc4dae751">
      <Output>
        <StdOut>Then the scenario will 'fail_1'
-&gt; error: 
    true
        should be
    False
        but was
    True</StdOut>
        <ErrorInfo>
          <Message>Test method Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.ThisIsAScenarioOutlineWhereOneScenarioFails_Fail_1 threw exception: 
Shouldly.ChuckedAWobbly: 
    true
        should be
    False
        but was
    True</Message>
          <StackTrace>    at Shouldly.ShouldlyCoreExtensions.AssertAwesomely[T](T actual, Func`2 specifiedConstraint, Object originalActual, Object originalExpected) in c:\TeamCity\buildAgent\work\10efaabfa8adbd4e\src\Shouldly\ShouldlyCoreExtensions.cs:line 18
   at Shouldly.ShouldBeTestExtensions.ShouldBe[T](T actual, T expected) in c:\TeamCity\buildAgent\work\10efaabfa8adbd4e\src\Shouldly\ShouldBeTestExtensions.cs:line 17
   at AutomationLayer.ScenarioOutlineSteps.ThenTheScenarioWill(String result) in C:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\AutomationLayer\ScenarioOutlineSteps.cs:line 21
   at lambda_method(Closure , IContextManager , String )
   at TechTalk.SpecFlow.Bindings.BindingInvoker.InvokeBinding(IBinding binding, IContextManager contextManager, Object[] arguments, ITestTracer testTracer, TimeSpan&amp; duration)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStepMatch(BindingMatch match, Object[] arguments)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep(StepInstance stepInstance)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.ScenarioCleanup()
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.ThisIsAScenarioOutlineWhereOneScenarioFails(String result, String[] exampleTags) in C:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\MsTest\ScenarioOutlines.feature:line 34
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.ThisIsAScenarioOutlineWhereOneScenarioFails_Fail_1()
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0d0eca73-92d1-458a-ad89-676742029145" testId="e64af447-d4dc-7221-865a-703128db7b90" testName="ThisIsAScenarioOutlineWhereOneScenarioFails_Pass_1" computerName="DESKTOP-5DEA222" duration="00:00:00.0001979" startTime="2017-02-06T17:10:55.2843408+01:00" endTime="2017-02-06T17:10:55.2873402+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0d0eca73-92d1-458a-ad89-676742029145">
      <Output>
        <StdOut>Then the scenario will 'pass_1'
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("pass_1") (0,0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="ec265078-a919-473d-aae6-81118b2b602d" testId="b04f3200-80ca-d47f-0c01-8a37e5c952e6" testName="ThisIsAScenarioOutlineWhereOneScenarioFails_Pass_2" computerName="DESKTOP-5DEA222" duration="00:00:00.0001675" startTime="2017-02-06T17:10:55.2913556+01:00" endTime="2017-02-06T17:10:55.2933352+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ec265078-a919-473d-aae6-81118b2b602d">
      <Output>
        <StdOut>Then the scenario will 'pass_2'
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("pass_2") (0,0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b83f21b7-6f17-4b08-8944-dca64a9e4864" testId="8c97c958-0c5d-1594-2cc5-02c96df8fc9b" testName="ThisIsAScenarioOutlineWhereOneScenarioIsInconclusive_Inconclusive_1" computerName="DESKTOP-5DEA222" duration="00:00:00.0012389" startTime="2017-02-06T17:10:55.2963638+01:00" endTime="2017-02-06T17:10:55.3003385+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Inconclusive" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b83f21b7-6f17-4b08-8944-dca64a9e4864">
      <Output>
        <StdOut>Then the scenario will 'inconclusive_1'
-&gt; pending: ScenarioOutlineSteps.ThenTheScenarioWill("inconclusive_1")</StdOut>
        <ErrorInfo>
          <Message>Assert.Inconclusive failed. One or more step definitions are not implemented yet.
  ScenarioOutlineSteps.ThenTheScenarioWill("inconclusive_1")</Message>
          <StackTrace>   at lambda_method(Closure , String , Object[] )
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestInconclusive(String message)
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestPending(String message)
   at TechTalk.SpecFlow.ErrorHandling.ErrorProvider.ThrowPendingError(TestStatus testStatus, String message)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.ScenarioCleanup()
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.ThisIsAScenarioOutlineWhereOneScenarioIsInconclusive(String result, String[] exampleTags) in C:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\MsTest\ScenarioOutlines.feature:line 21
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.ThisIsAScenarioOutlineWhereOneScenarioIsInconclusive_Inconclusive_1()
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6345903e-4f6b-44e9-b158-743e9679a8e5" testId="6e54c207-a3b1-f181-06be-066795ac26e1" testName="ThisIsAScenarioOutlineWhereOneScenarioIsInconclusive_Pass_1" computerName="DESKTOP-5DEA222" duration="00:00:00.0001710" startTime="2017-02-06T17:10:55.3053348+01:00" endTime="2017-02-06T17:10:55.3073346+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6345903e-4f6b-44e9-b158-743e9679a8e5">
      <Output>
        <StdOut>Then the scenario will 'pass_1'
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("pass_1") (0,0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="5503a3d1-c5b4-4116-aaa8-53e6dad5e018" testId="8f2bb160-fa82-a566-570e-51eeb5237e95" testName="ThisIsAScenarioOutlineWhereOneScenarioIsInconclusive_Pass_2" computerName="DESKTOP-5DEA222" duration="00:00:00.0002449" startTime="2017-02-06T17:10:55.3113358+01:00" endTime="2017-02-06T17:10:55.3133372+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5503a3d1-c5b4-4116-aaa8-53e6dad5e018">
      <Output>
        <StdOut>Then the scenario will 'pass_2'
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("pass_2") (0,0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="ed45ebe5-d187-4dba-9ff8-c7301500a083" testId="73c03e74-0c0b-5c1d-2193-91dd98f1f95e" testName="ThisIsAScenarioOutlineWithAmpersand_Pass_1" computerName="DESKTOP-5DEA222" duration="00:00:00.0005353" startTime="2017-02-06T17:10:55.3183557+01:00" endTime="2017-02-06T17:10:55.3223458+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ed45ebe5-d187-4dba-9ff8-c7301500a083">
      <Output>
        <StdOut>Given the calculator has clean memory
-&gt; done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0,0s)
Then the scenario will 'pass_1'
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("pass_1") (0,0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="ce5816d1-1275-43c2-9908-fc8967f16e2c" testId="763d7e52-45c9-3e45-478d-dd6659bc69ba" testName="ThisIsAScenarioOutlineWithGermanUmlautsAouBAOU_Pass_1" computerName="DESKTOP-5DEA222" duration="00:00:00.0003409" startTime="2017-02-06T17:10:55.3253364+01:00" endTime="2017-02-06T17:10:55.3313346+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ce5816d1-1275-43c2-9908-fc8967f16e2c">
      <Output>
        <StdOut>Given the calculator has clean memory
-&gt; done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0,0s)
Then the scenario will 'pass_1'
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("pass_1") (0,0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="421e02cd-b167-4854-aec5-95e59c3b80c5" testId="f8369e2e-c5ec-dade-ad85-e2c56909c853" testName="ThisIsAScenarioOutlineWithParenthesesHyphenAndComma10_2030_40_Pass_1" computerName="DESKTOP-5DEA222" duration="00:00:00.0003563" startTime="2017-02-06T17:10:55.3363409+01:00" endTime="2017-02-06T17:10:55.3383387+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="421e02cd-b167-4854-aec5-95e59c3b80c5">
      <Output>
        <StdOut>Given the calculator has clean memory
-&gt; done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0,0s)
Then the scenario will 'pass_1'
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("pass_1") (0,0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="e4913852-5b3e-4a2f-b787-1af56a7446c4" testId="3fe8806f-fabb-1deb-7e27-c59578f16da3" testName="ThisIsAScenarioWithParenthesesHyphenAndComma10_2030_40" computerName="DESKTOP-5DEA222" duration="00:00:00.0003223" startTime="2017-02-06T17:10:55.3423632+01:00" endTime="2017-02-06T17:10:55.3443345+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e4913852-5b3e-4a2f-b787-1af56a7446c4">
      <Output>
        <StdOut>Given the calculator has clean memory
-&gt; done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0,0s)
Given I have entered 50 into the calculator
-&gt; done: AdditionSteps.GivenIHaveEnteredIntoTheCalculator(50) (0,0s)
And I have entered 70 into the calculator
-&gt; done: AdditionSteps.GivenIHaveEnteredIntoTheCalculator(70) (0,0s)
When I press add
-&gt; done: AdditionSteps.WhenIPressAdd() (0,0s)
Then the result should be 120 on the screen
-&gt; done: AdditionSteps.ThenTheResultShouldBeOnTheScreen(120) (0,0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="72b5ae3a-afbb-4fef-8616-618654294f80" testId="b891bd24-e5b1-222b-8d70-96a2ba7b0807" testName="ThisScenarioContainsExamplesWithRegex_SpecialCharacters_Variant0" computerName="DESKTOP-5DEA222" duration="00:00:00.0014273" startTime="2017-02-06T17:10:55.3483365+01:00" endTime="2017-02-06T17:10:55.3523369+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="72b5ae3a-afbb-4fef-8616-618654294f80">
      <Output>
        <StdOut>Given the calculator has clean memory
-&gt; done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0,0s)
When I have special characters for regexes in the value, for example a '**'
-&gt; done: ScenarioOutlineSteps.WhenIHaveSpecialCharactersForRegexesInTheValueForExampleARegex("**") (0,0s)
Then the scenario will 'PASS'
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("PASS") (0,0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c7f4b4f7-734c-41d7-863a-73a058b6684c" testId="fb3ec8b2-a410-ecc8-265b-29bfd3772553" testName="ThisScenarioContainsExamplesWithRegex_SpecialCharacters_Variant1" computerName="DESKTOP-5DEA222" duration="00:00:00.0002125" startTime="2017-02-06T17:10:55.3563373+01:00" endTime="2017-02-06T17:10:55.3583434+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c7f4b4f7-734c-41d7-863a-73a058b6684c">
      <Output>
        <StdOut>Given the calculator has clean memory
-&gt; done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0,0s)
When I have special characters for regexes in the value, for example a '++'
-&gt; done: ScenarioOutlineSteps.WhenIHaveSpecialCharactersForRegexesInTheValueForExampleARegex("++") (0,0s)
Then the scenario will 'PASS'
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("PASS") (0,0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f88d041d-6c5d-4fe7-8853-4dff41a2b1f2" testId="a3bd6f67-daac-1ebc-5894-1d73dbe8d707" testName="ThisScenarioContainsExamplesWithRegex_SpecialCharacters_Variant2" computerName="DESKTOP-5DEA222" duration="00:00:00.0002176" startTime="2017-02-06T17:10:55.3623434+01:00" endTime="2017-02-06T17:10:55.3648714+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f88d041d-6c5d-4fe7-8853-4dff41a2b1f2">
      <Output>
        <StdOut>Given the calculator has clean memory
-&gt; done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0,0s)
When I have special characters for regexes in the value, for example a '.*'
-&gt; done: ScenarioOutlineSteps.WhenIHaveSpecialCharactersForRegexesInTheValueForExampleARegex(".*") (0,0s)
Then the scenario will 'PASS'
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("PASS") (0,0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6d92ba39-2017-4597-9ddc-b66a1dc001b6" testId="7699da71-b819-eb00-3894-2f0be7eec39c" testName="ThisScenarioContainsExamplesWithRegex_SpecialCharacters_Variant3" computerName="DESKTOP-5DEA222" duration="00:00:00.0002133" startTime="2017-02-06T17:10:55.3708487+01:00" endTime="2017-02-06T17:10:55.3728829+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6d92ba39-2017-4597-9ddc-b66a1dc001b6">
      <Output>
        <StdOut>Given the calculator has clean memory
-&gt; done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0,0s)
When I have special characters for regexes in the value, for example a '[]'
-&gt; done: ScenarioOutlineSteps.WhenIHaveSpecialCharactersForRegexesInTheValueForExampleARegex("[]") (0,0s)
Then the scenario will 'PASS'
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("PASS") (0,0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="cc8a447e-aedf-4f4f-8b90-cf492773712b" testId="d253522e-be41-9b3a-247a-ca440d4ac588" testName="ThisScenarioContainsExamplesWithRegex_SpecialCharacters_Variant4" computerName="DESKTOP-5DEA222" duration="00:00:00.0002010" startTime="2017-02-06T17:10:55.3768730+01:00" endTime="2017-02-06T17:10:55.3788527+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="cc8a447e-aedf-4f4f-8b90-cf492773712b">
      <Output>
        <StdOut>Given the calculator has clean memory
-&gt; done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0,0s)
When I have special characters for regexes in the value, for example a '{}'
-&gt; done: ScenarioOutlineSteps.WhenIHaveSpecialCharactersForRegexesInTheValueForExampleARegex("{}") (0,0s)
Then the scenario will 'PASS'
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("PASS") (0,0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="197ebfef-0875-417e-9fab-e0030978e3a9" testId="cca2404a-911a-a50e-9898-327264f0ea76" testName="ThisScenarioContainsExamplesWithRegex_SpecialCharacters_Variant5" computerName="DESKTOP-5DEA222" duration="00:00:00.0004009" startTime="2017-02-06T17:10:55.3838621+01:00" endTime="2017-02-06T17:10:55.3868551+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="197ebfef-0875-417e-9fab-e0030978e3a9">
      <Output>
        <StdOut>Given the calculator has clean memory
-&gt; done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0,0s)
When I have special characters for regexes in the value, for example a '()'
-&gt; done: ScenarioOutlineSteps.WhenIHaveSpecialCharactersForRegexesInTheValueForExampleARegex("()") (0,0s)
Then the scenario will 'PASS'
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("PASS") (0,0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="951f42cc-b91f-4935-b6a1-e3666ba2d7b4" testId="22ccdb90-02c8-97c1-e2a1-6bec4f044d99" testName="ThisScenarioContainsExamplesWithRegex_SpecialCharacters_Variant6" computerName="DESKTOP-5DEA222" duration="00:00:00.0003385" startTime="2017-02-06T17:10:55.3908527+01:00" endTime="2017-02-06T17:10:55.3928537+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="951f42cc-b91f-4935-b6a1-e3666ba2d7b4">
      <Output>
        <StdOut>Given the calculator has clean memory
-&gt; done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0,0s)
When I have special characters for regexes in the value, for example a '^.*(?&lt;foo&gt;BAR)\s[^0-9]{3,4}A+$'
-&gt; done: ScenarioOutlineSteps.WhenIHaveSpecialCharactersForRegexesInTheValueForExampleARegex("^.*(?&lt;foo&gt;BAR)\s[...") (0,0s)
Then the scenario will 'PASS'
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("PASS") (0,0s)</StdOut>
      </Output>
    </UnitTestResult>
  </Results>
</TestRun>