<?xml version="1.0" encoding="utf-8" standalone="no"?>
<test-run id="2" testcasecount="45" result="Failed" total="45" passed="29" failed="9" inconclusive="6" skipped="1" asserts="0" engine-version="3.0.5797.27553" clr-version="4.0.30319.42000" start-time="2016-09-28 07:33:25Z" end-time="2016-09-28 07:33:25Z" duration="0.770723">
  <command-line><![CDATA["C:\DevProjects\Tools\pickles\\test-harness\packages\NUnit.Console.3.0.0\tools\nunit3-console.exe"  "C:\DevProjects\Tools\pickles\\test-harness\nunit3\bin\Debug\nunit3Harness.dll" /result="C:\DevProjects\Tools\pickles\\results-example-nunit3.xml"]]></command-line>
  <test-suite type="Assembly" id="0-1066" name="nunit3Harness.dll" fullname="C:\DevProjects\Tools\pickles\test-harness\nunit3\bin\Debug\nunit3Harness.dll" runstate="Runnable" testcasecount="45" result="Failed" site="Child" start-time="2016-09-28 07:33:25Z" end-time="2016-09-28 07:33:25Z" duration="0.636880" total="45" passed="29" failed="9" inconclusive="6" skipped="1" asserts="0">
    <environment framework-version="3.0.5797.27534" clr-version="4.0.30319.42000" os-version="Microsoft Windows NT 10.0.10240.0" platform="Win32NT" cwd="C:\DevProjects\Tools\pickles" machine-name="AS0283" user="HKR" user-domain="OEVERMANN" culture="de-DE" uiculture="en-US" os-architecture="x64" />
    <settings>
      <setting name="WorkDirectory" value="C:\DevProjects\Tools\pickles" />
      <setting name="NumberOfTestWorkers" value="8" />
    </settings>
    <properties>
      <property name="_PID" value="6272" />
      <property name="_APPDOMAIN" value="test-domain-" />
    </properties>
    <failure>
      <message><![CDATA[One or more child tests had errors]]></message>
    </failure>
    <test-suite type="TestSuite" id="0-1067" name="Pickles" fullname="Pickles" runstate="Runnable" testcasecount="45" result="Failed" site="Child" start-time="2016-09-28 07:33:25Z" end-time="2016-09-28 07:33:25Z" duration="0.629982" total="45" passed="29" failed="9" inconclusive="6" skipped="1" asserts="0">
      <failure>
        <message><![CDATA[One or more child tests had errors]]></message>
      </failure>
      <test-suite type="TestSuite" id="0-1068" name="TestHarness" fullname="Pickles.TestHarness" runstate="Runnable" testcasecount="45" result="Failed" site="Child" start-time="2016-09-28 07:33:25Z" end-time="2016-09-28 07:33:25Z" duration="0.629910" total="45" passed="29" failed="9" inconclusive="6" skipped="1" asserts="0">
        <failure>
          <message><![CDATA[One or more child tests had errors]]></message>
        </failure>
        <test-suite type="TestSuite" id="0-1069" name="nunit3" fullname="Pickles.TestHarness.nunit3" runstate="Runnable" testcasecount="45" result="Failed" site="Child" start-time="2016-09-28 07:33:25Z" end-time="2016-09-28 07:33:25Z" duration="0.629906" total="45" passed="29" failed="9" inconclusive="6" skipped="1" asserts="0">
          <failure>
            <message><![CDATA[One or more child tests had errors]]></message>
          </failure>
          <test-suite type="TestFixture" id="0-1000" name="AdditionFeature" fullname="Pickles.TestHarness.nunit3.AdditionFeature" classname="Pickles.TestHarness.nunit3.AdditionFeature" runstate="Runnable" testcasecount="6" result="Failed" site="Child" start-time="2016-09-28 07:33:25Z" end-time="2016-09-28 07:33:25Z" duration="0.560098" total="6" passed="3" failed="1" inconclusive="1" skipped="1" asserts="0">
            <properties>
              <property name="Description" value="Addition" />
            </properties>
            <failure>
              <message><![CDATA[One or more child tests had errors]]></message>
            </failure>
            <test-suite type="ParameterizedMethod" id="0-1003" name="AddingSeveralNumbers" fullname="Pickles.TestHarness.nunit3.AdditionFeature.AddingSeveralNumbers" runstate="Runnable" testcasecount="2" result="Passed" start-time="2016-09-28 07:33:25Z" end-time="2016-09-28 07:33:25Z" duration="0.149596" total="2" passed="2" failed="0" inconclusive="0" skipped="0" asserts="0">
              <properties>
                <property name="Description" value="Adding several numbers" />
                <property name="Category" value="tag2" />
              </properties>
              <test-case id="0-1001" name="AddingSeveralNumbers(&quot;60&quot;,&quot;70&quot;,&quot;130&quot;,&quot;260&quot;,null)" fullname="Pickles.TestHarness.nunit3.AdditionFeature.AddingSeveralNumbers(&quot;60&quot;,&quot;70&quot;,&quot;130&quot;,&quot;260&quot;,null)" methodname="AddingSeveralNumbers" classname="Pickles.TestHarness.nunit3.AdditionFeature" runstate="Runnable" seed="798259755" result="Passed" start-time="2016-09-28 07:33:25Z" end-time="2016-09-28 07:33:25Z" duration="0.145978" asserts="0">
                <output><![CDATA[Given the calculator has clean memory
-> done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0,0s)
Given I have entered 60 into the calculator
-> done: AdditionSteps.GivenIHaveEnteredIntoTheCalculator(60) (0,0s)
And I have entered 70 into the calculator
-> done: AdditionSteps.GivenIHaveEnteredIntoTheCalculator(70) (0,0s)
And I have entered 130 into the calculator
-> done: AdditionSteps.GivenIHaveEnteredIntoTheCalculator(130) (0,0s)
When I press add
-> done: AdditionSteps.WhenIPressAdd() (0,0s)
Then the result should be 260 on the screen
-> done: AdditionSteps.ThenTheResultShouldBeOnTheScreen(260) (0,0s)
]]></output>
              </test-case>
              <test-case id="0-1002" name="AddingSeveralNumbers(&quot;40&quot;,&quot;50&quot;,&quot;90&quot;,&quot;180&quot;,null)" fullname="Pickles.TestHarness.nunit3.AdditionFeature.AddingSeveralNumbers(&quot;40&quot;,&quot;50&quot;,&quot;90&quot;,&quot;180&quot;,null)" methodname="AddingSeveralNumbers" classname="Pickles.TestHarness.nunit3.AdditionFeature" runstate="Runnable" seed="1396928079" result="Passed" start-time="2016-09-28 07:33:25Z" end-time="2016-09-28 07:33:25Z" duration="0.000290" asserts="0">
                <output><![CDATA[Given the calculator has clean memory
-> done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0,0s)
Given I have entered 40 into the calculator
-> done: AdditionSteps.GivenIHaveEnteredIntoTheCalculator(40) (0,0s)
And I have entered 50 into the calculator
-> done: AdditionSteps.GivenIHaveEnteredIntoTheCalculator(50) (0,0s)
And I have entered 90 into the calculator
-> done: AdditionSteps.GivenIHaveEnteredIntoTheCalculator(90) (0,0s)
When I press add
-> done: AdditionSteps.WhenIPressAdd() (0,0s)
Then the result should be 180 on the screen
-> done: AdditionSteps.ThenTheResultShouldBeOnTheScreen(180) (0,0s)
]]></output>
              </test-case>
            </test-suite>
            <test-case id="0-1004" name="AddTwoNumbers" fullname="Pickles.TestHarness.nunit3.AdditionFeature.AddTwoNumbers" methodname="AddTwoNumbers" classname="Pickles.TestHarness.nunit3.AdditionFeature" runstate="Runnable" seed="575529885" result="Passed" start-time="2016-09-28 07:33:25Z" end-time="2016-09-28 07:33:25Z" duration="0.000356" asserts="0">
              <properties>
                <property name="Description" value="Add two numbers" />
                <property name="Category" value="tag1" />
              </properties>
              <output><![CDATA[Given the calculator has clean memory
-> done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0,0s)
Given I have entered 1 into the calculator
-> done: AdditionSteps.GivenIHaveEnteredIntoTheCalculator(1) (0,0s)
And I have entered 2 into the calculator
-> done: AdditionSteps.GivenIHaveEnteredIntoTheCalculator(2) (0,0s)
When I press add
-> done: AdditionSteps.WhenIPressAdd() (0,0s)
Then the result should be 3 on the screen
-> done: AdditionSteps.ThenTheResultShouldBeOnTheScreen(3) (0,0s)
]]></output>
            </test-case>
            <test-case id="0-1005" name="FailToAddTwoNumbers" fullname="Pickles.TestHarness.nunit3.AdditionFeature.FailToAddTwoNumbers" methodname="FailToAddTwoNumbers" classname="Pickles.TestHarness.nunit3.AdditionFeature" runstate="Runnable" seed="332551961" result="Failed" label="Error" start-time="2016-09-28 07:33:25Z" end-time="2016-09-28 07:33:25Z" duration="0.008515" asserts="0">
              <properties>
                <property name="Description" value="Fail to add two numbers" />
                <property name="Category" value="tag1" />
              </properties>
              <failure>
                <message><![CDATA[System.FormatException : Input string was not in a correct format.]]></message>
                <stack-trace><![CDATA[   at System.Number.StringToNumber(String str, NumberStyles options, NumberBuffer& number, NumberFormatInfo info, Boolean parseDecimal)
   at System.Number.ParseInt32(String s, NumberStyles style, NumberFormatInfo info)
   at System.String.System.IConvertible.ToInt32(IFormatProvider provider)
   at System.Convert.ChangeType(Object value, Type conversionType, IFormatProvider provider)
   at System.Linq.Enumerable.<SelectIterator>d__5`2.MoveNext()
   at System.Linq.Buffer`1..ctor(IEnumerable`1 source)
   at System.Linq.Enumerable.ToArray[TSource](IEnumerable`1 source)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.GetExecuteArguments(BindingMatch match)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep(StepInstance stepInstance)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at Pickles.TestHarness.nunit3.AdditionFeature.ScenarioCleanup()
   at Pickles.TestHarness.nunit3.AdditionFeature.FailToAddTwoNumbers() in C:\DevProjects\Tools\pickles\test-harness\nunit3\Addition.feature:line 34]]></stack-trace>
              </failure>
              <output><![CDATA[Given the calculator has clean memory
-> done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0,0s)
Given I have entered 1 into the calculator
-> done: AdditionSteps.GivenIHaveEnteredIntoTheCalculator(1) (0,0s)
And I have entered 2.2 into the calculator
-> done: AdditionSteps.GivenIHaveEnteredIntoTheCalculator(2,2) (0,0s)
When I press add
-> done: AdditionSteps.WhenIPressAdd() (0,0s)
Then the result should be 3.2 on the screen
-> error: Input string was not in a correct format.
]]></output>
            </test-case>
            <test-case id="0-1006" name="IgnoredAddingTwoNumbers" fullname="Pickles.TestHarness.nunit3.AdditionFeature.IgnoredAddingTwoNumbers" methodname="IgnoredAddingTwoNumbers" classname="Pickles.TestHarness.nunit3.AdditionFeature" runstate="Ignored" seed="2113917196" result="Skipped" label="Ignored" start-time="2016-09-28 07:33:25Z" end-time="2016-09-28 07:33:25Z" duration="0.000651" asserts="0">
              <properties>
                <property name="Description" value="Ignored adding two numbers" />
                <property name="_SKIPREASON" value="" />
              </properties>
              <reason>
                <message><![CDATA[]]></message>
              </reason>
            </test-case>
            <test-case id="0-1007" name="NotAutomatedAddingTwoNumbers" fullname="Pickles.TestHarness.nunit3.AdditionFeature.NotAutomatedAddingTwoNumbers" methodname="NotAutomatedAddingTwoNumbers" classname="Pickles.TestHarness.nunit3.AdditionFeature" runstate="Runnable" seed="1460656856" result="Inconclusive" start-time="2016-09-28 07:33:25Z" end-time="2016-09-28 07:33:25Z" duration="0.096381" asserts="0">
              <properties>
                <property name="Description" value="Not automated adding two numbers" />
              </properties>
              <reason>
                <message><![CDATA[No matching step definition found for one or more steps.
using System;
using TechTalk.SpecFlow;

namespace MyNamespace
{
    [Binding]
    public class StepDefinitions
    {
        [Given(@"unimplemented step")]
        public void GivenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }
        
        [When(@"unimplemented step")]
        public void WhenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }
        
        [Then(@"unimplemented step")]
        public void ThenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }
    }
}
]]></message>
              </reason>
              <output><![CDATA[Given the calculator has clean memory
-> done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0,0s)
Given unimplemented step
-> No matching step definition found for the step. Use the following code to create one:
        [Given(@"unimplemented step")]
        public void GivenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }

When unimplemented step
-> No matching step definition found for the step. Use the following code to create one:
        [When(@"unimplemented step")]
        public void WhenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }

Then unimplemented step
-> No matching step definition found for the step. Use the following code to create one:
        [Then(@"unimplemented step")]
        public void ThenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }

]]></output>
            </test-case>
          </test-suite>
          <test-suite type="TestFixture" id="0-1008" name="FailingBackgroundFeature" fullname="Pickles.TestHarness.nunit3.FailingBackgroundFeature" classname="Pickles.TestHarness.nunit3.FailingBackgroundFeature" runstate="Runnable" testcasecount="3" result="Failed" site="Child" start-time="2016-09-28 07:33:25Z" end-time="2016-09-28 07:33:25Z" duration="0.020294" total="3" passed="0" failed="3" inconclusive="0" skipped="0" asserts="0">
            <properties>
              <property name="Description" value="Failing Background" />
            </properties>
            <failure>
              <message><![CDATA[One or more child tests had errors]]></message>
            </failure>
            <test-suite type="ParameterizedMethod" id="0-1012" name="AddingSeveralNumbers" fullname="Pickles.TestHarness.nunit3.FailingBackgroundFeature.AddingSeveralNumbers" runstate="Runnable" testcasecount="2" result="Failed" site="Child" start-time="2016-09-28 07:33:25Z" end-time="2016-09-28 07:33:25Z" duration="0.017069" total="2" passed="0" failed="2" inconclusive="0" skipped="0" asserts="0">
              <properties>
                <property name="Description" value="Adding several numbers" />
              </properties>
              <failure>
                <message><![CDATA[One or more child tests had errors]]></message>
              </failure>
              <test-case id="0-1010" name="AddingSeveralNumbers(&quot;60&quot;,&quot;70&quot;,&quot;130&quot;,&quot;260&quot;,null)" fullname="Pickles.TestHarness.nunit3.FailingBackgroundFeature.AddingSeveralNumbers(&quot;60&quot;,&quot;70&quot;,&quot;130&quot;,&quot;260&quot;,null)" methodname="AddingSeveralNumbers" classname="Pickles.TestHarness.nunit3.FailingBackgroundFeature" runstate="Runnable" seed="1347475421" result="Failed" label="Error" start-time="2016-09-28 07:33:25Z" end-time="2016-09-28 07:33:25Z" duration="0.014408" asserts="0">
                <failure>
                  <message><![CDATA[Shouldly.ChuckedAWobbly : 
    1
        should be
    2
        but was
    1]]></message>
                  <stack-trace><![CDATA[   at Shouldly.ShouldlyCoreExtensions.AssertAwesomely[T](T actual, Func`2 specifiedConstraint, Object originalActual, Object originalExpected) in c:\TeamCity\buildAgent\work\10efaabfa8adbd4e\src\Shouldly\ShouldlyCoreExtensions.cs:line 18
   at Shouldly.ShouldBeTestExtensions.ShouldBe[T](T actual, T expected) in c:\TeamCity\buildAgent\work\10efaabfa8adbd4e\src\Shouldly\ShouldBeTestExtensions.cs:line 17
   at AutomationLayer.AdditionSteps.GivenTheBackgroundStepFails() in C:\DevProjects\Tools\pickles\test-harness\AutomationLayer\AdditionSteps.cs:line 25
   at TechTalk.SpecFlow.Bindings.BindingInvoker.InvokeBinding(IBinding binding, IContextManager contextManager, Object[] arguments, ITestTracer testTracer, TimeSpan& duration)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStepMatch(BindingMatch match, Object[] arguments)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep(StepInstance stepInstance)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at Pickles.TestHarness.nunit3.FailingBackgroundFeature.ScenarioCleanup()
   at Pickles.TestHarness.nunit3.FailingBackgroundFeature.AddingSeveralNumbers(String firstNumber, String secondNumber, String thirdNumber, String result, String[] exampleTags) in C:\DevProjects\Tools\pickles\test-harness\nunit3\FailingBackground.feature:line 19]]></stack-trace>
                </failure>
                <output><![CDATA[Given the background step fails
-> error: 
    1
        should be
    2
        but was
    1
And the calculator has clean memory
-> skipped because of previous errors
Given I have entered 60 into the calculator
-> skipped because of previous errors
And I have entered 70 into the calculator
-> skipped because of previous errors
And I have entered 130 into the calculator
-> skipped because of previous errors
When I press add
-> skipped because of previous errors
Then the result should be 260 on the screen
-> skipped because of previous errors
]]></output>
              </test-case>
              <test-case id="0-1011" name="AddingSeveralNumbers(&quot;40&quot;,&quot;50&quot;,&quot;90&quot;,&quot;180&quot;,null)" fullname="Pickles.TestHarness.nunit3.FailingBackgroundFeature.AddingSeveralNumbers(&quot;40&quot;,&quot;50&quot;,&quot;90&quot;,&quot;180&quot;,null)" methodname="AddingSeveralNumbers" classname="Pickles.TestHarness.nunit3.FailingBackgroundFeature" runstate="Runnable" seed="211985103" result="Failed" label="Error" start-time="2016-09-28 07:33:25Z" end-time="2016-09-28 07:33:25Z" duration="0.002525" asserts="0">
                <failure>
                  <message><![CDATA[Shouldly.ChuckedAWobbly : 
    1
        should be
    2
        but was
    1]]></message>
                  <stack-trace><![CDATA[   at Shouldly.ShouldlyCoreExtensions.AssertAwesomely[T](T actual, Func`2 specifiedConstraint, Object originalActual, Object originalExpected) in c:\TeamCity\buildAgent\work\10efaabfa8adbd4e\src\Shouldly\ShouldlyCoreExtensions.cs:line 18
   at Shouldly.ShouldBeTestExtensions.ShouldBe[T](T actual, T expected) in c:\TeamCity\buildAgent\work\10efaabfa8adbd4e\src\Shouldly\ShouldBeTestExtensions.cs:line 17
   at AutomationLayer.AdditionSteps.GivenTheBackgroundStepFails() in C:\DevProjects\Tools\pickles\test-harness\AutomationLayer\AdditionSteps.cs:line 25
   at TechTalk.SpecFlow.Bindings.BindingInvoker.InvokeBinding(IBinding binding, IContextManager contextManager, Object[] arguments, ITestTracer testTracer, TimeSpan& duration)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStepMatch(BindingMatch match, Object[] arguments)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep(StepInstance stepInstance)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at Pickles.TestHarness.nunit3.FailingBackgroundFeature.ScenarioCleanup()
   at Pickles.TestHarness.nunit3.FailingBackgroundFeature.AddingSeveralNumbers(String firstNumber, String secondNumber, String thirdNumber, String result, String[] exampleTags) in C:\DevProjects\Tools\pickles\test-harness\nunit3\FailingBackground.feature:line 19]]></stack-trace>
                </failure>
                <output><![CDATA[Given the background step fails
-> error: 
    1
        should be
    2
        but was
    1
And the calculator has clean memory
-> skipped because of previous errors
Given I have entered 40 into the calculator
-> skipped because of previous errors
And I have entered 50 into the calculator
-> skipped because of previous errors
And I have entered 90 into the calculator
-> skipped because of previous errors
When I press add
-> skipped because of previous errors
Then the result should be 180 on the screen
-> skipped because of previous errors
]]></output>
              </test-case>
            </test-suite>
            <test-case id="0-1009" name="AddTwoNumbers" fullname="Pickles.TestHarness.nunit3.FailingBackgroundFeature.AddTwoNumbers" methodname="AddTwoNumbers" classname="Pickles.TestHarness.nunit3.FailingBackgroundFeature" runstate="Runnable" seed="212386315" result="Failed" label="Error" start-time="2016-09-28 07:33:25Z" end-time="2016-09-28 07:33:25Z" duration="0.002391" asserts="0">
              <properties>
                <property name="Description" value="Add two numbers" />
              </properties>
              <failure>
                <message><![CDATA[Shouldly.ChuckedAWobbly : 
    1
        should be
    2
        but was
    1]]></message>
                <stack-trace><![CDATA[   at Shouldly.ShouldlyCoreExtensions.AssertAwesomely[T](T actual, Func`2 specifiedConstraint, Object originalActual, Object originalExpected) in c:\TeamCity\buildAgent\work\10efaabfa8adbd4e\src\Shouldly\ShouldlyCoreExtensions.cs:line 18
   at Shouldly.ShouldBeTestExtensions.ShouldBe[T](T actual, T expected) in c:\TeamCity\buildAgent\work\10efaabfa8adbd4e\src\Shouldly\ShouldBeTestExtensions.cs:line 17
   at AutomationLayer.AdditionSteps.GivenTheBackgroundStepFails() in C:\DevProjects\Tools\pickles\test-harness\AutomationLayer\AdditionSteps.cs:line 25
   at TechTalk.SpecFlow.Bindings.BindingInvoker.InvokeBinding(IBinding binding, IContextManager contextManager, Object[] arguments, ITestTracer testTracer, TimeSpan& duration)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStepMatch(BindingMatch match, Object[] arguments)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep(StepInstance stepInstance)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at Pickles.TestHarness.nunit3.FailingBackgroundFeature.ScenarioCleanup()
   at Pickles.TestHarness.nunit3.FailingBackgroundFeature.AddTwoNumbers() in C:\DevProjects\Tools\pickles\test-harness\nunit3\FailingBackground.feature:line 12]]></stack-trace>
              </failure>
              <output><![CDATA[Given the background step fails
-> error: 
    1
        should be
    2
        but was
    1
And the calculator has clean memory
-> skipped because of previous errors
Given I have entered 50 into the calculator
-> skipped because of previous errors
And I have entered 70 into the calculator
-> skipped because of previous errors
When I press add
-> skipped because of previous errors
Then the result should be 120 on the screen
-> skipped because of previous errors
]]></output>
            </test-case>
          </test-suite>
          <test-suite type="TestSuite" id="0-1070" name="MinimalFeatures" fullname="Pickles.TestHarness.nunit3.MinimalFeatures" runstate="Runnable" testcasecount="6" result="Failed" site="Child" start-time="2016-09-28 07:33:25Z" end-time="2016-09-28 07:33:25Z" duration="0.601361" total="6" passed="3" failed="1" inconclusive="2" skipped="0" asserts="0">
            <failure>
              <message><![CDATA[One or more child tests had errors]]></message>
            </failure>
            <test-suite type="TestFixture" id="0-1057" name="FailingFeature" fullname="Pickles.TestHarness.nunit3.MinimalFeatures.FailingFeature" classname="Pickles.TestHarness.nunit3.MinimalFeatures.FailingFeature" runstate="Runnable" testcasecount="3" result="Failed" site="Child" start-time="2016-09-28 07:33:25Z" end-time="2016-09-28 07:33:25Z" duration="0.016653" total="3" passed="1" failed="1" inconclusive="1" skipped="0" asserts="0">
              <properties>
                <property name="Description" value="Failing" />
              </properties>
              <failure>
                <message><![CDATA[One or more child tests had errors]]></message>
              </failure>
              <test-case id="0-1060" name="FailingFeatureFailingScenario" fullname="Pickles.TestHarness.nunit3.MinimalFeatures.FailingFeature.FailingFeatureFailingScenario" methodname="FailingFeatureFailingScenario" classname="Pickles.TestHarness.nunit3.MinimalFeatures.FailingFeature" runstate="Runnable" seed="451452096" result="Failed" label="Error" start-time="2016-09-28 07:33:25Z" end-time="2016-09-28 07:33:25Z" duration="0.008863" asserts="0">
                <properties>
                  <property name="Description" value="Failing Feature Failing Scenario" />
                </properties>
                <failure>
                  <message><![CDATA[Shouldly.ChuckedAWobbly : 
    true
        should be
    False
        but was
    True]]></message>
                  <stack-trace><![CDATA[   at Shouldly.ShouldlyCoreExtensions.AssertAwesomely[T](T actual, Func`2 specifiedConstraint, Object originalActual, Object originalExpected) in c:\TeamCity\buildAgent\work\10efaabfa8adbd4e\src\Shouldly\ShouldlyCoreExtensions.cs:line 18
   at Shouldly.ShouldBeTestExtensions.ShouldBe[T](T actual, T expected) in c:\TeamCity\buildAgent\work\10efaabfa8adbd4e\src\Shouldly\ShouldBeTestExtensions.cs:line 17
   at AutomationLayer.MinimalFeatures.MinimalSteps.ThenFailingStep() in C:\DevProjects\Tools\pickles\test-harness\AutomationLayer\MinimalFeatures\MinimalSteps.cs:line 24
   at TechTalk.SpecFlow.Bindings.BindingInvoker.InvokeBinding(IBinding binding, IContextManager contextManager, Object[] arguments, ITestTracer testTracer, TimeSpan& duration)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStepMatch(BindingMatch match, Object[] arguments)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep(StepInstance stepInstance)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at Pickles.TestHarness.nunit3.MinimalFeatures.FailingFeature.ScenarioCleanup()
   at Pickles.TestHarness.nunit3.MinimalFeatures.FailingFeature.FailingFeatureFailingScenario() in C:\DevProjects\Tools\pickles\test-harness\nunit3\Minimal Features\Failing.feature:line 10]]></stack-trace>
                </failure>
                <output><![CDATA[Then failing step
-> error: 
    true
        should be
    False
        but was
    True
]]></output>
              </test-case>
              <test-case id="0-1059" name="FailingFeatureInconclusiveScenario" fullname="Pickles.TestHarness.nunit3.MinimalFeatures.FailingFeature.FailingFeatureInconclusiveScenario" methodname="FailingFeatureInconclusiveScenario" classname="Pickles.TestHarness.nunit3.MinimalFeatures.FailingFeature" runstate="Runnable" seed="1868752976" result="Inconclusive" start-time="2016-09-28 07:33:25Z" end-time="2016-09-28 07:33:25Z" duration="0.006364" asserts="0">
                <properties>
                  <property name="Description" value="Failing Feature Inconclusive Scenario" />
                </properties>
                <reason>
                  <message><![CDATA[One or more step definitions are not implemented yet.
  MinimalSteps.ThenInconclusiveStep()]]></message>
                </reason>
                <output><![CDATA[Then inconclusive step
-> pending: MinimalSteps.ThenInconclusiveStep()
]]></output>
              </test-case>
              <test-case id="0-1058" name="FailingFeaturePassingScenario" fullname="Pickles.TestHarness.nunit3.MinimalFeatures.FailingFeature.FailingFeaturePassingScenario" methodname="FailingFeaturePassingScenario" classname="Pickles.TestHarness.nunit3.MinimalFeatures.FailingFeature" runstate="Runnable" seed="637137152" result="Passed" start-time="2016-09-28 07:33:25Z" end-time="2016-09-28 07:33:25Z" duration="0.000667" asserts="0">
                <properties>
                  <property name="Description" value="Failing Feature Passing Scenario" />
                </properties>
                <output><![CDATA[Then passing step
-> done: MinimalSteps.ThenPassingStep() (0,0s)
]]></output>
              </test-case>
            </test-suite>
            <test-suite type="TestFixture" id="0-1061" name="InconclusiveFeature" fullname="Pickles.TestHarness.nunit3.MinimalFeatures.InconclusiveFeature" classname="Pickles.TestHarness.nunit3.MinimalFeatures.InconclusiveFeature" runstate="Runnable" testcasecount="2" result="Passed" start-time="2016-09-28 07:33:25Z" end-time="2016-09-28 07:33:25Z" duration="0.003114" total="2" passed="1" failed="0" inconclusive="1" skipped="0" asserts="0">
              <properties>
                <property name="Description" value="Inconclusive" />
              </properties>
              <test-case id="0-1063" name="InconclusiveFeatureInconclusiveScenario" fullname="Pickles.TestHarness.nunit3.MinimalFeatures.InconclusiveFeature.InconclusiveFeatureInconclusiveScenario" methodname="InconclusiveFeatureInconclusiveScenario" classname="Pickles.TestHarness.nunit3.MinimalFeatures.InconclusiveFeature" runstate="Runnable" seed="1362768032" result="Inconclusive" start-time="2016-09-28 07:33:25Z" end-time="2016-09-28 07:33:25Z" duration="0.002350" asserts="0">
                <properties>
                  <property name="Description" value="Inconclusive Feature Inconclusive Scenario" />
                </properties>
                <reason>
                  <message><![CDATA[One or more step definitions are not implemented yet.
  MinimalSteps.ThenInconclusiveStep()]]></message>
                </reason>
                <output><![CDATA[Then inconclusive step
-> pending: MinimalSteps.ThenInconclusiveStep()
]]></output>
              </test-case>
              <test-case id="0-1062" name="InconclusiveFeaturePassingScenario" fullname="Pickles.TestHarness.nunit3.MinimalFeatures.InconclusiveFeature.InconclusiveFeaturePassingScenario" methodname="InconclusiveFeaturePassingScenario" classname="Pickles.TestHarness.nunit3.MinimalFeatures.InconclusiveFeature" runstate="Runnable" seed="1460000646" result="Passed" start-time="2016-09-28 07:33:25Z" end-time="2016-09-28 07:33:25Z" duration="0.000326" asserts="0">
                <properties>
                  <property name="Description" value="Inconclusive Feature Passing Scenario" />
                </properties>
                <output><![CDATA[Then passing step
-> done: MinimalSteps.ThenPassingStep() (0,0s)
]]></output>
              </test-case>
            </test-suite>
            <test-suite type="TestFixture" id="0-1064" name="PassingFeature" fullname="Pickles.TestHarness.nunit3.MinimalFeatures.PassingFeature" classname="Pickles.TestHarness.nunit3.MinimalFeatures.PassingFeature" runstate="Runnable" testcasecount="1" result="Passed" start-time="2016-09-28 07:33:25Z" end-time="2016-09-28 07:33:25Z" duration="0.000831" total="1" passed="1" failed="0" inconclusive="0" skipped="0" asserts="0">
              <properties>
                <property name="Description" value="Passing" />
              </properties>
              <test-case id="0-1065" name="PassingFeaturePassingScenario" fullname="Pickles.TestHarness.nunit3.MinimalFeatures.PassingFeature.PassingFeaturePassingScenario" methodname="PassingFeaturePassingScenario" classname="Pickles.TestHarness.nunit3.MinimalFeatures.PassingFeature" runstate="Runnable" seed="529523600" result="Passed" start-time="2016-09-28 07:33:25Z" end-time="2016-09-28 07:33:25Z" duration="0.000423" asserts="0">
                <properties>
                  <property name="Description" value="Passing Feature Passing Scenario" />
                </properties>
                <output><![CDATA[Then passing step
-> done: MinimalSteps.ThenPassingStep() (0,0s)
]]></output>
              </test-case>
            </test-suite>
          </test-suite>
          <test-suite type="TestFixture" id="0-1013" name="NotAutomatedAtAllFeature" fullname="Pickles.TestHarness.nunit3.NotAutomatedAtAllFeature" classname="Pickles.TestHarness.nunit3.NotAutomatedAtAllFeature" runstate="Runnable" testcasecount="1" result="Failed" site="Child" start-time="2016-09-28 07:33:25Z" end-time="2016-09-28 07:33:25Z" duration="0.003521" total="1" passed="0" failed="1" inconclusive="0" skipped="0" asserts="0">
            <properties>
              <property name="Description" value="NotAutomatedAtAll" />
            </properties>
            <failure>
              <message><![CDATA[One or more child tests had errors]]></message>
            </failure>
            <test-case id="0-1014" name="AddTwoNumbers" fullname="Pickles.TestHarness.nunit3.NotAutomatedAtAllFeature.AddTwoNumbers" methodname="AddTwoNumbers" classname="Pickles.TestHarness.nunit3.NotAutomatedAtAllFeature" runstate="Runnable" seed="118089422" result="Failed" label="Error" start-time="2016-09-28 07:33:25Z" end-time="2016-09-28 07:33:25Z" duration="0.003153" asserts="0">
              <properties>
                <property name="Description" value="Add two numbers" />
                <property name="Category" value="mytag" />
              </properties>
              <failure>
                <message><![CDATA[System.NullReferenceException : Object reference not set to an instance of an object.]]></message>
                <stack-trace><![CDATA[   at AutomationLayer.AdditionSteps.GivenIHaveEnteredIntoTheCalculator(Decimal p0) in C:\DevProjects\Tools\pickles\test-harness\AutomationLayer\AdditionSteps.cs:line 31
   at lambda_method(Closure , IContextManager , Decimal )
   at TechTalk.SpecFlow.Bindings.BindingInvoker.InvokeBinding(IBinding binding, IContextManager contextManager, Object[] arguments, ITestTracer testTracer, TimeSpan& duration)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStepMatch(BindingMatch match, Object[] arguments)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep(StepInstance stepInstance)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at Pickles.TestHarness.nunit3.NotAutomatedAtAllFeature.ScenarioCleanup()
   at Pickles.TestHarness.nunit3.NotAutomatedAtAllFeature.AddTwoNumbers() in C:\DevProjects\Tools\pickles\test-harness\nunit3\NotAutomatedAtAll.feature:line 11]]></stack-trace>
              </failure>
              <output><![CDATA[Given I have entered 50 into the calculator
-> error: Object reference not set to an instance of an object.
And I have entered 70 into the calculator
-> skipped because of previous errors
When I press add
-> skipped because of previous errors
Then the result should be 120 on the screen
-> skipped because of previous errors
]]></output>
            </test-case>
          </test-suite>
          <test-suite type="TestFixture" id="0-1015" name="ScenarioOutlinesFeature" fullname="Pickles.TestHarness.nunit3.ScenarioOutlinesFeature" classname="Pickles.TestHarness.nunit3.ScenarioOutlinesFeature" runstate="Runnable" testcasecount="18" result="Failed" site="Child" start-time="2016-09-28 07:33:25Z" end-time="2016-09-28 07:33:25Z" duration="0.017604" total="18" passed="12" failed="3" inconclusive="3" skipped="0" asserts="0">
            <properties>
              <property name="Description" value="Scenario Outlines" />
            </properties>
            <failure>
              <message><![CDATA[One or more child tests had errors]]></message>
            </failure>
            <test-suite type="ParameterizedMethod" id="0-1034" name="AndWeCanGoTotallyBonkersWithMultipleExampleSections_" fullname="Pickles.TestHarness.nunit3.ScenarioOutlinesFeature.AndWeCanGoTotallyBonkersWithMultipleExampleSections_" runstate="Runnable" testcasecount="6" result="Failed" site="Child" start-time="2016-09-28 07:33:25Z" end-time="2016-09-28 07:33:25Z" duration="0.009258" total="6" passed="2" failed="2" inconclusive="2" skipped="0" asserts="0">
              <properties>
                <property name="Description" value="And we can go totally bonkers with multiple example sections." />
              </properties>
              <failure>
                <message><![CDATA[One or more child tests had errors]]></message>
              </failure>
              <test-case id="0-1028" name="AndWeCanGoTotallyBonkersWithMultipleExampleSections_(&quot;pass_1&quot;,null)" fullname="Pickles.TestHarness.nunit3.ScenarioOutlinesFeature.AndWeCanGoTotallyBonkersWithMultipleExampleSections_(&quot;pass_1&quot;,null)" methodname="AndWeCanGoTotallyBonkersWithMultipleExampleSections_" classname="Pickles.TestHarness.nunit3.ScenarioOutlinesFeature" runstate="Runnable" seed="193735939" result="Passed" start-time="2016-09-28 07:33:25Z" end-time="2016-09-28 07:33:25Z" duration="0.001794" asserts="0">
                <output><![CDATA[Then the scenario will 'pass_1'
-> done: ScenarioOutlineSteps.ThenTheScenarioWill("pass_1") (0,0s)
]]></output>
              </test-case>
              <test-case id="0-1029" name="AndWeCanGoTotallyBonkersWithMultipleExampleSections_(&quot;pass_2&quot;,null)" fullname="Pickles.TestHarness.nunit3.ScenarioOutlinesFeature.AndWeCanGoTotallyBonkersWithMultipleExampleSections_(&quot;pass_2&quot;,null)" methodname="AndWeCanGoTotallyBonkersWithMultipleExampleSections_" classname="Pickles.TestHarness.nunit3.ScenarioOutlinesFeature" runstate="Runnable" seed="1390597427" result="Passed" start-time="2016-09-28 07:33:25Z" end-time="2016-09-28 07:33:25Z" duration="0.000150" asserts="0">
                <output><![CDATA[Then the scenario will 'pass_2'
-> done: ScenarioOutlineSteps.ThenTheScenarioWill("pass_2") (0,0s)
]]></output>
              </test-case>
              <test-case id="0-1030" name="AndWeCanGoTotallyBonkersWithMultipleExampleSections_(&quot;inconclusive_1&quot;,null)" fullname="Pickles.TestHarness.nunit3.ScenarioOutlinesFeature.AndWeCanGoTotallyBonkersWithMultipleExampleSections_(&quot;inconclusive_1&quot;,null)" methodname="AndWeCanGoTotallyBonkersWithMultipleExampleSections_" classname="Pickles.TestHarness.nunit3.ScenarioOutlinesFeature" runstate="Runnable" seed="875415367" result="Inconclusive" start-time="2016-09-28 07:33:25Z" end-time="2016-09-28 07:33:25Z" duration="0.002448" asserts="0">
                <reason>
                  <message><![CDATA[One or more step definitions are not implemented yet.
  ScenarioOutlineSteps.ThenTheScenarioWill("inconclusive_1")]]></message>
                </reason>
                <output><![CDATA[Then the scenario will 'inconclusive_1'
-> pending: ScenarioOutlineSteps.ThenTheScenarioWill("inconclusive_1")
]]></output>
              </test-case>
              <test-case id="0-1031" name="AndWeCanGoTotallyBonkersWithMultipleExampleSections_(&quot;inconclusive_2&quot;,null)" fullname="Pickles.TestHarness.nunit3.ScenarioOutlinesFeature.AndWeCanGoTotallyBonkersWithMultipleExampleSections_(&quot;inconclusive_2&quot;,null)" methodname="AndWeCanGoTotallyBonkersWithMultipleExampleSections_" classname="Pickles.TestHarness.nunit3.ScenarioOutlinesFeature" runstate="Runnable" seed="1231727827" result="Inconclusive" start-time="2016-09-28 07:33:25Z" end-time="2016-09-28 07:33:25Z" duration="0.001642" asserts="0">
                <reason>
                  <message><![CDATA[One or more step definitions are not implemented yet.
  ScenarioOutlineSteps.ThenTheScenarioWill("inconclusive_2")]]></message>
                </reason>
                <output><![CDATA[Then the scenario will 'inconclusive_2'
-> pending: ScenarioOutlineSteps.ThenTheScenarioWill("inconclusive_2")
]]></output>
              </test-case>
              <test-case id="0-1032" name="AndWeCanGoTotallyBonkersWithMultipleExampleSections_(&quot;fail_1&quot;,null)" fullname="Pickles.TestHarness.nunit3.ScenarioOutlinesFeature.AndWeCanGoTotallyBonkersWithMultipleExampleSections_(&quot;fail_1&quot;,null)" methodname="AndWeCanGoTotallyBonkersWithMultipleExampleSections_" classname="Pickles.TestHarness.nunit3.ScenarioOutlinesFeature" runstate="Runnable" seed="52758991" result="Failed" label="Error" start-time="2016-09-28 07:33:25Z" end-time="2016-09-28 07:33:25Z" duration="0.001442" asserts="0">
                <failure>
                  <message><![CDATA[Shouldly.ChuckedAWobbly : 
    true
        should be
    False
        but was
    True]]></message>
                  <stack-trace><![CDATA[   at Shouldly.ShouldlyCoreExtensions.AssertAwesomely[T](T actual, Func`2 specifiedConstraint, Object originalActual, Object originalExpected) in c:\TeamCity\buildAgent\work\10efaabfa8adbd4e\src\Shouldly\ShouldlyCoreExtensions.cs:line 18
   at Shouldly.ShouldBeTestExtensions.ShouldBe[T](T actual, T expected) in c:\TeamCity\buildAgent\work\10efaabfa8adbd4e\src\Shouldly\ShouldBeTestExtensions.cs:line 17
   at AutomationLayer.ScenarioOutlineSteps.ThenTheScenarioWill(String result) in C:\DevProjects\Tools\pickles\test-harness\AutomationLayer\ScenarioOutlineSteps.cs:line 21
   at TechTalk.SpecFlow.Bindings.BindingInvoker.InvokeBinding(IBinding binding, IContextManager contextManager, Object[] arguments, ITestTracer testTracer, TimeSpan& duration)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStepMatch(BindingMatch match, Object[] arguments)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep(StepInstance stepInstance)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at Pickles.TestHarness.nunit3.ScenarioOutlinesFeature.ScenarioCleanup()
   at Pickles.TestHarness.nunit3.ScenarioOutlinesFeature.AndWeCanGoTotallyBonkersWithMultipleExampleSections_(String result, String[] exampleTags) in C:\DevProjects\Tools\pickles\test-harness\nunit3\ScenarioOutlines.feature:line 45]]></stack-trace>
                </failure>
                <output><![CDATA[Then the scenario will 'fail_1'
-> error: 
    true
        should be
    False
        but was
    True
]]></output>
              </test-case>
              <test-case id="0-1033" name="AndWeCanGoTotallyBonkersWithMultipleExampleSections_(&quot;fail_2&quot;,null)" fullname="Pickles.TestHarness.nunit3.ScenarioOutlinesFeature.AndWeCanGoTotallyBonkersWithMultipleExampleSections_(&quot;fail_2&quot;,null)" methodname="AndWeCanGoTotallyBonkersWithMultipleExampleSections_" classname="Pickles.TestHarness.nunit3.ScenarioOutlinesFeature" runstate="Runnable" seed="1923791459" result="Failed" label="Error" start-time="2016-09-28 07:33:25Z" end-time="2016-09-28 07:33:25Z" duration="0.001108" asserts="0">
                <failure>
                  <message><![CDATA[Shouldly.ChuckedAWobbly : 
    true
        should be
    False
        but was
    True]]></message>
                  <stack-trace><![CDATA[   at Shouldly.ShouldlyCoreExtensions.AssertAwesomely[T](T actual, Func`2 specifiedConstraint, Object originalActual, Object originalExpected) in c:\TeamCity\buildAgent\work\10efaabfa8adbd4e\src\Shouldly\ShouldlyCoreExtensions.cs:line 18
   at Shouldly.ShouldBeTestExtensions.ShouldBe[T](T actual, T expected) in c:\TeamCity\buildAgent\work\10efaabfa8adbd4e\src\Shouldly\ShouldBeTestExtensions.cs:line 17
   at AutomationLayer.ScenarioOutlineSteps.ThenTheScenarioWill(String result) in C:\DevProjects\Tools\pickles\test-harness\AutomationLayer\ScenarioOutlineSteps.cs:line 21
   at TechTalk.SpecFlow.Bindings.BindingInvoker.InvokeBinding(IBinding binding, IContextManager contextManager, Object[] arguments, ITestTracer testTracer, TimeSpan& duration)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStepMatch(BindingMatch match, Object[] arguments)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep(StepInstance stepInstance)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at Pickles.TestHarness.nunit3.ScenarioOutlinesFeature.ScenarioCleanup()
   at Pickles.TestHarness.nunit3.ScenarioOutlinesFeature.AndWeCanGoTotallyBonkersWithMultipleExampleSections_(String result, String[] exampleTags) in C:\DevProjects\Tools\pickles\test-harness\nunit3\ScenarioOutlines.feature:line 45]]></stack-trace>
                </failure>
                <output><![CDATA[Then the scenario will 'fail_2'
-> error: 
    true
        should be
    False
        but was
    True
]]></output>
              </test-case>
            </test-suite>
            <test-suite type="ParameterizedMethod" id="0-1036" name="DealCorrectlyWithBackslashesInTheExamples" fullname="Pickles.TestHarness.nunit3.ScenarioOutlinesFeature.DealCorrectlyWithBackslashesInTheExamples" runstate="Runnable" testcasecount="1" result="Passed" start-time="2016-09-28 07:33:25Z" end-time="2016-09-28 07:33:25Z" duration="0.000769" total="1" passed="1" failed="0" inconclusive="0" skipped="0" asserts="0">
              <properties>
                <property name="Description" value="Deal correctly with backslashes in the examples" />
              </properties>
              <test-case id="0-1035" name="DealCorrectlyWithBackslashesInTheExamples(&quot;c:\\Temp\\&quot;,null)" fullname="Pickles.TestHarness.nunit3.ScenarioOutlinesFeature.DealCorrectlyWithBackslashesInTheExamples(&quot;c:\\Temp\\&quot;,null)" methodname="DealCorrectlyWithBackslashesInTheExamples" classname="Pickles.TestHarness.nunit3.ScenarioOutlinesFeature" runstate="Runnable" seed="1069402004" result="Passed" start-time="2016-09-28 07:33:25Z" end-time="2016-09-28 07:33:25Z" duration="0.000687" asserts="0">
                <output><![CDATA[When I have backslashes in the value, for example a 'c:\Temp\'
-> done: ScenarioOutlineSteps.WhenIHaveBackslashesInTheValueForExampleAFilePath("c:\Temp\") (0,0s)
]]></output>
              </test-case>
            </test-suite>
            <test-suite type="ParameterizedMethod" id="0-1040" name="DealCorrectlyWithOverlongExampleValues" fullname="Pickles.TestHarness.nunit3.ScenarioOutlinesFeature.DealCorrectlyWithOverlongExampleValues" runstate="Runnable" testcasecount="1" result="Passed" start-time="2016-09-28 07:33:25Z" end-time="2016-09-28 07:33:25Z" duration="0.001577" total="1" passed="1" failed="0" inconclusive="0" skipped="0" asserts="0">
              <properties>
                <property name="Description" value="Deal correctly with overlong example values" />
              </properties>
              <test-case id="0-1039" name="DealCorrectlyWithOverlongExampleValues(&quot;Please enter a valid two letter count...&quot;,&quot;This is just a very very very veery l...&quot;,null)" fullname="Pickles.TestHarness.nunit3.ScenarioOutlinesFeature.DealCorrectlyWithOverlongExampleValues(&quot;Please enter a valid two letter count...&quot;,&quot;This is just a very very very veery l...&quot;,null)" methodname="DealCorrectlyWithOverlongExampleValues" classname="Pickles.TestHarness.nunit3.ScenarioOutlinesFeature" runstate="Runnable" seed="392352118" result="Passed" start-time="2016-09-28 07:33:25Z" end-time="2016-09-28 07:33:25Z" duration="0.001443" asserts="0">
                <output><![CDATA[When I have a field with value 'Please enter a valid two letter country code (e.g. DE)!'
-> done: ScenarioOutlineSteps.WhenIHaveAFieldWithValue("Please enter a va...") (0,0s)
And I have a field with value 'This is just a very very very veery long error message!'
-> done: ScenarioOutlineSteps.WhenIHaveAFieldWithValue("This is just a ve...") (0,0s)
Then the scenario will 'pass_1'
-> done: ScenarioOutlineSteps.ThenTheScenarioWill("pass_1") (0,0s)
]]></output>
              </test-case>
            </test-suite>
            <test-suite type="ParameterizedMethod" id="0-1038" name="DealCorrectlyWithParenthesisInTheExamples" fullname="Pickles.TestHarness.nunit3.ScenarioOutlinesFeature.DealCorrectlyWithParenthesisInTheExamples" runstate="Runnable" testcasecount="1" result="Passed" start-time="2016-09-28 07:33:25Z" end-time="2016-09-28 07:33:25Z" duration="0.000719" total="1" passed="1" failed="0" inconclusive="0" skipped="0" asserts="0">
              <properties>
                <property name="Description" value="Deal correctly with parenthesis in the examples" />
              </properties>
              <test-case id="0-1037" name="DealCorrectlyWithParenthesisInTheExamples(&quot;This is a description (and more)&quot;,null)" fullname="Pickles.TestHarness.nunit3.ScenarioOutlinesFeature.DealCorrectlyWithParenthesisInTheExamples(&quot;This is a description (and more)&quot;,null)" methodname="DealCorrectlyWithParenthesisInTheExamples" classname="Pickles.TestHarness.nunit3.ScenarioOutlinesFeature" runstate="Runnable" seed="1448988997" result="Passed" start-time="2016-09-28 07:33:25Z" end-time="2016-09-28 07:33:25Z" duration="0.000608" asserts="0">
                <output><![CDATA[When I have parenthesis in the value, for example an 'This is a description (and more)'
-> done: ScenarioOutlineSteps.WhenIHaveParenthesisInTheValueForExampleAnOverlyDescriptiveField("This is a descrip...") (0,0s)
]]></output>
              </test-case>
            </test-suite>
            <test-suite type="ParameterizedMethod" id="0-1019" name="ThisIsAScenarioOutlineWhereAllScenariosPass" fullname="Pickles.TestHarness.nunit3.ScenarioOutlinesFeature.ThisIsAScenarioOutlineWhereAllScenariosPass" runstate="Runnable" testcasecount="3" result="Passed" start-time="2016-09-28 07:33:25Z" end-time="2016-09-28 07:33:25Z" duration="0.000618" total="3" passed="3" failed="0" inconclusive="0" skipped="0" asserts="0">
              <properties>
                <property name="Description" value="This is a scenario outline where all scenarios pass" />
              </properties>
              <test-case id="0-1016" name="ThisIsAScenarioOutlineWhereAllScenariosPass(&quot;pass_1&quot;,null)" fullname="Pickles.TestHarness.nunit3.ScenarioOutlinesFeature.ThisIsAScenarioOutlineWhereAllScenariosPass(&quot;pass_1&quot;,null)" methodname="ThisIsAScenarioOutlineWhereAllScenariosPass" classname="Pickles.TestHarness.nunit3.ScenarioOutlinesFeature" runstate="Runnable" seed="1096460943" result="Passed" start-time="2016-09-28 07:33:25Z" end-time="2016-09-28 07:33:25Z" duration="0.000232" asserts="0">
                <output><![CDATA[Then the scenario will 'pass_1'
-> done: ScenarioOutlineSteps.ThenTheScenarioWill("pass_1") (0,0s)
]]></output>
              </test-case>
              <test-case id="0-1017" name="ThisIsAScenarioOutlineWhereAllScenariosPass(&quot;pass_2&quot;,null)" fullname="Pickles.TestHarness.nunit3.ScenarioOutlinesFeature.ThisIsAScenarioOutlineWhereAllScenariosPass(&quot;pass_2&quot;,null)" methodname="ThisIsAScenarioOutlineWhereAllScenariosPass" classname="Pickles.TestHarness.nunit3.ScenarioOutlinesFeature" runstate="Runnable" seed="1554169190" result="Passed" start-time="2016-09-28 07:33:25Z" end-time="2016-09-28 07:33:25Z" duration="0.000076" asserts="0">
                <output><![CDATA[Then the scenario will 'pass_2'
-> done: ScenarioOutlineSteps.ThenTheScenarioWill("pass_2") (0,0s)
]]></output>
              </test-case>
              <test-case id="0-1018" name="ThisIsAScenarioOutlineWhereAllScenariosPass(&quot;pass_3&quot;,null)" fullname="Pickles.TestHarness.nunit3.ScenarioOutlinesFeature.ThisIsAScenarioOutlineWhereAllScenariosPass(&quot;pass_3&quot;,null)" methodname="ThisIsAScenarioOutlineWhereAllScenariosPass" classname="Pickles.TestHarness.nunit3.ScenarioOutlinesFeature" runstate="Runnable" seed="703520303" result="Passed" start-time="2016-09-28 07:33:25Z" end-time="2016-09-28 07:33:25Z" duration="0.000063" asserts="0">
                <output><![CDATA[Then the scenario will 'pass_3'
-> done: ScenarioOutlineSteps.ThenTheScenarioWill("pass_3") (0,0s)
]]></output>
              </test-case>
            </test-suite>
            <test-suite type="ParameterizedMethod" id="0-1027" name="ThisIsAScenarioOutlineWhereOneScenarioFails" fullname="Pickles.TestHarness.nunit3.ScenarioOutlinesFeature.ThisIsAScenarioOutlineWhereOneScenarioFails" runstate="Runnable" testcasecount="3" result="Failed" site="Child" start-time="2016-09-28 07:33:25Z" end-time="2016-09-28 07:33:25Z" duration="0.002080" total="3" passed="2" failed="1" inconclusive="0" skipped="0" asserts="0">
              <properties>
                <property name="Description" value="This is a scenario outline where one scenario fails" />
              </properties>
              <failure>
                <message><![CDATA[One or more child tests had errors]]></message>
              </failure>
              <test-case id="0-1024" name="ThisIsAScenarioOutlineWhereOneScenarioFails(&quot;pass_1&quot;,null)" fullname="Pickles.TestHarness.nunit3.ScenarioOutlinesFeature.ThisIsAScenarioOutlineWhereOneScenarioFails(&quot;pass_1&quot;,null)" methodname="ThisIsAScenarioOutlineWhereOneScenarioFails" classname="Pickles.TestHarness.nunit3.ScenarioOutlinesFeature" runstate="Runnable" seed="1002758134" result="Passed" start-time="2016-09-28 07:33:25Z" end-time="2016-09-28 07:33:25Z" duration="0.000208" asserts="0">
                <output><![CDATA[Then the scenario will 'pass_1'
-> done: ScenarioOutlineSteps.ThenTheScenarioWill("pass_1") (0,0s)
]]></output>
              </test-case>
              <test-case id="0-1025" name="ThisIsAScenarioOutlineWhereOneScenarioFails(&quot;pass_2&quot;,null)" fullname="Pickles.TestHarness.nunit3.ScenarioOutlinesFeature.ThisIsAScenarioOutlineWhereOneScenarioFails(&quot;pass_2&quot;,null)" methodname="ThisIsAScenarioOutlineWhereOneScenarioFails" classname="Pickles.TestHarness.nunit3.ScenarioOutlinesFeature" runstate="Runnable" seed="596653663" result="Passed" start-time="2016-09-28 07:33:25Z" end-time="2016-09-28 07:33:25Z" duration="0.000063" asserts="0">
                <output><![CDATA[Then the scenario will 'pass_2'
-> done: ScenarioOutlineSteps.ThenTheScenarioWill("pass_2") (0,0s)
]]></output>
              </test-case>
              <test-case id="0-1026" name="ThisIsAScenarioOutlineWhereOneScenarioFails(&quot;fail_1&quot;,null)" fullname="Pickles.TestHarness.nunit3.ScenarioOutlinesFeature.ThisIsAScenarioOutlineWhereOneScenarioFails(&quot;fail_1&quot;,null)" methodname="ThisIsAScenarioOutlineWhereOneScenarioFails" classname="Pickles.TestHarness.nunit3.ScenarioOutlinesFeature" runstate="Runnable" seed="79304597" result="Failed" label="Error" start-time="2016-09-28 07:33:25Z" end-time="2016-09-28 07:33:25Z" duration="0.001604" asserts="0">
                <failure>
                  <message><![CDATA[Shouldly.ChuckedAWobbly : 
    true
        should be
    False
        but was
    True]]></message>
                  <stack-trace><![CDATA[   at Shouldly.ShouldlyCoreExtensions.AssertAwesomely[T](T actual, Func`2 specifiedConstraint, Object originalActual, Object originalExpected) in c:\TeamCity\buildAgent\work\10efaabfa8adbd4e\src\Shouldly\ShouldlyCoreExtensions.cs:line 18
   at Shouldly.ShouldBeTestExtensions.ShouldBe[T](T actual, T expected) in c:\TeamCity\buildAgent\work\10efaabfa8adbd4e\src\Shouldly\ShouldBeTestExtensions.cs:line 17
   at AutomationLayer.ScenarioOutlineSteps.ThenTheScenarioWill(String result) in C:\DevProjects\Tools\pickles\test-harness\AutomationLayer\ScenarioOutlineSteps.cs:line 21
   at TechTalk.SpecFlow.Bindings.BindingInvoker.InvokeBinding(IBinding binding, IContextManager contextManager, Object[] arguments, ITestTracer testTracer, TimeSpan& duration)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStepMatch(BindingMatch match, Object[] arguments)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep(StepInstance stepInstance)
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   at Pickles.TestHarness.nunit3.ScenarioOutlinesFeature.ScenarioCleanup()
   at Pickles.TestHarness.nunit3.ScenarioOutlinesFeature.ThisIsAScenarioOutlineWhereOneScenarioFails(String result, String[] exampleTags) in C:\DevProjects\Tools\pickles\test-harness\nunit3\ScenarioOutlines.feature:line 34]]></stack-trace>
                </failure>
                <output><![CDATA[Then the scenario will 'fail_1'
-> error: 
    true
        should be
    False
        but was
    True
]]></output>
              </test-case>
            </test-suite>
            <test-suite type="ParameterizedMethod" id="0-1023" name="ThisIsAScenarioOutlineWhereOneScenarioIsInconclusive" fullname="Pickles.TestHarness.nunit3.ScenarioOutlinesFeature.ThisIsAScenarioOutlineWhereOneScenarioIsInconclusive" runstate="Runnable" testcasecount="3" result="Passed" start-time="2016-09-28 07:33:25Z" end-time="2016-09-28 07:33:25Z" duration="0.002061" total="3" passed="2" failed="0" inconclusive="1" skipped="0" asserts="0">
              <properties>
                <property name="Description" value="This is a scenario outline where one scenario is inconclusive" />
              </properties>
              <test-case id="0-1020" name="ThisIsAScenarioOutlineWhereOneScenarioIsInconclusive(&quot;pass_1&quot;,null)" fullname="Pickles.TestHarness.nunit3.ScenarioOutlinesFeature.ThisIsAScenarioOutlineWhereOneScenarioIsInconclusive(&quot;pass_1&quot;,null)" methodname="ThisIsAScenarioOutlineWhereOneScenarioIsInconclusive" classname="Pickles.TestHarness.nunit3.ScenarioOutlinesFeature" runstate="Runnable" seed="1888940438" result="Passed" start-time="2016-09-28 07:33:25Z" end-time="2016-09-28 07:33:25Z" duration="0.000266" asserts="0">
                <output><![CDATA[Then the scenario will 'pass_1'
-> done: ScenarioOutlineSteps.ThenTheScenarioWill("pass_1") (0,0s)
]]></output>
              </test-case>
              <test-case id="0-1021" name="ThisIsAScenarioOutlineWhereOneScenarioIsInconclusive(&quot;pass_2&quot;,null)" fullname="Pickles.TestHarness.nunit3.ScenarioOutlinesFeature.ThisIsAScenarioOutlineWhereOneScenarioIsInconclusive(&quot;pass_2&quot;,null)" methodname="ThisIsAScenarioOutlineWhereOneScenarioIsInconclusive" classname="Pickles.TestHarness.nunit3.ScenarioOutlinesFeature" runstate="Runnable" seed="1580158007" result="Passed" start-time="2016-09-28 07:33:25Z" end-time="2016-09-28 07:33:25Z" duration="0.000086" asserts="0">
                <output><![CDATA[Then the scenario will 'pass_2'
-> done: ScenarioOutlineSteps.ThenTheScenarioWill("pass_2") (0,0s)
]]></output>
              </test-case>
              <test-case id="0-1022" name="ThisIsAScenarioOutlineWhereOneScenarioIsInconclusive(&quot;inconclusive_1&quot;,null)" fullname="Pickles.TestHarness.nunit3.ScenarioOutlinesFeature.ThisIsAScenarioOutlineWhereOneScenarioIsInconclusive(&quot;inconclusive_1&quot;,null)" methodname="ThisIsAScenarioOutlineWhereOneScenarioIsInconclusive" classname="Pickles.TestHarness.nunit3.ScenarioOutlinesFeature" runstate="Runnable" seed="292299438" result="Inconclusive" start-time="2016-09-28 07:33:25Z" end-time="2016-09-28 07:33:25Z" duration="0.001491" asserts="0">
                <reason>
                  <message><![CDATA[One or more step definitions are not implemented yet.
  ScenarioOutlineSteps.ThenTheScenarioWill("inconclusive_1")]]></message>
                </reason>
                <output><![CDATA[Then the scenario will 'inconclusive_1'
-> pending: ScenarioOutlineSteps.ThenTheScenarioWill("inconclusive_1")
]]></output>
              </test-case>
            </test-suite>
          </test-suite>
          <test-suite type="TestFixture" id="0-1041" name="ScenariosWithSpecialCharactersFeature" fullname="Pickles.TestHarness.nunit3.ScenariosWithSpecialCharactersFeature" classname="Pickles.TestHarness.nunit3.ScenariosWithSpecialCharactersFeature" runstate="Runnable" testcasecount="11" result="Passed" start-time="2016-09-28 07:33:25Z" end-time="2016-09-28 07:33:25Z" duration="0.006030" total="11" passed="11" failed="0" inconclusive="0" skipped="0" asserts="0">
            <properties>
              <property name="Description" value="Scenarios With Special Characters" />
            </properties>
            <test-suite type="ParameterizedMethod" id="0-1056" name="ThisIsAScenarioOutlineWithAmpersand" fullname="Pickles.TestHarness.nunit3.ScenariosWithSpecialCharactersFeature.ThisIsAScenarioOutlineWithAmpersand" runstate="Runnable" testcasecount="1" result="Passed" start-time="2016-09-28 07:33:25Z" end-time="2016-09-28 07:33:25Z" duration="0.000754" total="1" passed="1" failed="0" inconclusive="0" skipped="0" asserts="0">
              <properties>
                <property name="Description" value="This is a scenario outline with ampersand &amp;" />
              </properties>
              <test-case id="0-1055" name="ThisIsAScenarioOutlineWithAmpersand(&quot;pass_1&quot;,null)" fullname="Pickles.TestHarness.nunit3.ScenariosWithSpecialCharactersFeature.ThisIsAScenarioOutlineWithAmpersand(&quot;pass_1&quot;,null)" methodname="ThisIsAScenarioOutlineWithAmpersand" classname="Pickles.TestHarness.nunit3.ScenariosWithSpecialCharactersFeature" runstate="Runnable" seed="1061146939" result="Passed" start-time="2016-09-28 07:33:25Z" end-time="2016-09-28 07:33:25Z" duration="0.000670" asserts="0">
                <output><![CDATA[Given the calculator has clean memory
-> done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0,0s)
Then the scenario will 'pass_1'
-> done: ScenarioOutlineSteps.ThenTheScenarioWill("pass_1") (0,0s)
]]></output>
              </test-case>
            </test-suite>
            <test-suite type="ParameterizedMethod" id="0-1054" name="ThisIsAScenarioOutlineWithGermanUmlautsAouBAOU" fullname="Pickles.TestHarness.nunit3.ScenariosWithSpecialCharactersFeature.ThisIsAScenarioOutlineWithGermanUmlautsAouBAOU" runstate="Runnable" testcasecount="1" result="Passed" start-time="2016-09-28 07:33:25Z" end-time="2016-09-28 07:33:25Z" duration="0.000482" total="1" passed="1" failed="0" inconclusive="0" skipped="0" asserts="0">
              <properties>
                <property name="Description" value="This is a scenario outline with german umlauts äöüß ÄÖÜ" />
              </properties>
              <test-case id="0-1053" name="ThisIsAScenarioOutlineWithGermanUmlautsAouBAOU(&quot;pass_1&quot;,null)" fullname="Pickles.TestHarness.nunit3.ScenariosWithSpecialCharactersFeature.ThisIsAScenarioOutlineWithGermanUmlautsAouBAOU(&quot;pass_1&quot;,null)" methodname="ThisIsAScenarioOutlineWithGermanUmlautsAouBAOU" classname="Pickles.TestHarness.nunit3.ScenariosWithSpecialCharactersFeature" runstate="Runnable" seed="1171064073" result="Passed" start-time="2016-09-28 07:33:25Z" end-time="2016-09-28 07:33:25Z" duration="0.000414" asserts="0">
                <output><![CDATA[Given the calculator has clean memory
-> done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0,0s)
Then the scenario will 'pass_1'
-> done: ScenarioOutlineSteps.ThenTheScenarioWill("pass_1") (0,0s)
]]></output>
              </test-case>
            </test-suite>
            <test-suite type="ParameterizedMethod" id="0-1044" name="ThisIsAScenarioOutlineWithParenthesesHyphenAndComma10_2030_40" fullname="Pickles.TestHarness.nunit3.ScenariosWithSpecialCharactersFeature.ThisIsAScenarioOutlineWithParenthesesHyphenAndComma10_2030_40" runstate="Runnable" testcasecount="1" result="Passed" start-time="2016-09-28 07:33:25Z" end-time="2016-09-28 07:33:25Z" duration="0.000485" total="1" passed="1" failed="0" inconclusive="0" skipped="0" asserts="0">
              <properties>
                <property name="Description" value="This is a scenario outline with parentheses, hyphen and comma (10-20, 30-40)" />
              </properties>
              <test-case id="0-1043" name="ThisIsAScenarioOutlineWithParenthesesHyphenAndComma10_2030_40(&quot;pass_1&quot;,null)" fullname="Pickles.TestHarness.nunit3.ScenariosWithSpecialCharactersFeature.ThisIsAScenarioOutlineWithParenthesesHyphenAndComma10_2030_40(&quot;pass_1&quot;,null)" methodname="ThisIsAScenarioOutlineWithParenthesesHyphenAndComma10_2030_40" classname="Pickles.TestHarness.nunit3.ScenariosWithSpecialCharactersFeature" runstate="Runnable" seed="1072944492" result="Passed" start-time="2016-09-28 07:33:25Z" end-time="2016-09-28 07:33:25Z" duration="0.000362" asserts="0">
                <output><![CDATA[Given the calculator has clean memory
-> done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0,0s)
Then the scenario will 'pass_1'
-> done: ScenarioOutlineSteps.ThenTheScenarioWill("pass_1") (0,0s)
]]></output>
              </test-case>
            </test-suite>
            <test-case id="0-1042" name="ThisIsAScenarioWithParenthesesHyphenAndComma10_2030_40" fullname="Pickles.TestHarness.nunit3.ScenariosWithSpecialCharactersFeature.ThisIsAScenarioWithParenthesesHyphenAndComma10_2030_40" methodname="ThisIsAScenarioWithParenthesesHyphenAndComma10_2030_40" classname="Pickles.TestHarness.nunit3.ScenariosWithSpecialCharactersFeature" runstate="Runnable" seed="657009205" result="Passed" start-time="2016-09-28 07:33:25Z" end-time="2016-09-28 07:33:25Z" duration="0.000588" asserts="0">
              <properties>
                <property name="Description" value="This is a scenario with parentheses, hyphen and comma (10-20, 30-40)" />
              </properties>
              <output><![CDATA[Given the calculator has clean memory
-> done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0,0s)
Given I have entered 50 into the calculator
-> done: AdditionSteps.GivenIHaveEnteredIntoTheCalculator(50) (0,0s)
And I have entered 70 into the calculator
-> done: AdditionSteps.GivenIHaveEnteredIntoTheCalculator(70) (0,0s)
When I press add
-> done: AdditionSteps.WhenIPressAdd() (0,0s)
Then the result should be 120 on the screen
-> done: AdditionSteps.ThenTheResultShouldBeOnTheScreen(120) (0,0s)
]]></output>
            </test-case>
            <test-suite type="ParameterizedMethod" id="0-1052" name="ThisScenarioContainsExamplesWithRegex_SpecialCharacters" fullname="Pickles.TestHarness.nunit3.ScenariosWithSpecialCharactersFeature.ThisScenarioContainsExamplesWithRegex_SpecialCharacters" runstate="Runnable" testcasecount="7" result="Passed" start-time="2016-09-28 07:33:25Z" end-time="2016-09-28 07:33:25Z" duration="0.003198" total="7" passed="7" failed="0" inconclusive="0" skipped="0" asserts="0">
              <properties>
                <property name="Description" value="This scenario contains examples with Regex-special characters" />
              </properties>
              <test-case id="0-1045" name="ThisScenarioContainsExamplesWithRegex_SpecialCharacters(&quot;**&quot;,null)" fullname="Pickles.TestHarness.nunit3.ScenariosWithSpecialCharactersFeature.ThisScenarioContainsExamplesWithRegex_SpecialCharacters(&quot;**&quot;,null)" methodname="ThisScenarioContainsExamplesWithRegex_SpecialCharacters" classname="Pickles.TestHarness.nunit3.ScenariosWithSpecialCharactersFeature" runstate="Runnable" seed="1958916467" result="Passed" start-time="2016-09-28 07:33:25Z" end-time="2016-09-28 07:33:25Z" duration="0.001010" asserts="0">
                <output><![CDATA[Given the calculator has clean memory
-> done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0,0s)
When I have special characters for regexes in the value, for example a '**'
-> done: ScenarioOutlineSteps.WhenIHaveSpecialCharactersForRegexesInTheValueForExampleARegex("**") (0,0s)
Then the scenario will 'PASS'
-> done: ScenarioOutlineSteps.ThenTheScenarioWill("PASS") (0,0s)
]]></output>
              </test-case>
              <test-case id="0-1046" name="ThisScenarioContainsExamplesWithRegex_SpecialCharacters(&quot;++&quot;,null)" fullname="Pickles.TestHarness.nunit3.ScenariosWithSpecialCharactersFeature.ThisScenarioContainsExamplesWithRegex_SpecialCharacters(&quot;++&quot;,null)" methodname="ThisScenarioContainsExamplesWithRegex_SpecialCharacters" classname="Pickles.TestHarness.nunit3.ScenariosWithSpecialCharactersFeature" runstate="Runnable" seed="592696544" result="Passed" start-time="2016-09-28 07:33:25Z" end-time="2016-09-28 07:33:25Z" duration="0.000112" asserts="0">
                <output><![CDATA[Given the calculator has clean memory
-> done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0,0s)
When I have special characters for regexes in the value, for example a '++'
-> done: ScenarioOutlineSteps.WhenIHaveSpecialCharactersForRegexesInTheValueForExampleARegex("++") (0,0s)
Then the scenario will 'PASS'
-> done: ScenarioOutlineSteps.ThenTheScenarioWill("PASS") (0,0s)
]]></output>
              </test-case>
              <test-case id="0-1047" name="ThisScenarioContainsExamplesWithRegex_SpecialCharacters(&quot;.*&quot;,null)" fullname="Pickles.TestHarness.nunit3.ScenariosWithSpecialCharactersFeature.ThisScenarioContainsExamplesWithRegex_SpecialCharacters(&quot;.*&quot;,null)" methodname="ThisScenarioContainsExamplesWithRegex_SpecialCharacters" classname="Pickles.TestHarness.nunit3.ScenariosWithSpecialCharactersFeature" runstate="Runnable" seed="1548583897" result="Passed" start-time="2016-09-28 07:33:25Z" end-time="2016-09-28 07:33:25Z" duration="0.000100" asserts="0">
                <output><![CDATA[Given the calculator has clean memory
-> done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0,0s)
When I have special characters for regexes in the value, for example a '.*'
-> done: ScenarioOutlineSteps.WhenIHaveSpecialCharactersForRegexesInTheValueForExampleARegex(".*") (0,0s)
Then the scenario will 'PASS'
-> done: ScenarioOutlineSteps.ThenTheScenarioWill("PASS") (0,0s)
]]></output>
              </test-case>
              <test-case id="0-1048" name="ThisScenarioContainsExamplesWithRegex_SpecialCharacters(&quot;[]&quot;,null)" fullname="Pickles.TestHarness.nunit3.ScenariosWithSpecialCharactersFeature.ThisScenarioContainsExamplesWithRegex_SpecialCharacters(&quot;[]&quot;,null)" methodname="ThisScenarioContainsExamplesWithRegex_SpecialCharacters" classname="Pickles.TestHarness.nunit3.ScenariosWithSpecialCharactersFeature" runstate="Runnable" seed="125979337" result="Passed" start-time="2016-09-28 07:33:25Z" end-time="2016-09-28 07:33:25Z" duration="0.000096" asserts="0">
                <output><![CDATA[Given the calculator has clean memory
-> done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0,0s)
When I have special characters for regexes in the value, for example a '[]'
-> done: ScenarioOutlineSteps.WhenIHaveSpecialCharactersForRegexesInTheValueForExampleARegex("[]") (0,0s)
Then the scenario will 'PASS'
-> done: ScenarioOutlineSteps.ThenTheScenarioWill("PASS") (0,0s)
]]></output>
              </test-case>
              <test-case id="0-1049" name="ThisScenarioContainsExamplesWithRegex_SpecialCharacters(&quot;{}&quot;,null)" fullname="Pickles.TestHarness.nunit3.ScenariosWithSpecialCharactersFeature.ThisScenarioContainsExamplesWithRegex_SpecialCharacters(&quot;{}&quot;,null)" methodname="ThisScenarioContainsExamplesWithRegex_SpecialCharacters" classname="Pickles.TestHarness.nunit3.ScenariosWithSpecialCharactersFeature" runstate="Runnable" seed="589179632" result="Passed" start-time="2016-09-28 07:33:25Z" end-time="2016-09-28 07:33:25Z" duration="0.000863" asserts="0">
                <output><![CDATA[Given the calculator has clean memory
-> done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0,0s)
When I have special characters for regexes in the value, for example a '{}'
-> done: ScenarioOutlineSteps.WhenIHaveSpecialCharactersForRegexesInTheValueForExampleARegex("{}") (0,0s)
Then the scenario will 'PASS'
-> done: ScenarioOutlineSteps.ThenTheScenarioWill("PASS") (0,0s)
]]></output>
              </test-case>
              <test-case id="0-1050" name="ThisScenarioContainsExamplesWithRegex_SpecialCharacters(&quot;()&quot;,null)" fullname="Pickles.TestHarness.nunit3.ScenariosWithSpecialCharactersFeature.ThisScenarioContainsExamplesWithRegex_SpecialCharacters(&quot;()&quot;,null)" methodname="ThisScenarioContainsExamplesWithRegex_SpecialCharacters" classname="Pickles.TestHarness.nunit3.ScenariosWithSpecialCharactersFeature" runstate="Runnable" seed="1141276088" result="Passed" start-time="2016-09-28 07:33:25Z" end-time="2016-09-28 07:33:25Z" duration="0.000116" asserts="0">
                <output><![CDATA[Given the calculator has clean memory
-> done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0,0s)
When I have special characters for regexes in the value, for example a '()'
-> done: ScenarioOutlineSteps.WhenIHaveSpecialCharactersForRegexesInTheValueForExampleARegex("()") (0,0s)
Then the scenario will 'PASS'
-> done: ScenarioOutlineSteps.ThenTheScenarioWill("PASS") (0,0s)
]]></output>
              </test-case>
              <test-case id="0-1051" name="ThisScenarioContainsExamplesWithRegex_SpecialCharacters(&quot;^.*(?&lt;foo&gt;BAR)\\s[^0-9]{3,4}A+$&quot;,null)" fullname="Pickles.TestHarness.nunit3.ScenariosWithSpecialCharactersFeature.ThisScenarioContainsExamplesWithRegex_SpecialCharacters(&quot;^.*(?&lt;foo&gt;BAR)\\s[^0-9]{3,4}A+$&quot;,null)" methodname="ThisScenarioContainsExamplesWithRegex_SpecialCharacters" classname="Pickles.TestHarness.nunit3.ScenariosWithSpecialCharactersFeature" runstate="Runnable" seed="976149245" result="Passed" start-time="2016-09-28 07:33:25Z" end-time="2016-09-28 07:33:25Z" duration="0.000114" asserts="0">
                <output><![CDATA[Given the calculator has clean memory
-> done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0,0s)
When I have special characters for regexes in the value, for example a '^.*(?<foo>BAR)\s[^0-9]{3,4}A+$'
-> done: ScenarioOutlineSteps.WhenIHaveSpecialCharactersForRegexesInTheValueForExampleARegex("^.*(?<foo>BAR)\s[...") (0,0s)
Then the scenario will 'PASS'
-> done: ScenarioOutlineSteps.ThenTheScenarioWill("PASS") (0,0s)
]]></output>
              </test-case>
            </test-suite>
          </test-suite>
        </test-suite>
      </test-suite>
    </test-suite>
  </test-suite>
</test-run>