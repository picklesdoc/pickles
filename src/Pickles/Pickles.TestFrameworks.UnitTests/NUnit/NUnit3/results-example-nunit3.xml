<?xml version="1.0" encoding="utf-8" standalone="no"?>
<test-run id="2" testcasecount="46" result="Failed" total="46" passed="30" failed="9" inconclusive="6" skipped="1" asserts="0" engine-version="3.6.0.0" clr-version="4.0.30319.42000" start-time="2017-08-08 10:19:33Z" end-time="2017-08-08 10:19:37Z" duration="3.585110">
  <command-line><![CDATA["c:\Dev\Code\GitHub\DirkRombauts\pickles\\test-harness\packages\NUnit.ConsoleRunner.3.6.0\tools\nunit3-console.exe"  "c:\Dev\Code\GitHub\DirkRombauts\pickles\\test-harness\nunit3\bin\Debug\nunit3Harness.dll" /result="c:\Dev\Code\GitHub\DirkRombauts\pickles\\results-example-nunit3.xml"]]></command-line>
  <test-suite type="Assembly" id="0-1067" name="nunit3Harness.dll" fullname="c:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\nunit3\bin\Debug\nunit3Harness.dll" runstate="Runnable" testcasecount="46" result="Failed" site="Child" start-time="2017-08-08 10:19:35Z" end-time="2017-08-08 10:19:37Z" duration="2.283122" total="46" passed="30" failed="9" warnings="0" inconclusive="6" skipped="1" asserts="0">
    <environment framework-version="3.6.0.0" clr-version="4.0.30319.42000" os-version="Microsoft Windows NT 6.1.7601 Service Pack 1" platform="Win32NT" cwd="c:\Dev\Code\GitHub\DirkRombauts\pickles" machine-name="DT000326" user="pju" user-domain="BRFKREDIT" culture="da-DK" uiculture="da-DK" os-architecture="x64" />
    <settings>
      <setting name="DisposeRunners" value="True" />
      <setting name="WorkDirectory" value="c:\Dev\Code\GitHub\DirkRombauts\pickles" />
      <setting name="ImageRuntimeVersion" value="4.0.30319" />
      <setting name="ImageTargetFrameworkName" value=".NETFramework,Version=v4.5" />
      <setting name="ImageRequiresX86" value="False" />
      <setting name="ImageRequiresDefaultAppDomainAssemblyResolver" value="False" />
      <setting name="NumberOfTestWorkers" value="8" />
    </settings>
    <properties>
      <property name="_PID" value="23180" />
      <property name="_APPDOMAIN" value="domain-" />
    </properties>
    <failure>
      <message><![CDATA[One or more child tests had errors]]></message>
    </failure>
    <test-suite type="TestSuite" id="0-1068" name="Pickles" fullname="Pickles" runstate="Runnable" testcasecount="46" result="Failed" site="Child" start-time="2017-08-08 10:19:35Z" end-time="2017-08-08 10:19:37Z" duration="2.242350" total="46" passed="30" failed="9" warnings="0" inconclusive="6" skipped="1" asserts="0">
      <failure>
        <message><![CDATA[One or more child tests had errors]]></message>
      </failure>
      <test-suite type="TestSuite" id="0-1069" name="TestHarness" fullname="Pickles.TestHarness" runstate="Runnable" testcasecount="46" result="Failed" site="Child" start-time="2017-08-08 10:19:35Z" end-time="2017-08-08 10:19:37Z" duration="2.225864" total="46" passed="30" failed="9" warnings="0" inconclusive="6" skipped="1" asserts="0">
        <failure>
          <message><![CDATA[One or more child tests had errors]]></message>
        </failure>
        <test-suite type="TestSuite" id="0-1070" name="nunit3" fullname="Pickles.TestHarness.nunit3" runstate="Runnable" testcasecount="46" result="Failed" site="Child" start-time="2017-08-08 10:19:35Z" end-time="2017-08-08 10:19:37Z" duration="2.209147" total="46" passed="30" failed="9" warnings="0" inconclusive="6" skipped="1" asserts="0">
          <failure>
            <message><![CDATA[One or more child tests had errors]]></message>
          </failure>
          <test-suite type="TestFixture" id="0-1000" name="AdditionFeature" fullname="Pickles.TestHarness.nunit3.AdditionFeature" classname="Pickles.TestHarness.nunit3.AdditionFeature" runstate="Runnable" testcasecount="6" result="Failed" site="Child" start-time="2017-08-08 10:19:35Z" end-time="2017-08-08 10:19:36Z" duration="0.993555" total="6" passed="3" failed="1" warnings="0" inconclusive="1" skipped="1" asserts="0">
            <properties>
              <property name="Description" value="Addition" />
            </properties>
            <failure>
              <message><![CDATA[One or more child tests had errors]]></message>
            </failure>
            <test-suite type="ParameterizedMethod" id="0-1003" name="AddingSeveralNumbers" fullname="Pickles.TestHarness.nunit3.AdditionFeature.AddingSeveralNumbers" classname="Pickles.TestHarness.nunit3.AdditionFeature" runstate="Runnable" testcasecount="2" result="Passed" start-time="2017-08-08 10:19:35Z" end-time="2017-08-08 10:19:36Z" duration="0.257897" total="2" passed="2" failed="0" warnings="0" inconclusive="0" skipped="0" asserts="0">
              <properties>
                <property name="Description" value="Adding several numbers" />
                <property name="Category" value="tag2" />
              </properties>
              <test-case id="0-1001" name="AddingSeveralNumbers(&quot;60&quot;,&quot;70&quot;,&quot;130&quot;,&quot;260&quot;,null)" fullname="Pickles.TestHarness.nunit3.AdditionFeature.AddingSeveralNumbers(&quot;60&quot;,&quot;70&quot;,&quot;130&quot;,&quot;260&quot;,null)" methodname="AddingSeveralNumbers" classname="Pickles.TestHarness.nunit3.AdditionFeature" runstate="Runnable" seed="1472781879" result="Passed" start-time="2017-08-08 10:19:35Z" end-time="2017-08-08 10:19:36Z" duration="0.245661" asserts="0">
                <output><![CDATA[Given the calculator has clean memory
-> done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0,0s)
Given I have entered 60 into the calculator
-> done: AdditionSteps.GivenIHaveEnteredIntoTheCalculator(60) (0,0s)
And I have entered 70 into the calculator
-> done: AdditionSteps.GivenIHaveEnteredIntoTheCalculator(70) (0,0s)
And I have entered 130 into the calculator
-> done: AdditionSteps.GivenIHaveEnteredIntoTheCalculator(130) (0,0s)
When I press add
-> done: AdditionSteps.WhenIPressAdd() (0,0s)
Then the result should be 260 on the screen
-> done: AdditionSteps.ThenTheResultShouldBeOnTheScreen(260) (0,0s)
]]></output>
              </test-case>
              <test-case id="0-1002" name="AddingSeveralNumbers(&quot;40&quot;,&quot;50&quot;,&quot;90&quot;,&quot;180&quot;,null)" fullname="Pickles.TestHarness.nunit3.AdditionFeature.AddingSeveralNumbers(&quot;40&quot;,&quot;50&quot;,&quot;90&quot;,&quot;180&quot;,null)" methodname="AddingSeveralNumbers" classname="Pickles.TestHarness.nunit3.AdditionFeature" runstate="Runnable" seed="2134336420" result="Passed" start-time="2017-08-08 10:19:36Z" end-time="2017-08-08 10:19:36Z" duration="0.000683" asserts="0">
                <output><![CDATA[Given the calculator has clean memory
-> done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0,0s)
Given I have entered 40 into the calculator
-> done: AdditionSteps.GivenIHaveEnteredIntoTheCalculator(40) (0,0s)
And I have entered 50 into the calculator
-> done: AdditionSteps.GivenIHaveEnteredIntoTheCalculator(50) (0,0s)
And I have entered 90 into the calculator
-> done: AdditionSteps.GivenIHaveEnteredIntoTheCalculator(90) (0,0s)
When I press add
-> done: AdditionSteps.WhenIPressAdd() (0,0s)
Then the result should be 180 on the screen
-> done: AdditionSteps.ThenTheResultShouldBeOnTheScreen(180) (0,0s)
]]></output>
              </test-case>
            </test-suite>
            <test-case id="0-1004" name="AddTwoNumbers" fullname="Pickles.TestHarness.nunit3.AdditionFeature.AddTwoNumbers" methodname="AddTwoNumbers" classname="Pickles.TestHarness.nunit3.AdditionFeature" runstate="Runnable" seed="134352728" result="Passed" start-time="2017-08-08 10:19:36Z" end-time="2017-08-08 10:19:36Z" duration="0.000930" asserts="0">
              <properties>
                <property name="Description" value="Add two numbers" />
                <property name="Category" value="tag1" />
              </properties>
              <output><![CDATA[Given the calculator has clean memory
-> done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0,0s)
Given I have entered 1 into the calculator
-> done: AdditionSteps.GivenIHaveEnteredIntoTheCalculator(1) (0,0s)
And I have entered 2 into the calculator
-> done: AdditionSteps.GivenIHaveEnteredIntoTheCalculator(2) (0,0s)
When I press add
-> done: AdditionSteps.WhenIPressAdd() (0,0s)
Then the result should be 3 on the screen
-> done: AdditionSteps.ThenTheResultShouldBeOnTheScreen(3) (0,0s)
]]></output>
            </test-case>
            <test-case id="0-1005" name="FailToAddTwoNumbers" fullname="Pickles.TestHarness.nunit3.AdditionFeature.FailToAddTwoNumbers" methodname="FailToAddTwoNumbers" classname="Pickles.TestHarness.nunit3.AdditionFeature" runstate="Runnable" seed="1553244394" result="Failed" label="Error" start-time="2017-08-08 10:19:36Z" end-time="2017-08-08 10:19:36Z" duration="0.028145" asserts="0">
              <properties>
                <property name="Description" value="Fail to add two numbers" />
                <property name="Category" value="tag1" />
              </properties>
              <failure>
                <message><![CDATA[System.FormatException : Inputstrengen var ikke i et korrekt format.]]></message>
                <stack-trace><![CDATA[   ved System.Number.StringToNumber(String str, NumberStyles options, NumberBuffer& number, NumberFormatInfo info, Boolean parseDecimal)
   ved System.Number.ParseInt32(String s, NumberStyles style, NumberFormatInfo info)
   ved System.String.System.IConvertible.ToInt32(IFormatProvider provider)
   ved System.Convert.ChangeType(Object value, Type conversionType, IFormatProvider provider)
   ved System.Linq.Enumerable.<SelectIterator>d__5`2.MoveNext()
   ved System.Linq.Buffer`1..ctor(IEnumerable`1 source)
   ved System.Linq.Enumerable.ToArray[TSource](IEnumerable`1 source)
   ved TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.GetExecuteArguments(BindingMatch match)
   ved TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep(StepInstance stepInstance)
   ved TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   ved Pickles.TestHarness.nunit3.AdditionFeature.ScenarioCleanup()
   ved Pickles.TestHarness.nunit3.AdditionFeature.FailToAddTwoNumbers() i C:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\nunit3\Addition.feature:linje 34]]></stack-trace>
              </failure>
              <output><![CDATA[Given the calculator has clean memory
-> done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0,0s)
Given I have entered 1 into the calculator
-> done: AdditionSteps.GivenIHaveEnteredIntoTheCalculator(1) (0,0s)
And I have entered 2.2 into the calculator
-> done: AdditionSteps.GivenIHaveEnteredIntoTheCalculator(2,2) (0,0s)
When I press add
-> done: AdditionSteps.WhenIPressAdd() (0,0s)
Then the result should be 3.2 on the screen
-> error: Inputstrengen var ikke i et korrekt format.
]]></output>
            </test-case>
            <test-case id="0-1006" name="IgnoredAddingTwoNumbers" fullname="Pickles.TestHarness.nunit3.AdditionFeature.IgnoredAddingTwoNumbers" methodname="IgnoredAddingTwoNumbers" classname="Pickles.TestHarness.nunit3.AdditionFeature" runstate="Ignored" seed="1217532099" result="Skipped" label="Ignored" start-time="2017-08-08 10:19:36Z" end-time="2017-08-08 10:19:36Z" duration="0.001011" asserts="0">
              <properties>
                <property name="Description" value="Ignored adding two numbers" />
                <property name="_SKIPREASON" value="" />
              </properties>
              <reason>
                <message><![CDATA[]]></message>
              </reason>
            </test-case>
            <test-case id="0-1007" name="NotAutomatedAddingTwoNumbers" fullname="Pickles.TestHarness.nunit3.AdditionFeature.NotAutomatedAddingTwoNumbers" methodname="NotAutomatedAddingTwoNumbers" classname="Pickles.TestHarness.nunit3.AdditionFeature" runstate="Runnable" seed="489036212" result="Inconclusive" start-time="2017-08-08 10:19:36Z" end-time="2017-08-08 10:19:36Z" duration="0.114413" asserts="0">
              <properties>
                <property name="Description" value="Not automated adding two numbers" />
              </properties>
              <reason>
                <message><![CDATA[No matching step definition found for one or more steps.
using System;
using TechTalk.SpecFlow;

namespace MyNamespace
{
    [Binding]
    public class StepDefinitions
    {
        [Given(@"unimplemented step")]
        public void GivenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }
        
        [When(@"unimplemented step")]
        public void WhenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }
        
        [Then(@"unimplemented step")]
        public void ThenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }
    }
}
]]></message>
              </reason>
              <output><![CDATA[Given the calculator has clean memory
-> done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0,0s)
Given unimplemented step
-> No matching step definition found for the step. Use the following code to create one:
        [Given(@"unimplemented step")]
        public void GivenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }

When unimplemented step
-> No matching step definition found for the step. Use the following code to create one:
        [When(@"unimplemented step")]
        public void WhenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }

Then unimplemented step
-> No matching step definition found for the step. Use the following code to create one:
        [Then(@"unimplemented step")]
        public void ThenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }

]]></output>
            </test-case>
          </test-suite>
          <test-suite type="TestFixture" id="0-1008" name="FailingBackgroundFeature" fullname="Pickles.TestHarness.nunit3.FailingBackgroundFeature" classname="Pickles.TestHarness.nunit3.FailingBackgroundFeature" runstate="Runnable" testcasecount="3" result="Failed" site="Child" start-time="2017-08-08 10:19:36Z" end-time="2017-08-08 10:19:36Z" duration="0.024185" total="3" passed="0" failed="3" warnings="0" inconclusive="0" skipped="0" asserts="0">
            <properties>
              <property name="Description" value="Failing Background" />
            </properties>
            <failure>
              <message><![CDATA[One or more child tests had errors]]></message>
            </failure>
            <test-suite type="ParameterizedMethod" id="0-1012" name="AddingSeveralNumbers" fullname="Pickles.TestHarness.nunit3.FailingBackgroundFeature.AddingSeveralNumbers" classname="Pickles.TestHarness.nunit3.FailingBackgroundFeature" runstate="Runnable" testcasecount="2" result="Failed" site="Child" start-time="2017-08-08 10:19:36Z" end-time="2017-08-08 10:19:36Z" duration="0.018010" total="2" passed="0" failed="2" warnings="0" inconclusive="0" skipped="0" asserts="0">
              <properties>
                <property name="Description" value="Adding several numbers" />
              </properties>
              <failure>
                <message><![CDATA[One or more child tests had errors]]></message>
              </failure>
              <test-case id="0-1010" name="AddingSeveralNumbers(&quot;60&quot;,&quot;70&quot;,&quot;130&quot;,&quot;260&quot;,null)" fullname="Pickles.TestHarness.nunit3.FailingBackgroundFeature.AddingSeveralNumbers(&quot;60&quot;,&quot;70&quot;,&quot;130&quot;,&quot;260&quot;,null)" methodname="AddingSeveralNumbers" classname="Pickles.TestHarness.nunit3.FailingBackgroundFeature" runstate="Runnable" seed="701787048" result="Failed" label="Error" start-time="2017-08-08 10:19:36Z" end-time="2017-08-08 10:19:36Z" duration="0.013306" asserts="0">
                <failure>
                  <message><![CDATA[NFluent.FluentCheckException : 
The checked value is different from the expected one.
The checked value:
	[True]
The expected value:
	[False]]]></message>
                  <stack-trace><![CDATA[   ved NFluent.Helpers.EqualityHelper.IsEqualTo(Object instance, Object expected)
   ved NFluent.Extensibility.Checker`2.ExecuteCheck(Action action, String negatedExceptionMessage)
   ved AutomationLayer.MarkTestAs.Failing() i C:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\AutomationLayer\MarkTestAs.cs:linje 15
   ved AutomationLayer.AdditionSteps.GivenTheBackgroundStepFails() i C:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\AutomationLayer\AdditionSteps.cs:linje 25
   ved TechTalk.SpecFlow.Bindings.BindingInvoker.InvokeBinding(IBinding binding, IContextManager contextManager, Object[] arguments, ITestTracer testTracer, TimeSpan& duration)
   ved TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStepMatch(BindingMatch match, Object[] arguments)
   ved TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep(StepInstance stepInstance)
   ved TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   ved Pickles.TestHarness.nunit3.FailingBackgroundFeature.ScenarioCleanup()
   ved Pickles.TestHarness.nunit3.FailingBackgroundFeature.AddingSeveralNumbers(String firstNumber, String secondNumber, String thirdNumber, String result, String[] exampleTags) i C:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\nunit3\FailingBackground.feature:linje 19]]></stack-trace>
                </failure>
                <output><![CDATA[Given the background step fails
-> error: 
The checked value is different from the expected one.
The checked value:
	[True]
The expected value:
	[False]
And the calculator has clean memory
-> skipped because of previous errors
Given I have entered 60 into the calculator
-> skipped because of previous errors
And I have entered 70 into the calculator
-> skipped because of previous errors
And I have entered 130 into the calculator
-> skipped because of previous errors
When I press add
-> skipped because of previous errors
Then the result should be 260 on the screen
-> skipped because of previous errors
]]></output>
              </test-case>
              <test-case id="0-1011" name="AddingSeveralNumbers(&quot;40&quot;,&quot;50&quot;,&quot;90&quot;,&quot;180&quot;,null)" fullname="Pickles.TestHarness.nunit3.FailingBackgroundFeature.AddingSeveralNumbers(&quot;40&quot;,&quot;50&quot;,&quot;90&quot;,&quot;180&quot;,null)" methodname="AddingSeveralNumbers" classname="Pickles.TestHarness.nunit3.FailingBackgroundFeature" runstate="Runnable" seed="340026228" result="Failed" label="Error" start-time="2017-08-08 10:19:36Z" end-time="2017-08-08 10:19:36Z" duration="0.001601" asserts="0">
                <failure>
                  <message><![CDATA[NFluent.FluentCheckException : 
The checked value is different from the expected one.
The checked value:
	[True]
The expected value:
	[False]]]></message>
                  <stack-trace><![CDATA[   ved NFluent.Helpers.EqualityHelper.IsEqualTo(Object instance, Object expected)
   ved NFluent.Extensibility.Checker`2.ExecuteCheck(Action action, String negatedExceptionMessage)
   ved AutomationLayer.MarkTestAs.Failing() i C:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\AutomationLayer\MarkTestAs.cs:linje 15
   ved AutomationLayer.AdditionSteps.GivenTheBackgroundStepFails() i C:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\AutomationLayer\AdditionSteps.cs:linje 25
   ved TechTalk.SpecFlow.Bindings.BindingInvoker.InvokeBinding(IBinding binding, IContextManager contextManager, Object[] arguments, ITestTracer testTracer, TimeSpan& duration)
   ved TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStepMatch(BindingMatch match, Object[] arguments)
   ved TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep(StepInstance stepInstance)
   ved TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   ved Pickles.TestHarness.nunit3.FailingBackgroundFeature.ScenarioCleanup()
   ved Pickles.TestHarness.nunit3.FailingBackgroundFeature.AddingSeveralNumbers(String firstNumber, String secondNumber, String thirdNumber, String result, String[] exampleTags) i C:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\nunit3\FailingBackground.feature:linje 19]]></stack-trace>
                </failure>
                <output><![CDATA[Given the background step fails
-> error: 
The checked value is different from the expected one.
The checked value:
	[True]
The expected value:
	[False]
And the calculator has clean memory
-> skipped because of previous errors
Given I have entered 40 into the calculator
-> skipped because of previous errors
And I have entered 50 into the calculator
-> skipped because of previous errors
And I have entered 90 into the calculator
-> skipped because of previous errors
When I press add
-> skipped because of previous errors
Then the result should be 180 on the screen
-> skipped because of previous errors
]]></output>
              </test-case>
            </test-suite>
            <test-case id="0-1009" name="AddTwoNumbers" fullname="Pickles.TestHarness.nunit3.FailingBackgroundFeature.AddTwoNumbers" methodname="AddTwoNumbers" classname="Pickles.TestHarness.nunit3.FailingBackgroundFeature" runstate="Runnable" seed="2034876033" result="Failed" label="Error" start-time="2017-08-08 10:19:36Z" end-time="2017-08-08 10:19:36Z" duration="0.001688" asserts="0">
              <properties>
                <property name="Description" value="Add two numbers" />
              </properties>
              <failure>
                <message><![CDATA[NFluent.FluentCheckException : 
The checked value is different from the expected one.
The checked value:
	[True]
The expected value:
	[False]]]></message>
                <stack-trace><![CDATA[   ved NFluent.Helpers.EqualityHelper.IsEqualTo(Object instance, Object expected)
   ved NFluent.Extensibility.Checker`2.ExecuteCheck(Action action, String negatedExceptionMessage)
   ved AutomationLayer.MarkTestAs.Failing() i C:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\AutomationLayer\MarkTestAs.cs:linje 15
   ved AutomationLayer.AdditionSteps.GivenTheBackgroundStepFails() i C:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\AutomationLayer\AdditionSteps.cs:linje 25
   ved TechTalk.SpecFlow.Bindings.BindingInvoker.InvokeBinding(IBinding binding, IContextManager contextManager, Object[] arguments, ITestTracer testTracer, TimeSpan& duration)
   ved TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStepMatch(BindingMatch match, Object[] arguments)
   ved TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep(StepInstance stepInstance)
   ved TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   ved Pickles.TestHarness.nunit3.FailingBackgroundFeature.ScenarioCleanup()
   ved Pickles.TestHarness.nunit3.FailingBackgroundFeature.AddTwoNumbers() i C:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\nunit3\FailingBackground.feature:linje 12]]></stack-trace>
              </failure>
              <output><![CDATA[Given the background step fails
-> error: 
The checked value is different from the expected one.
The checked value:
	[True]
The expected value:
	[False]
And the calculator has clean memory
-> skipped because of previous errors
Given I have entered 50 into the calculator
-> skipped because of previous errors
And I have entered 70 into the calculator
-> skipped because of previous errors
When I press add
-> skipped because of previous errors
Then the result should be 120 on the screen
-> skipped because of previous errors
]]></output>
            </test-case>
          </test-suite>
          <test-suite type="TestSuite" id="0-1071" name="MinimalFeatures" fullname="Pickles.TestHarness.nunit3.MinimalFeatures" runstate="Runnable" testcasecount="6" result="Failed" site="Child" start-time="2017-08-08 10:19:35Z" end-time="2017-08-08 10:19:36Z" duration="1.053592" total="6" passed="3" failed="1" warnings="0" inconclusive="2" skipped="0" asserts="0">
            <failure>
              <message><![CDATA[One or more child tests had errors]]></message>
            </failure>
            <test-suite type="TestFixture" id="0-1058" name="FailingFeature" fullname="Pickles.TestHarness.nunit3.MinimalFeatures.FailingFeature" classname="Pickles.TestHarness.nunit3.MinimalFeatures.FailingFeature" runstate="Runnable" testcasecount="3" result="Failed" site="Child" start-time="2017-08-08 10:19:36Z" end-time="2017-08-08 10:19:36Z" duration="0.017236" total="3" passed="1" failed="1" warnings="0" inconclusive="1" skipped="0" asserts="0">
              <properties>
                <property name="Description" value="Failing" />
              </properties>
              <failure>
                <message><![CDATA[One or more child tests had errors]]></message>
              </failure>
              <test-case id="0-1061" name="FailingFeatureFailingScenario" fullname="Pickles.TestHarness.nunit3.MinimalFeatures.FailingFeature.FailingFeatureFailingScenario" methodname="FailingFeatureFailingScenario" classname="Pickles.TestHarness.nunit3.MinimalFeatures.FailingFeature" runstate="Runnable" seed="2002983866" result="Failed" label="Error" start-time="2017-08-08 10:19:36Z" end-time="2017-08-08 10:19:36Z" duration="0.003909" asserts="0">
                <properties>
                  <property name="Description" value="Failing Feature Failing Scenario" />
                </properties>
                <failure>
                  <message><![CDATA[NFluent.FluentCheckException : 
The checked value is different from the expected one.
The checked value:
	[True]
The expected value:
	[False]]]></message>
                  <stack-trace><![CDATA[   ved NFluent.Helpers.EqualityHelper.IsEqualTo(Object instance, Object expected)
   ved NFluent.Extensibility.Checker`2.ExecuteCheck(Action action, String negatedExceptionMessage)
   ved AutomationLayer.MarkTestAs.Failing() i C:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\AutomationLayer\MarkTestAs.cs:linje 15
   ved AutomationLayer.MinimalFeatures.MinimalSteps.ThenFailingStep() i C:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\AutomationLayer\MinimalFeatures\MinimalSteps.cs:linje 30
   ved TechTalk.SpecFlow.Bindings.BindingInvoker.InvokeBinding(IBinding binding, IContextManager contextManager, Object[] arguments, ITestTracer testTracer, TimeSpan& duration)
   ved TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStepMatch(BindingMatch match, Object[] arguments)
   ved TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep(StepInstance stepInstance)
   ved TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   ved Pickles.TestHarness.nunit3.MinimalFeatures.FailingFeature.ScenarioCleanup()
   ved Pickles.TestHarness.nunit3.MinimalFeatures.FailingFeature.FailingFeatureFailingScenario() i C:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\nunit3\Minimal Features\Failing.feature:linje 10]]></stack-trace>
                </failure>
                <output><![CDATA[Then failing step
-> error: 
The checked value is different from the expected one.
The checked value:
	[True]
The expected value:
	[False]
]]></output>
              </test-case>
              <test-case id="0-1060" name="FailingFeatureInconclusiveScenario" fullname="Pickles.TestHarness.nunit3.MinimalFeatures.FailingFeature.FailingFeatureInconclusiveScenario" methodname="FailingFeatureInconclusiveScenario" classname="Pickles.TestHarness.nunit3.MinimalFeatures.FailingFeature" runstate="Runnable" seed="192478751" result="Inconclusive" start-time="2017-08-08 10:19:36Z" end-time="2017-08-08 10:19:36Z" duration="0.006973" asserts="0">
                <properties>
                  <property name="Description" value="Failing Feature Inconclusive Scenario" />
                </properties>
                <reason>
                  <message><![CDATA[One or more step definitions are not implemented yet.
  MinimalSteps.ThenInconclusiveStep()]]></message>
                </reason>
                <output><![CDATA[Then inconclusive step
-> pending: MinimalSteps.ThenInconclusiveStep()
]]></output>
              </test-case>
              <test-case id="0-1059" name="FailingFeaturePassingScenario" fullname="Pickles.TestHarness.nunit3.MinimalFeatures.FailingFeature.FailingFeaturePassingScenario" methodname="FailingFeaturePassingScenario" classname="Pickles.TestHarness.nunit3.MinimalFeatures.FailingFeature" runstate="Runnable" seed="1173099113" result="Passed" start-time="2017-08-08 10:19:36Z" end-time="2017-08-08 10:19:36Z" duration="0.001089" asserts="0">
                <properties>
                  <property name="Description" value="Failing Feature Passing Scenario" />
                </properties>
                <output><![CDATA[Then passing step
-> done: MinimalSteps.ThenPassingStep() (0,0s)
]]></output>
              </test-case>
            </test-suite>
            <test-suite type="TestFixture" id="0-1062" name="InconclusiveFeature" fullname="Pickles.TestHarness.nunit3.MinimalFeatures.InconclusiveFeature" classname="Pickles.TestHarness.nunit3.MinimalFeatures.InconclusiveFeature" runstate="Runnable" testcasecount="2" result="Passed" start-time="2017-08-08 10:19:36Z" end-time="2017-08-08 10:19:36Z" duration="0.006244" total="2" passed="1" failed="0" warnings="0" inconclusive="1" skipped="0" asserts="0">
              <properties>
                <property name="Description" value="Inconclusive" />
              </properties>
              <test-case id="0-1064" name="InconclusiveFeatureInconclusiveScenario" fullname="Pickles.TestHarness.nunit3.MinimalFeatures.InconclusiveFeature.InconclusiveFeatureInconclusiveScenario" methodname="InconclusiveFeatureInconclusiveScenario" classname="Pickles.TestHarness.nunit3.MinimalFeatures.InconclusiveFeature" runstate="Runnable" seed="670984710" result="Inconclusive" start-time="2017-08-08 10:19:36Z" end-time="2017-08-08 10:19:36Z" duration="0.002842" asserts="0">
                <properties>
                  <property name="Description" value="Inconclusive Feature Inconclusive Scenario" />
                </properties>
                <reason>
                  <message><![CDATA[One or more step definitions are not implemented yet.
  MinimalSteps.ThenInconclusiveStep()]]></message>
                </reason>
                <output><![CDATA[Then inconclusive step
-> pending: MinimalSteps.ThenInconclusiveStep()
]]></output>
              </test-case>
              <test-case id="0-1063" name="InconclusiveFeaturePassingScenario" fullname="Pickles.TestHarness.nunit3.MinimalFeatures.InconclusiveFeature.InconclusiveFeaturePassingScenario" methodname="InconclusiveFeaturePassingScenario" classname="Pickles.TestHarness.nunit3.MinimalFeatures.InconclusiveFeature" runstate="Runnable" seed="1704543057" result="Passed" start-time="2017-08-08 10:19:36Z" end-time="2017-08-08 10:19:36Z" duration="0.000559" asserts="0">
                <properties>
                  <property name="Description" value="Inconclusive Feature Passing Scenario" />
                </properties>
                <output><![CDATA[Then passing step
-> done: MinimalSteps.ThenPassingStep() (0,0s)
]]></output>
              </test-case>
            </test-suite>
            <test-suite type="TestFixture" id="0-1065" name="PassingFeature" fullname="Pickles.TestHarness.nunit3.MinimalFeatures.PassingFeature" classname="Pickles.TestHarness.nunit3.MinimalFeatures.PassingFeature" runstate="Runnable" testcasecount="1" result="Passed" start-time="2017-08-08 10:19:36Z" end-time="2017-08-08 10:19:36Z" duration="0.004662" total="1" passed="1" failed="0" warnings="0" inconclusive="0" skipped="0" asserts="0">
              <properties>
                <property name="Description" value="Passing" />
              </properties>
              <test-case id="0-1066" name="PassingFeaturePassingScenario" fullname="Pickles.TestHarness.nunit3.MinimalFeatures.PassingFeature.PassingFeaturePassingScenario" methodname="PassingFeaturePassingScenario" classname="Pickles.TestHarness.nunit3.MinimalFeatures.PassingFeature" runstate="Runnable" seed="1443773421" result="Passed" start-time="2017-08-08 10:19:36Z" end-time="2017-08-08 10:19:36Z" duration="0.001160" asserts="0">
                <properties>
                  <property name="Description" value="Passing Feature Passing Scenario" />
                </properties>
                <output><![CDATA[Then passing step
-> done: MinimalSteps.ThenPassingStep() (0,0s)
]]></output>
              </test-case>
            </test-suite>
          </test-suite>
          <test-suite type="TestFixture" id="0-1013" name="NotAutomatedAtAllFeature" fullname="Pickles.TestHarness.nunit3.NotAutomatedAtAllFeature" classname="Pickles.TestHarness.nunit3.NotAutomatedAtAllFeature" runstate="Runnable" testcasecount="1" result="Failed" site="Child" start-time="2017-08-08 10:19:36Z" end-time="2017-08-08 10:19:36Z" duration="0.014496" total="1" passed="0" failed="1" warnings="0" inconclusive="0" skipped="0" asserts="0">
            <properties>
              <property name="Description" value="NotAutomatedAtAll" />
            </properties>
            <failure>
              <message><![CDATA[One or more child tests had errors]]></message>
            </failure>
            <test-case id="0-1014" name="AddTwoNumbers" fullname="Pickles.TestHarness.nunit3.NotAutomatedAtAllFeature.AddTwoNumbers" methodname="AddTwoNumbers" classname="Pickles.TestHarness.nunit3.NotAutomatedAtAllFeature" runstate="Runnable" seed="780393265" result="Failed" label="Error" start-time="2017-08-08 10:19:36Z" end-time="2017-08-08 10:19:36Z" duration="0.006801" asserts="0">
              <properties>
                <property name="Description" value="Add two numbers" />
                <property name="Category" value="mytag" />
              </properties>
              <failure>
                <message><![CDATA[System.NullReferenceException : Objektreferencen er ikke indstillet til en forekomst af et objekt.]]></message>
                <stack-trace><![CDATA[   ved AutomationLayer.AdditionSteps.GivenIHaveEnteredIntoTheCalculator(Decimal operand) i C:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\AutomationLayer\AdditionSteps.cs:linje 31
   ved lambda_method(Closure , IContextManager , Decimal )
   ved TechTalk.SpecFlow.Bindings.BindingInvoker.InvokeBinding(IBinding binding, IContextManager contextManager, Object[] arguments, ITestTracer testTracer, TimeSpan& duration)
   ved TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStepMatch(BindingMatch match, Object[] arguments)
   ved TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep(StepInstance stepInstance)
   ved TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   ved Pickles.TestHarness.nunit3.NotAutomatedAtAllFeature.ScenarioCleanup()
   ved Pickles.TestHarness.nunit3.NotAutomatedAtAllFeature.AddTwoNumbers() i C:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\nunit3\NotAutomatedAtAll.feature:linje 11]]></stack-trace>
              </failure>
              <output><![CDATA[Given I have entered 50 into the calculator
-> error: Objektreferencen er ikke indstillet til en forekomst af et objekt.
And I have entered 70 into the calculator
-> skipped because of previous errors
When I press add
-> skipped because of previous errors
Then the result should be 120 on the screen
-> skipped because of previous errors
]]></output>
            </test-case>
          </test-suite>
          <test-suite type="TestFixture" id="0-1015" name="ScenarioOutlinesFeature" fullname="Pickles.TestHarness.nunit3.ScenarioOutlinesFeature" classname="Pickles.TestHarness.nunit3.ScenarioOutlinesFeature" runstate="Runnable" testcasecount="18" result="Failed" site="Child" start-time="2017-08-08 10:19:36Z" end-time="2017-08-08 10:19:36Z" duration="0.586906" total="18" passed="12" failed="3" warnings="0" inconclusive="3" skipped="0" asserts="0">
            <properties>
              <property name="Description" value="Scenario Outlines" />
            </properties>
            <failure>
              <message><![CDATA[One or more child tests had errors]]></message>
            </failure>
            <test-suite type="ParameterizedMethod" id="0-1034" name="AndWeCanGoTotallyBonkersWithMultipleExampleSections_" fullname="Pickles.TestHarness.nunit3.ScenarioOutlinesFeature.AndWeCanGoTotallyBonkersWithMultipleExampleSections_" classname="Pickles.TestHarness.nunit3.ScenarioOutlinesFeature" runstate="Runnable" testcasecount="6" result="Failed" site="Child" start-time="2017-08-08 10:19:36Z" end-time="2017-08-08 10:19:36Z" duration="0.021005" total="6" passed="2" failed="2" warnings="0" inconclusive="2" skipped="0" asserts="0">
              <properties>
                <property name="Description" value="And we can go totally bonkers with multiple example sections." />
              </properties>
              <failure>
                <message><![CDATA[One or more child tests had errors]]></message>
              </failure>
              <test-case id="0-1028" name="AndWeCanGoTotallyBonkersWithMultipleExampleSections_(&quot;pass_1&quot;,null)" fullname="Pickles.TestHarness.nunit3.ScenarioOutlinesFeature.AndWeCanGoTotallyBonkersWithMultipleExampleSections_(&quot;pass_1&quot;,null)" methodname="AndWeCanGoTotallyBonkersWithMultipleExampleSections_" classname="Pickles.TestHarness.nunit3.ScenarioOutlinesFeature" runstate="Runnable" seed="18576115" result="Passed" start-time="2017-08-08 10:19:36Z" end-time="2017-08-08 10:19:36Z" duration="0.002363" asserts="0">
                <output><![CDATA[Then the scenario will 'pass_1'
-> done: ScenarioOutlineSteps.ThenTheScenarioWill("pass_1") (0,0s)
]]></output>
              </test-case>
              <test-case id="0-1029" name="AndWeCanGoTotallyBonkersWithMultipleExampleSections_(&quot;pass_2&quot;,null)" fullname="Pickles.TestHarness.nunit3.ScenarioOutlinesFeature.AndWeCanGoTotallyBonkersWithMultipleExampleSections_(&quot;pass_2&quot;,null)" methodname="AndWeCanGoTotallyBonkersWithMultipleExampleSections_" classname="Pickles.TestHarness.nunit3.ScenarioOutlinesFeature" runstate="Runnable" seed="994636922" result="Passed" start-time="2017-08-08 10:19:36Z" end-time="2017-08-08 10:19:36Z" duration="0.000189" asserts="0">
                <output><![CDATA[Then the scenario will 'pass_2'
-> done: ScenarioOutlineSteps.ThenTheScenarioWill("pass_2") (0,0s)
]]></output>
              </test-case>
              <test-case id="0-1030" name="AndWeCanGoTotallyBonkersWithMultipleExampleSections_(&quot;inconclusive_1&quot;,null)" fullname="Pickles.TestHarness.nunit3.ScenarioOutlinesFeature.AndWeCanGoTotallyBonkersWithMultipleExampleSections_(&quot;inconclusive_1&quot;,null)" methodname="AndWeCanGoTotallyBonkersWithMultipleExampleSections_" classname="Pickles.TestHarness.nunit3.ScenarioOutlinesFeature" runstate="Runnable" seed="2087642473" result="Inconclusive" start-time="2017-08-08 10:19:36Z" end-time="2017-08-08 10:19:36Z" duration="0.001940" asserts="0">
                <reason>
                  <message><![CDATA[One or more step definitions are not implemented yet.
  ScenarioOutlineSteps.ThenTheScenarioWill("inconclusive_1")]]></message>
                </reason>
                <output><![CDATA[Then the scenario will 'inconclusive_1'
-> pending: ScenarioOutlineSteps.ThenTheScenarioWill("inconclusive_1")
]]></output>
              </test-case>
              <test-case id="0-1031" name="AndWeCanGoTotallyBonkersWithMultipleExampleSections_(&quot;inconclusive_2&quot;,null)" fullname="Pickles.TestHarness.nunit3.ScenarioOutlinesFeature.AndWeCanGoTotallyBonkersWithMultipleExampleSections_(&quot;inconclusive_2&quot;,null)" methodname="AndWeCanGoTotallyBonkersWithMultipleExampleSections_" classname="Pickles.TestHarness.nunit3.ScenarioOutlinesFeature" runstate="Runnable" seed="2002429954" result="Inconclusive" start-time="2017-08-08 10:19:36Z" end-time="2017-08-08 10:19:36Z" duration="0.002830" asserts="0">
                <reason>
                  <message><![CDATA[One or more step definitions are not implemented yet.
  ScenarioOutlineSteps.ThenTheScenarioWill("inconclusive_2")]]></message>
                </reason>
                <output><![CDATA[Then the scenario will 'inconclusive_2'
-> pending: ScenarioOutlineSteps.ThenTheScenarioWill("inconclusive_2")
]]></output>
              </test-case>
              <test-case id="0-1032" name="AndWeCanGoTotallyBonkersWithMultipleExampleSections_(&quot;fail_1&quot;,null)" fullname="Pickles.TestHarness.nunit3.ScenarioOutlinesFeature.AndWeCanGoTotallyBonkersWithMultipleExampleSections_(&quot;fail_1&quot;,null)" methodname="AndWeCanGoTotallyBonkersWithMultipleExampleSections_" classname="Pickles.TestHarness.nunit3.ScenarioOutlinesFeature" runstate="Runnable" seed="1900246168" result="Failed" label="Error" start-time="2017-08-08 10:19:36Z" end-time="2017-08-08 10:19:36Z" duration="0.002869" asserts="0">
                <failure>
                  <message><![CDATA[NFluent.FluentCheckException : 
The checked value is different from the expected one.
The checked value:
	[True]
The expected value:
	[False]]]></message>
                  <stack-trace><![CDATA[   ved NFluent.Helpers.EqualityHelper.IsEqualTo(Object instance, Object expected)
   ved NFluent.Extensibility.Checker`2.ExecuteCheck(Action action, String negatedExceptionMessage)
   ved AutomationLayer.MarkTestAs.Failing() i C:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\AutomationLayer\MarkTestAs.cs:linje 15
   ved AutomationLayer.ScenarioOutlineSteps.ThenTheScenarioWill(String result) i C:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\AutomationLayer\ScenarioOutlineSteps.cs:linje 19
   ved TechTalk.SpecFlow.Bindings.BindingInvoker.InvokeBinding(IBinding binding, IContextManager contextManager, Object[] arguments, ITestTracer testTracer, TimeSpan& duration)
   ved TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStepMatch(BindingMatch match, Object[] arguments)
   ved TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep(StepInstance stepInstance)
   ved TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   ved Pickles.TestHarness.nunit3.ScenarioOutlinesFeature.ScenarioCleanup()
   ved Pickles.TestHarness.nunit3.ScenarioOutlinesFeature.AndWeCanGoTotallyBonkersWithMultipleExampleSections_(String result, String[] exampleTags) i C:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\nunit3\ScenarioOutlines.feature:linje 45]]></stack-trace>
                </failure>
                <output><![CDATA[Then the scenario will 'fail_1'
-> error: 
The checked value is different from the expected one.
The checked value:
	[True]
The expected value:
	[False]
]]></output>
              </test-case>
              <test-case id="0-1033" name="AndWeCanGoTotallyBonkersWithMultipleExampleSections_(&quot;fail_2&quot;,null)" fullname="Pickles.TestHarness.nunit3.ScenarioOutlinesFeature.AndWeCanGoTotallyBonkersWithMultipleExampleSections_(&quot;fail_2&quot;,null)" methodname="AndWeCanGoTotallyBonkersWithMultipleExampleSections_" classname="Pickles.TestHarness.nunit3.ScenarioOutlinesFeature" runstate="Runnable" seed="97016269" result="Failed" label="Error" start-time="2017-08-08 10:19:36Z" end-time="2017-08-08 10:19:36Z" duration="0.002666" asserts="0">
                <failure>
                  <message><![CDATA[NFluent.FluentCheckException : 
The checked value is different from the expected one.
The checked value:
	[True]
The expected value:
	[False]]]></message>
                  <stack-trace><![CDATA[   ved NFluent.Helpers.EqualityHelper.IsEqualTo(Object instance, Object expected)
   ved NFluent.Extensibility.Checker`2.ExecuteCheck(Action action, String negatedExceptionMessage)
   ved AutomationLayer.MarkTestAs.Failing() i C:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\AutomationLayer\MarkTestAs.cs:linje 15
   ved AutomationLayer.ScenarioOutlineSteps.ThenTheScenarioWill(String result) i C:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\AutomationLayer\ScenarioOutlineSteps.cs:linje 19
   ved TechTalk.SpecFlow.Bindings.BindingInvoker.InvokeBinding(IBinding binding, IContextManager contextManager, Object[] arguments, ITestTracer testTracer, TimeSpan& duration)
   ved TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStepMatch(BindingMatch match, Object[] arguments)
   ved TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep(StepInstance stepInstance)
   ved TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   ved Pickles.TestHarness.nunit3.ScenarioOutlinesFeature.ScenarioCleanup()
   ved Pickles.TestHarness.nunit3.ScenarioOutlinesFeature.AndWeCanGoTotallyBonkersWithMultipleExampleSections_(String result, String[] exampleTags) i C:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\nunit3\ScenarioOutlines.feature:linje 45]]></stack-trace>
                </failure>
                <output><![CDATA[Then the scenario will 'fail_2'
-> error: 
The checked value is different from the expected one.
The checked value:
	[True]
The expected value:
	[False]
]]></output>
              </test-case>
            </test-suite>
            <test-suite type="ParameterizedMethod" id="0-1036" name="DealCorrectlyWithBackslashesInTheExamples" fullname="Pickles.TestHarness.nunit3.ScenarioOutlinesFeature.DealCorrectlyWithBackslashesInTheExamples" classname="Pickles.TestHarness.nunit3.ScenarioOutlinesFeature" runstate="Runnable" testcasecount="1" result="Passed" start-time="2017-08-08 10:19:36Z" end-time="2017-08-08 10:19:36Z" duration="0.031350" total="1" passed="1" failed="0" warnings="0" inconclusive="0" skipped="0" asserts="0">
              <properties>
                <property name="Description" value="Deal correctly with backslashes in the examples" />
              </properties>
              <test-case id="0-1035" name="DealCorrectlyWithBackslashesInTheExamples(&quot;c:\\Temp\\&quot;,null)" fullname="Pickles.TestHarness.nunit3.ScenarioOutlinesFeature.DealCorrectlyWithBackslashesInTheExamples(&quot;c:\\Temp\\&quot;,null)" methodname="DealCorrectlyWithBackslashesInTheExamples" classname="Pickles.TestHarness.nunit3.ScenarioOutlinesFeature" runstate="Runnable" seed="2116539847" result="Passed" start-time="2017-08-08 10:19:36Z" end-time="2017-08-08 10:19:36Z" duration="0.002169" asserts="0">
                <output><![CDATA[When I have backslashes in the value, for example a 'c:\Temp\'
-> done: ScenarioOutlineSteps.WhenIHaveBackslashesInTheValueForExampleAFilePath("c:\Temp\") (0,0s)
]]></output>
              </test-case>
            </test-suite>
            <test-suite type="ParameterizedMethod" id="0-1040" name="DealCorrectlyWithOverlongExampleValues" fullname="Pickles.TestHarness.nunit3.ScenarioOutlinesFeature.DealCorrectlyWithOverlongExampleValues" classname="Pickles.TestHarness.nunit3.ScenarioOutlinesFeature" runstate="Runnable" testcasecount="1" result="Passed" start-time="2017-08-08 10:19:36Z" end-time="2017-08-08 10:19:36Z" duration="0.031270" total="1" passed="1" failed="0" warnings="0" inconclusive="0" skipped="0" asserts="0">
              <properties>
                <property name="Description" value="Deal correctly with overlong example values" />
              </properties>
              <test-case id="0-1039" name="DealCorrectlyWithOverlongExampleValues(&quot;Please enter a valid two letter country code (e.g. DE)!&quot;,&quot;This is just a very very very veery long error message!&quot;,null)" fullname="Pickles.TestHarness.nunit3.ScenarioOutlinesFeature.DealCorrectlyWithOverlongExampleValues(&quot;Please enter a valid two letter country code (e.g. DE)!&quot;,&quot;This is just a very very very veery long error message!&quot;,null)" methodname="DealCorrectlyWithOverlongExampleValues" classname="Pickles.TestHarness.nunit3.ScenarioOutlinesFeature" runstate="Runnable" seed="722986966" result="Passed" start-time="2017-08-08 10:19:36Z" end-time="2017-08-08 10:19:36Z" duration="0.001896" asserts="0">
                <output><![CDATA[When I have a field with value 'Please enter a valid two letter country code (e.g. DE)!'
-> done: ScenarioOutlineSteps.WhenIHaveAFieldWithValue("Please enter a va...") (0,0s)
And I have a field with value 'This is just a very very very veery long error message!'
-> done: ScenarioOutlineSteps.WhenIHaveAFieldWithValue("This is just a ve...") (0,0s)
Then the scenario will 'pass_1'
-> done: ScenarioOutlineSteps.ThenTheScenarioWill("pass_1") (0,0s)
]]></output>
              </test-case>
            </test-suite>
            <test-suite type="ParameterizedMethod" id="0-1038" name="DealCorrectlyWithParenthesisInTheExamples" fullname="Pickles.TestHarness.nunit3.ScenarioOutlinesFeature.DealCorrectlyWithParenthesisInTheExamples" classname="Pickles.TestHarness.nunit3.ScenarioOutlinesFeature" runstate="Runnable" testcasecount="1" result="Passed" start-time="2017-08-08 10:19:36Z" end-time="2017-08-08 10:19:36Z" duration="0.031242" total="1" passed="1" failed="0" warnings="0" inconclusive="0" skipped="0" asserts="0">
              <properties>
                <property name="Description" value="Deal correctly with parenthesis in the examples" />
              </properties>
              <test-case id="0-1037" name="DealCorrectlyWithParenthesisInTheExamples(&quot;This is a description (and more)&quot;,null)" fullname="Pickles.TestHarness.nunit3.ScenarioOutlinesFeature.DealCorrectlyWithParenthesisInTheExamples(&quot;This is a description (and more)&quot;,null)" methodname="DealCorrectlyWithParenthesisInTheExamples" classname="Pickles.TestHarness.nunit3.ScenarioOutlinesFeature" runstate="Runnable" seed="809250681" result="Passed" start-time="2017-08-08 10:19:36Z" end-time="2017-08-08 10:19:36Z" duration="0.001659" asserts="0">
                <output><![CDATA[When I have parenthesis in the value, for example an 'This is a description (and more)'
-> done: ScenarioOutlineSteps.WhenIHaveParenthesisInTheValueForExampleAnOverlyDescriptiveField("This is a descrip...") (0,0s)
]]></output>
              </test-case>
            </test-suite>
            <test-suite type="ParameterizedMethod" id="0-1019" name="ThisIsAScenarioOutlineWhereAllScenariosPass" fullname="Pickles.TestHarness.nunit3.ScenarioOutlinesFeature.ThisIsAScenarioOutlineWhereAllScenariosPass" classname="Pickles.TestHarness.nunit3.ScenarioOutlinesFeature" runstate="Runnable" testcasecount="3" result="Passed" start-time="2017-08-08 10:19:36Z" end-time="2017-08-08 10:19:36Z" duration="0.093592" total="3" passed="3" failed="0" warnings="0" inconclusive="0" skipped="0" asserts="0">
              <properties>
                <property name="Description" value="This is a scenario outline where all scenarios pass" />
              </properties>
              <test-case id="0-1016" name="ThisIsAScenarioOutlineWhereAllScenariosPass(&quot;pass_1&quot;,null)" fullname="Pickles.TestHarness.nunit3.ScenarioOutlinesFeature.ThisIsAScenarioOutlineWhereAllScenariosPass(&quot;pass_1&quot;,null)" methodname="ThisIsAScenarioOutlineWhereAllScenariosPass" classname="Pickles.TestHarness.nunit3.ScenarioOutlinesFeature" runstate="Runnable" seed="1951615489" result="Passed" start-time="2017-08-08 10:19:36Z" end-time="2017-08-08 10:19:36Z" duration="0.000781" asserts="0">
                <output><![CDATA[Then the scenario will 'pass_1'
-> done: ScenarioOutlineSteps.ThenTheScenarioWill("pass_1") (0,0s)
]]></output>
              </test-case>
              <test-case id="0-1017" name="ThisIsAScenarioOutlineWhereAllScenariosPass(&quot;pass_2&quot;,null)" fullname="Pickles.TestHarness.nunit3.ScenarioOutlinesFeature.ThisIsAScenarioOutlineWhereAllScenariosPass(&quot;pass_2&quot;,null)" methodname="ThisIsAScenarioOutlineWhereAllScenariosPass" classname="Pickles.TestHarness.nunit3.ScenarioOutlinesFeature" runstate="Runnable" seed="14580511" result="Passed" start-time="2017-08-08 10:19:36Z" end-time="2017-08-08 10:19:36Z" duration="0.000391" asserts="0">
                <output><![CDATA[Then the scenario will 'pass_2'
-> done: ScenarioOutlineSteps.ThenTheScenarioWill("pass_2") (0,0s)
]]></output>
              </test-case>
              <test-case id="0-1018" name="ThisIsAScenarioOutlineWhereAllScenariosPass(&quot;pass_3&quot;,null)" fullname="Pickles.TestHarness.nunit3.ScenarioOutlinesFeature.ThisIsAScenarioOutlineWhereAllScenariosPass(&quot;pass_3&quot;,null)" methodname="ThisIsAScenarioOutlineWhereAllScenariosPass" classname="Pickles.TestHarness.nunit3.ScenarioOutlinesFeature" runstate="Runnable" seed="325713770" result="Passed" start-time="2017-08-08 10:19:36Z" end-time="2017-08-08 10:19:36Z" duration="0.000374" asserts="0">
                <output><![CDATA[Then the scenario will 'pass_3'
-> done: ScenarioOutlineSteps.ThenTheScenarioWill("pass_3") (0,0s)
]]></output>
              </test-case>
            </test-suite>
            <test-suite type="ParameterizedMethod" id="0-1027" name="ThisIsAScenarioOutlineWhereOneScenarioFails" fullname="Pickles.TestHarness.nunit3.ScenarioOutlinesFeature.ThisIsAScenarioOutlineWhereOneScenarioFails" classname="Pickles.TestHarness.nunit3.ScenarioOutlinesFeature" runstate="Runnable" testcasecount="3" result="Failed" site="Child" start-time="2017-08-08 10:19:36Z" end-time="2017-08-08 10:19:36Z" duration="0.093644" total="3" passed="2" failed="1" warnings="0" inconclusive="0" skipped="0" asserts="0">
              <properties>
                <property name="Description" value="This is a scenario outline where one scenario fails" />
              </properties>
              <failure>
                <message><![CDATA[One or more child tests had errors]]></message>
              </failure>
              <test-case id="0-1024" name="ThisIsAScenarioOutlineWhereOneScenarioFails(&quot;pass_1&quot;,null)" fullname="Pickles.TestHarness.nunit3.ScenarioOutlinesFeature.ThisIsAScenarioOutlineWhereOneScenarioFails(&quot;pass_1&quot;,null)" methodname="ThisIsAScenarioOutlineWhereOneScenarioFails" classname="Pickles.TestHarness.nunit3.ScenarioOutlinesFeature" runstate="Runnable" seed="761783303" result="Passed" start-time="2017-08-08 10:19:36Z" end-time="2017-08-08 10:19:36Z" duration="0.000952" asserts="0">
                <output><![CDATA[Then the scenario will 'pass_1'
-> done: ScenarioOutlineSteps.ThenTheScenarioWill("pass_1") (0,0s)
]]></output>
              </test-case>
              <test-case id="0-1025" name="ThisIsAScenarioOutlineWhereOneScenarioFails(&quot;pass_2&quot;,null)" fullname="Pickles.TestHarness.nunit3.ScenarioOutlinesFeature.ThisIsAScenarioOutlineWhereOneScenarioFails(&quot;pass_2&quot;,null)" methodname="ThisIsAScenarioOutlineWhereOneScenarioFails" classname="Pickles.TestHarness.nunit3.ScenarioOutlinesFeature" runstate="Runnable" seed="1659055933" result="Passed" start-time="2017-08-08 10:19:36Z" end-time="2017-08-08 10:19:36Z" duration="0.000492" asserts="0">
                <output><![CDATA[Then the scenario will 'pass_2'
-> done: ScenarioOutlineSteps.ThenTheScenarioWill("pass_2") (0,0s)
]]></output>
              </test-case>
              <test-case id="0-1026" name="ThisIsAScenarioOutlineWhereOneScenarioFails(&quot;fail_1&quot;,null)" fullname="Pickles.TestHarness.nunit3.ScenarioOutlinesFeature.ThisIsAScenarioOutlineWhereOneScenarioFails(&quot;fail_1&quot;,null)" methodname="ThisIsAScenarioOutlineWhereOneScenarioFails" classname="Pickles.TestHarness.nunit3.ScenarioOutlinesFeature" runstate="Runnable" seed="10484858" result="Failed" label="Error" start-time="2017-08-08 10:19:36Z" end-time="2017-08-08 10:19:36Z" duration="0.003186" asserts="0">
                <failure>
                  <message><![CDATA[NFluent.FluentCheckException : 
The checked value is different from the expected one.
The checked value:
	[True]
The expected value:
	[False]]]></message>
                  <stack-trace><![CDATA[   ved NFluent.Helpers.EqualityHelper.IsEqualTo(Object instance, Object expected)
   ved NFluent.Extensibility.Checker`2.ExecuteCheck(Action action, String negatedExceptionMessage)
   ved AutomationLayer.MarkTestAs.Failing() i C:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\AutomationLayer\MarkTestAs.cs:linje 15
   ved AutomationLayer.ScenarioOutlineSteps.ThenTheScenarioWill(String result) i C:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\AutomationLayer\ScenarioOutlineSteps.cs:linje 19
   ved TechTalk.SpecFlow.Bindings.BindingInvoker.InvokeBinding(IBinding binding, IContextManager contextManager, Object[] arguments, ITestTracer testTracer, TimeSpan& duration)
   ved TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStepMatch(BindingMatch match, Object[] arguments)
   ved TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep(StepInstance stepInstance)
   ved TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   ved Pickles.TestHarness.nunit3.ScenarioOutlinesFeature.ScenarioCleanup()
   ved Pickles.TestHarness.nunit3.ScenarioOutlinesFeature.ThisIsAScenarioOutlineWhereOneScenarioFails(String result, String[] exampleTags) i C:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\nunit3\ScenarioOutlines.feature:linje 34]]></stack-trace>
                </failure>
                <output><![CDATA[Then the scenario will 'fail_1'
-> error: 
The checked value is different from the expected one.
The checked value:
	[True]
The expected value:
	[False]
]]></output>
              </test-case>
            </test-suite>
            <test-suite type="ParameterizedMethod" id="0-1023" name="ThisIsAScenarioOutlineWhereOneScenarioIsInconclusive" fullname="Pickles.TestHarness.nunit3.ScenarioOutlinesFeature.ThisIsAScenarioOutlineWhereOneScenarioIsInconclusive" classname="Pickles.TestHarness.nunit3.ScenarioOutlinesFeature" runstate="Runnable" testcasecount="3" result="Passed" start-time="2017-08-08 10:19:36Z" end-time="2017-08-08 10:19:36Z" duration="0.093641" total="3" passed="2" failed="0" warnings="0" inconclusive="1" skipped="0" asserts="0">
              <properties>
                <property name="Description" value="This is a scenario outline where one scenario is inconclusive" />
              </properties>
              <test-case id="0-1020" name="ThisIsAScenarioOutlineWhereOneScenarioIsInconclusive(&quot;pass_1&quot;,null)" fullname="Pickles.TestHarness.nunit3.ScenarioOutlinesFeature.ThisIsAScenarioOutlineWhereOneScenarioIsInconclusive(&quot;pass_1&quot;,null)" methodname="ThisIsAScenarioOutlineWhereOneScenarioIsInconclusive" classname="Pickles.TestHarness.nunit3.ScenarioOutlinesFeature" runstate="Runnable" seed="1236556906" result="Passed" start-time="2017-08-08 10:19:36Z" end-time="2017-08-08 10:19:36Z" duration="0.000588" asserts="0">
                <output><![CDATA[Then the scenario will 'pass_1'
-> done: ScenarioOutlineSteps.ThenTheScenarioWill("pass_1") (0,0s)
]]></output>
              </test-case>
              <test-case id="0-1021" name="ThisIsAScenarioOutlineWhereOneScenarioIsInconclusive(&quot;pass_2&quot;,null)" fullname="Pickles.TestHarness.nunit3.ScenarioOutlinesFeature.ThisIsAScenarioOutlineWhereOneScenarioIsInconclusive(&quot;pass_2&quot;,null)" methodname="ThisIsAScenarioOutlineWhereOneScenarioIsInconclusive" classname="Pickles.TestHarness.nunit3.ScenarioOutlinesFeature" runstate="Runnable" seed="2004395013" result="Passed" start-time="2017-08-08 10:19:36Z" end-time="2017-08-08 10:19:36Z" duration="0.000268" asserts="0">
                <output><![CDATA[Then the scenario will 'pass_2'
-> done: ScenarioOutlineSteps.ThenTheScenarioWill("pass_2") (0,0s)
]]></output>
              </test-case>
              <test-case id="0-1022" name="ThisIsAScenarioOutlineWhereOneScenarioIsInconclusive(&quot;inconclusive_1&quot;,null)" fullname="Pickles.TestHarness.nunit3.ScenarioOutlinesFeature.ThisIsAScenarioOutlineWhereOneScenarioIsInconclusive(&quot;inconclusive_1&quot;,null)" methodname="ThisIsAScenarioOutlineWhereOneScenarioIsInconclusive" classname="Pickles.TestHarness.nunit3.ScenarioOutlinesFeature" runstate="Runnable" seed="904974237" result="Inconclusive" start-time="2017-08-08 10:19:36Z" end-time="2017-08-08 10:19:36Z" duration="0.002754" asserts="0">
                <reason>
                  <message><![CDATA[One or more step definitions are not implemented yet.
  ScenarioOutlineSteps.ThenTheScenarioWill("inconclusive_1")]]></message>
                </reason>
                <output><![CDATA[Then the scenario will 'inconclusive_1'
-> pending: ScenarioOutlineSteps.ThenTheScenarioWill("inconclusive_1")
]]></output>
              </test-case>
            </test-suite>
          </test-suite>
          <test-suite type="TestFixture" id="0-1041" name="ScenariosWithSpecialCharactersFeature" fullname="Pickles.TestHarness.nunit3.ScenariosWithSpecialCharactersFeature" classname="Pickles.TestHarness.nunit3.ScenariosWithSpecialCharactersFeature" runstate="Runnable" testcasecount="12" result="Passed" start-time="2017-08-08 10:19:36Z" end-time="2017-08-08 10:19:37Z" duration="0.500966" total="12" passed="12" failed="0" warnings="0" inconclusive="0" skipped="0" asserts="0">
            <properties>
              <property name="Description" value="Scenarios With Special Characters" />
            </properties>
            <test-suite type="ParameterizedMethod" id="0-1056" name="ThisIsAScenarioOutlineWithAmpersand" fullname="Pickles.TestHarness.nunit3.ScenariosWithSpecialCharactersFeature.ThisIsAScenarioOutlineWithAmpersand" classname="Pickles.TestHarness.nunit3.ScenariosWithSpecialCharactersFeature" runstate="Runnable" testcasecount="1" result="Passed" start-time="2017-08-08 10:19:36Z" end-time="2017-08-08 10:19:36Z" duration="0.031223" total="1" passed="1" failed="0" warnings="0" inconclusive="0" skipped="0" asserts="0">
              <properties>
                <property name="Description" value="This is a scenario outline with ampersand &amp;" />
              </properties>
              <test-case id="0-1055" name="ThisIsAScenarioOutlineWithAmpersand(&quot;pass_1&quot;,null)" fullname="Pickles.TestHarness.nunit3.ScenariosWithSpecialCharactersFeature.ThisIsAScenarioOutlineWithAmpersand(&quot;pass_1&quot;,null)" methodname="ThisIsAScenarioOutlineWithAmpersand" classname="Pickles.TestHarness.nunit3.ScenariosWithSpecialCharactersFeature" runstate="Runnable" seed="878104166" result="Passed" start-time="2017-08-08 10:19:36Z" end-time="2017-08-08 10:19:36Z" duration="0.001740" asserts="0">
                <output><![CDATA[Given the calculator has clean memory
-> done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0,0s)
Then the scenario will 'pass_1'
-> done: ScenarioOutlineSteps.ThenTheScenarioWill("pass_1") (0,0s)
]]></output>
              </test-case>
            </test-suite>
            <test-suite type="ParameterizedMethod" id="0-1054" name="ThisIsAScenarioOutlineWithGermanUmlautsAouBAOU" fullname="Pickles.TestHarness.nunit3.ScenariosWithSpecialCharactersFeature.ThisIsAScenarioOutlineWithGermanUmlautsAouBAOU" classname="Pickles.TestHarness.nunit3.ScenariosWithSpecialCharactersFeature" runstate="Runnable" testcasecount="1" result="Passed" start-time="2017-08-08 10:19:37Z" end-time="2017-08-08 10:19:37Z" duration="0.031258" total="1" passed="1" failed="0" warnings="0" inconclusive="0" skipped="0" asserts="0">
              <properties>
                <property name="Description" value="This is a scenario outline with german umlauts äöüß ÄÖÜ" />
              </properties>
              <test-case id="0-1053" name="ThisIsAScenarioOutlineWithGermanUmlautsAouBAOU(&quot;pass_1&quot;,null)" fullname="Pickles.TestHarness.nunit3.ScenariosWithSpecialCharactersFeature.ThisIsAScenarioOutlineWithGermanUmlautsAouBAOU(&quot;pass_1&quot;,null)" methodname="ThisIsAScenarioOutlineWithGermanUmlautsAouBAOU" classname="Pickles.TestHarness.nunit3.ScenariosWithSpecialCharactersFeature" runstate="Runnable" seed="1212463408" result="Passed" start-time="2017-08-08 10:19:37Z" end-time="2017-08-08 10:19:37Z" duration="0.000933" asserts="0">
                <output><![CDATA[Given the calculator has clean memory
-> done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0,0s)
Then the scenario will 'pass_1'
-> done: ScenarioOutlineSteps.ThenTheScenarioWill("pass_1") (0,0s)
]]></output>
              </test-case>
            </test-suite>
            <test-suite type="ParameterizedMethod" id="0-1044" name="ThisIsAScenarioOutlineWithParenthesesHyphenAndComma10_2030_40" fullname="Pickles.TestHarness.nunit3.ScenariosWithSpecialCharactersFeature.ThisIsAScenarioOutlineWithParenthesesHyphenAndComma10_2030_40" classname="Pickles.TestHarness.nunit3.ScenariosWithSpecialCharactersFeature" runstate="Runnable" testcasecount="1" result="Passed" start-time="2017-08-08 10:19:37Z" end-time="2017-08-08 10:19:37Z" duration="0.031221" total="1" passed="1" failed="0" warnings="0" inconclusive="0" skipped="0" asserts="0">
              <properties>
                <property name="Description" value="This is a scenario outline with parentheses, hyphen and comma (10-20, 30-40)" />
              </properties>
              <test-case id="0-1043" name="ThisIsAScenarioOutlineWithParenthesesHyphenAndComma10_2030_40(&quot;pass_1&quot;,null)" fullname="Pickles.TestHarness.nunit3.ScenariosWithSpecialCharactersFeature.ThisIsAScenarioOutlineWithParenthesesHyphenAndComma10_2030_40(&quot;pass_1&quot;,null)" methodname="ThisIsAScenarioOutlineWithParenthesesHyphenAndComma10_2030_40" classname="Pickles.TestHarness.nunit3.ScenariosWithSpecialCharactersFeature" runstate="Runnable" seed="999125064" result="Passed" start-time="2017-08-08 10:19:37Z" end-time="2017-08-08 10:19:37Z" duration="0.000827" asserts="0">
                <output><![CDATA[Given the calculator has clean memory
-> done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0,0s)
Then the scenario will 'pass_1'
-> done: ScenarioOutlineSteps.ThenTheScenarioWill("pass_1") (0,0s)
]]></output>
              </test-case>
            </test-suite>
            <test-case id="0-1057" name="ThisIsAScenarioWithDanishCharactersAEoaAEOA" fullname="Pickles.TestHarness.nunit3.ScenariosWithSpecialCharactersFeature.ThisIsAScenarioWithDanishCharactersAEoaAEOA" methodname="ThisIsAScenarioWithDanishCharactersAEoaAEOA" classname="Pickles.TestHarness.nunit3.ScenariosWithSpecialCharactersFeature" runstate="Runnable" seed="1856472160" result="Passed" start-time="2017-08-08 10:19:37Z" end-time="2017-08-08 10:19:37Z" duration="0.001549" asserts="0">
              <properties>
                <property name="Description" value="This is a scenario with danish characters æøå ÆØÅ" />
              </properties>
              <output><![CDATA[Given the calculator has clean memory
-> done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0,0s)
Then the step with danish characters like æøå and ÆØÅ shall pass
-> done: MinimalSteps.ThenPassingDanishStep() (0,0s)
]]></output>
            </test-case>
            <test-case id="0-1042" name="ThisIsAScenarioWithParenthesesHyphenAndComma10_2030_40" fullname="Pickles.TestHarness.nunit3.ScenariosWithSpecialCharactersFeature.ThisIsAScenarioWithParenthesesHyphenAndComma10_2030_40" methodname="ThisIsAScenarioWithParenthesesHyphenAndComma10_2030_40" classname="Pickles.TestHarness.nunit3.ScenariosWithSpecialCharactersFeature" runstate="Runnable" seed="485302387" result="Passed" start-time="2017-08-08 10:19:37Z" end-time="2017-08-08 10:19:37Z" duration="0.000850" asserts="0">
              <properties>
                <property name="Description" value="This is a scenario with parentheses, hyphen and comma (10-20, 30-40)" />
              </properties>
              <output><![CDATA[Given the calculator has clean memory
-> done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0,0s)
Given I have entered 50 into the calculator
-> done: AdditionSteps.GivenIHaveEnteredIntoTheCalculator(50) (0,0s)
And I have entered 70 into the calculator
-> done: AdditionSteps.GivenIHaveEnteredIntoTheCalculator(70) (0,0s)
When I press add
-> done: AdditionSteps.WhenIPressAdd() (0,0s)
Then the result should be 120 on the screen
-> done: AdditionSteps.ThenTheResultShouldBeOnTheScreen(120) (0,0s)
]]></output>
            </test-case>
            <test-suite type="ParameterizedMethod" id="0-1052" name="ThisScenarioContainsExamplesWithRegex_SpecialCharacters" fullname="Pickles.TestHarness.nunit3.ScenariosWithSpecialCharactersFeature.ThisScenarioContainsExamplesWithRegex_SpecialCharacters" classname="Pickles.TestHarness.nunit3.ScenariosWithSpecialCharactersFeature" runstate="Runnable" testcasecount="7" result="Passed" start-time="2017-08-08 10:19:37Z" end-time="2017-08-08 10:19:37Z" duration="0.220088" total="7" passed="7" failed="0" warnings="0" inconclusive="0" skipped="0" asserts="0">
              <properties>
                <property name="Description" value="This scenario contains examples with Regex-special characters" />
              </properties>
              <test-case id="0-1045" name="ThisScenarioContainsExamplesWithRegex_SpecialCharacters(&quot;**&quot;,null)" fullname="Pickles.TestHarness.nunit3.ScenariosWithSpecialCharactersFeature.ThisScenarioContainsExamplesWithRegex_SpecialCharacters(&quot;**&quot;,null)" methodname="ThisScenarioContainsExamplesWithRegex_SpecialCharacters" classname="Pickles.TestHarness.nunit3.ScenariosWithSpecialCharactersFeature" runstate="Runnable" seed="1343075887" result="Passed" start-time="2017-08-08 10:19:37Z" end-time="2017-08-08 10:19:37Z" duration="0.002627" asserts="0">
                <output><![CDATA[Given the calculator has clean memory
-> done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0,0s)
When I have special characters for regexes in the value, for example a '**'
-> done: ScenarioOutlineSteps.WhenIHaveSpecialCharactersForRegexesInTheValueForExampleARegex("**") (0,0s)
Then the scenario will 'PASS'
-> done: ScenarioOutlineSteps.ThenTheScenarioWill("PASS") (0,0s)
]]></output>
              </test-case>
              <test-case id="0-1046" name="ThisScenarioContainsExamplesWithRegex_SpecialCharacters(&quot;++&quot;,null)" fullname="Pickles.TestHarness.nunit3.ScenariosWithSpecialCharactersFeature.ThisScenarioContainsExamplesWithRegex_SpecialCharacters(&quot;++&quot;,null)" methodname="ThisScenarioContainsExamplesWithRegex_SpecialCharacters" classname="Pickles.TestHarness.nunit3.ScenariosWithSpecialCharactersFeature" runstate="Runnable" seed="1042026847" result="Passed" start-time="2017-08-08 10:19:37Z" end-time="2017-08-08 10:19:37Z" duration="0.000455" asserts="0">
                <output><![CDATA[Given the calculator has clean memory
-> done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0,0s)
When I have special characters for regexes in the value, for example a '++'
-> done: ScenarioOutlineSteps.WhenIHaveSpecialCharactersForRegexesInTheValueForExampleARegex("++") (0,0s)
Then the scenario will 'PASS'
-> done: ScenarioOutlineSteps.ThenTheScenarioWill("PASS") (0,0s)
]]></output>
              </test-case>
              <test-case id="0-1047" name="ThisScenarioContainsExamplesWithRegex_SpecialCharacters(&quot;.*&quot;,null)" fullname="Pickles.TestHarness.nunit3.ScenariosWithSpecialCharactersFeature.ThisScenarioContainsExamplesWithRegex_SpecialCharacters(&quot;.*&quot;,null)" methodname="ThisScenarioContainsExamplesWithRegex_SpecialCharacters" classname="Pickles.TestHarness.nunit3.ScenariosWithSpecialCharactersFeature" runstate="Runnable" seed="10099683" result="Passed" start-time="2017-08-08 10:19:37Z" end-time="2017-08-08 10:19:37Z" duration="0.000511" asserts="0">
                <output><![CDATA[Given the calculator has clean memory
-> done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0,0s)
When I have special characters for regexes in the value, for example a '.*'
-> done: ScenarioOutlineSteps.WhenIHaveSpecialCharactersForRegexesInTheValueForExampleARegex(".*") (0,0s)
Then the scenario will 'PASS'
-> done: ScenarioOutlineSteps.ThenTheScenarioWill("PASS") (0,0s)
]]></output>
              </test-case>
              <test-case id="0-1048" name="ThisScenarioContainsExamplesWithRegex_SpecialCharacters(&quot;[]&quot;,null)" fullname="Pickles.TestHarness.nunit3.ScenariosWithSpecialCharactersFeature.ThisScenarioContainsExamplesWithRegex_SpecialCharacters(&quot;[]&quot;,null)" methodname="ThisScenarioContainsExamplesWithRegex_SpecialCharacters" classname="Pickles.TestHarness.nunit3.ScenariosWithSpecialCharactersFeature" runstate="Runnable" seed="1872859167" result="Passed" start-time="2017-08-08 10:19:37Z" end-time="2017-08-08 10:19:37Z" duration="0.000610" asserts="0">
                <output><![CDATA[Given the calculator has clean memory
-> done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0,0s)
When I have special characters for regexes in the value, for example a '[]'
-> done: ScenarioOutlineSteps.WhenIHaveSpecialCharactersForRegexesInTheValueForExampleARegex("[]") (0,0s)
Then the scenario will 'PASS'
-> done: ScenarioOutlineSteps.ThenTheScenarioWill("PASS") (0,0s)
]]></output>
              </test-case>
              <test-case id="0-1049" name="ThisScenarioContainsExamplesWithRegex_SpecialCharacters(&quot;{}&quot;,null)" fullname="Pickles.TestHarness.nunit3.ScenariosWithSpecialCharactersFeature.ThisScenarioContainsExamplesWithRegex_SpecialCharacters(&quot;{}&quot;,null)" methodname="ThisScenarioContainsExamplesWithRegex_SpecialCharacters" classname="Pickles.TestHarness.nunit3.ScenariosWithSpecialCharactersFeature" runstate="Runnable" seed="578039455" result="Passed" start-time="2017-08-08 10:19:37Z" end-time="2017-08-08 10:19:37Z" duration="0.000473" asserts="0">
                <output><![CDATA[Given the calculator has clean memory
-> done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0,0s)
When I have special characters for regexes in the value, for example a '{}'
-> done: ScenarioOutlineSteps.WhenIHaveSpecialCharactersForRegexesInTheValueForExampleARegex("{}") (0,0s)
Then the scenario will 'PASS'
-> done: ScenarioOutlineSteps.ThenTheScenarioWill("PASS") (0,0s)
]]></output>
              </test-case>
              <test-case id="0-1050" name="ThisScenarioContainsExamplesWithRegex_SpecialCharacters(&quot;()&quot;,null)" fullname="Pickles.TestHarness.nunit3.ScenariosWithSpecialCharactersFeature.ThisScenarioContainsExamplesWithRegex_SpecialCharacters(&quot;()&quot;,null)" methodname="ThisScenarioContainsExamplesWithRegex_SpecialCharacters" classname="Pickles.TestHarness.nunit3.ScenariosWithSpecialCharactersFeature" runstate="Runnable" seed="506124530" result="Passed" start-time="2017-08-08 10:19:37Z" end-time="2017-08-08 10:19:37Z" duration="0.000689" asserts="0">
                <output><![CDATA[Given the calculator has clean memory
-> done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0,0s)
When I have special characters for regexes in the value, for example a '()'
-> done: ScenarioOutlineSteps.WhenIHaveSpecialCharactersForRegexesInTheValueForExampleARegex("()") (0,0s)
Then the scenario will 'PASS'
-> done: ScenarioOutlineSteps.ThenTheScenarioWill("PASS") (0,0s)
]]></output>
              </test-case>
              <test-case id="0-1051" name="ThisScenarioContainsExamplesWithRegex_SpecialCharacters(&quot;^.*(?&lt;foo&gt;BAR)\\s[^0-9]{3,4}A+$&quot;,null)" fullname="Pickles.TestHarness.nunit3.ScenariosWithSpecialCharactersFeature.ThisScenarioContainsExamplesWithRegex_SpecialCharacters(&quot;^.*(?&lt;foo&gt;BAR)\\s[^0-9]{3,4}A+$&quot;,null)" methodname="ThisScenarioContainsExamplesWithRegex_SpecialCharacters" classname="Pickles.TestHarness.nunit3.ScenariosWithSpecialCharactersFeature" runstate="Runnable" seed="319332697" result="Passed" start-time="2017-08-08 10:19:37Z" end-time="2017-08-08 10:19:37Z" duration="0.000652" asserts="0">
                <output><![CDATA[Given the calculator has clean memory
-> done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0,0s)
When I have special characters for regexes in the value, for example a '^.*(?<foo>BAR)\s[^0-9]{3,4}A+$'
-> done: ScenarioOutlineSteps.WhenIHaveSpecialCharactersForRegexesInTheValueForExampleARegex("^.*(?<foo>BAR)\s[...") (0,0s)
Then the scenario will 'PASS'
-> done: ScenarioOutlineSteps.ThenTheScenarioWill("PASS") (0,0s)
]]></output>
              </test-case>
            </test-suite>
          </test-suite>
        </test-suite>
      </test-suite>
    </test-suite>
  </test-suite>
</test-run>