<?xml version="1.0" encoding="utf-8"?>
<TestRun id="2dd8920a-328c-42d4-ab5e-c34b9d8c29ef" name="RS@DESKTOP 2018-08-24 15:55:47" runUser="DESKTOP\RS" xmlns="http://microsoft.com/schemas/VisualStudio/TeamTest/2010">
	<Times creation="2018-08-24T15:55:47.6419820+02:00" queuing="2018-08-24T15:55:47.6419820+02:00" start="2018-08-24T15:55:46.8201796+02:00" finish="2018-08-24T15:55:47.9376722+02:00" />
	<TestSettings name="default" id="e1926a81-b519-400d-9ce4-20f01be4555c">
		<Deployment runDeploymentRoot="RS_DESKTOP_2018-08-24_15_55_47" />
	</TestSettings>
	<Results>
		<UnitTestResult executionId="fc48a06b-7cce-4d97-9798-117c2cbf89f4" testId="90a44ab4-342d-ed3c-860e-39c8152c2fad" testName="ThisIsAScenarioOutlineWhereAllScenariosPass_Pass_3" computerName="DESKTOP" duration="00:00:00.0001783" startTime="2018-08-24T15:55:47.6768894+02:00" endTime="2018-08-24T15:55:47.6778865+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="fc48a06b-7cce-4d97-9798-117c2cbf89f4">
			<Output>
				<StdOut>Then the scenario will 'pass_3'&#xD;
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("pass_3") (0.0s)</StdOut>
			</Output>
		</UnitTestResult>
		<UnitTestResult executionId="904b11dc-4cc5-4456-9c03-8c051628d198" testId="37e0f7ae-16bd-415a-3a74-c8c26c6e56f1" testName="DealWithDuplicateValues_Variant0" computerName="DESKTOP" duration="00:00:00.0003707" startTime="2018-08-24T15:55:47.7058123+02:00" endTime="2018-08-24T15:55:47.7068094+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="904b11dc-4cc5-4456-9c03-8c051628d198">
			<Output>
				<StdOut>Then the scenario will 'pass'&#xD;
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("pass") (0.0s)</StdOut>
			</Output>
		</UnitTestResult>
		<UnitTestResult executionId="a40dd773-0a13-4510-a394-6f16a5fe0df2" testId="bd874ade-5d64-8f62-b83e-d52cd3e9a75c" testName="ThisScenarioContainsExamplesWithRegex_SpecialCharacters_Variant6" computerName="DESKTOP" duration="00:00:00.0004219" startTime="2018-08-24T15:55:47.7546810+02:00" endTime="2018-08-24T15:55:47.7556833+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a40dd773-0a13-4510-a394-6f16a5fe0df2">
			<Output>
				<StdOut>Given the calculator has clean memory&#xD;
-&gt; done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0.0s)&#xD;
When I have special characters for regexes in the value, for example a '^.*(?&lt;foo&gt;BAR)\s[^0-9]{3,4}A+$'&#xD;
-&gt; done: ScenarioOutlineSteps.WhenIHaveSpecialCharactersForRegexesInTheValueForExampleARegex("^.*(?&lt;foo&gt;BAR)\s[...") (0.0s)&#xD;
Then the scenario will 'PASS'&#xD;
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("PASS") (0.0s)</StdOut>
			</Output>
		</UnitTestResult>
		<UnitTestResult executionId="ff1576ab-c58d-4614-a35a-eae0f28804d9" testId="a83adabc-7eb9-5e21-a7bc-6907dc0d83ea" testName="ThisIsAScenarioOutlineWhereOneScenarioIsInconclusive_Pass_2" computerName="DESKTOP" duration="00:00:00.0001382" startTime="2018-08-24T15:55:47.6778865+02:00" endTime="2018-08-24T15:55:47.6778865+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ff1576ab-c58d-4614-a35a-eae0f28804d9">
			<Output>
				<StdOut>Then the scenario will 'pass_2'&#xD;
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("pass_2") (0.0s)</StdOut>
			</Output>
		</UnitTestResult>
		<UnitTestResult executionId="348bc741-afb6-4263-a78b-0aa1d712bd4d" testId="bea8799b-89a4-d983-d6a9-57924ee5618e" testName="AddingSeveralNumbers_60" computerName="DESKTOP" duration="00:00:00.0022148" startTime="2018-08-24T15:55:47.6250288+02:00" endTime="2018-08-24T15:55:47.6280215+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="348bc741-afb6-4263-a78b-0aa1d712bd4d">
			<Output>
				<StdOut>Given the background step fails&#xD;
-&gt; error: 
The checked value is different from the expected one.
The checked value:
	[True]
The expected value:
	[False]&#xD;
And the calculator has clean memory&#xD;
-&gt; skipped because of previous errors&#xD;
Given I have entered 60 into the calculator&#xD;
-&gt; skipped because of previous errors&#xD;
And I have entered 70 into the calculator&#xD;
-&gt; skipped because of previous errors&#xD;
And I have entered 130 into the calculator&#xD;
-&gt; skipped because of previous errors&#xD;
When I press add&#xD;
-&gt; skipped because of previous errors&#xD;
Then the result should be 260 on the screen&#xD;
-&gt; skipped because of previous errors</StdOut>
				<ErrorInfo>
					<Message>Test method Pickles.TestHarness.MsTest.FailingBackgroundFeature.AddingSeveralNumbers_60 threw exception: &#xD;
NFluent.FluentCheckException: 
The checked value is different from the expected one.
The checked value:
	[True]
The expected value:
	[False]</Message>
					<StackTrace>    at NFluent.Helpers.EqualityHelper.IsEqualTo(Object instance, Object expected)&#xD;
   at NFluent.ObjectCheckExtensions.&lt;&gt;c__DisplayClass1`1.&lt;IsEqualTo&gt;b__0()&#xD;
   at NFluent.Extensibility.Checker`2.ExecuteCheck(Action action, String negatedExceptionMessage)&#xD;
   at NFluent.ObjectCheckExtensions.IsEqualTo[T](ICheck`1 check, Object expected)&#xD;
   at NFluent.ObjectCheckExtensions.IsEqualTo[T](ICheck`1 check, T expected)&#xD;
   at AutomationLayer.MarkTestAs.Failing() in C:\Git\pickles\test-harness\AutomationLayer\MarkTestAs.cs:line 15&#xD;
   at AutomationLayer.AdditionSteps.GivenTheBackgroundStepFails() in C:\Git\pickles\test-harness\AutomationLayer\AdditionSteps.cs:line 25&#xD;
   at lambda_method(Closure , IContextManager )&#xD;
   at TechTalk.SpecFlow.Bindings.BindingInvoker.InvokeBinding(IBinding binding, IContextManager contextManager, Object[] arguments, ITestTracer testTracer, TimeSpan&amp; duration)&#xD;
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStepMatch(BindingMatch match, Object[] arguments)&#xD;
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep(StepInstance stepInstance)&#xD;
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()&#xD;
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()&#xD;
   at Pickles.TestHarness.MsTest.FailingBackgroundFeature.ScenarioCleanup()&#xD;
   at Pickles.TestHarness.MsTest.FailingBackgroundFeature.AddingSeveralNumbers(String firstNumber, String secondNumber, String thirdNumber, String result, String[] exampleTags) in C:\Git\pickles\test-harness\MsTest\FailingBackground.feature:line 19&#xD;
   at Pickles.TestHarness.MsTest.FailingBackgroundFeature.AddingSeveralNumbers_60()&#xD;
					</StackTrace>
				</ErrorInfo>
			</Output>
		</UnitTestResult>
		<UnitTestResult executionId="58884e2f-aeab-466e-b90c-d794736d8509" testId="113ed7a2-61bc-45d6-3ad1-61ddbea77238" testName="IgnoredAddingTwoNumbers" computerName="DESKTOP" startTime="2018-08-24T15:55:47.5672099+02:00" endTime="2018-08-24T15:55:47.5672099+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="NotExecuted" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="58884e2f-aeab-466e-b90c-d794736d8509" />
		<UnitTestResult executionId="8f0489bc-31c4-4af2-adea-2e868fa5a168" testId="8b1ea73f-6162-3e0e-0c6c-d3a9edc3a6d1" testName="AddTwoNumbers" computerName="DESKTOP" duration="00:00:00.0004036" startTime="2018-08-24T15:55:47.5482326+02:00" endTime="2018-08-24T15:55:47.5492301+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8f0489bc-31c4-4af2-adea-2e868fa5a168">
			<Output>
				<StdOut>Given the calculator has clean memory&#xD;
-&gt; done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0.0s)&#xD;
Given I have entered 1 into the calculator&#xD;
-&gt; done: AdditionSteps.GivenIHaveEnteredIntoTheCalculator(1) (0.0s)&#xD;
And I have entered 2 into the calculator&#xD;
-&gt; done: AdditionSteps.GivenIHaveEnteredIntoTheCalculator(2) (0.0s)&#xD;
When I press add&#xD;
-&gt; done: AdditionSteps.WhenIPressAdd() (0.0s)&#xD;
Then the result should be 3 on the screen&#xD;
-&gt; done: AdditionSteps.ThenTheResultShouldBeOnTheScreen(3) (0.0s)</StdOut>
			</Output>
		</UnitTestResult>
		<UnitTestResult executionId="bd4bc900-1a0c-4eb4-98c2-ab4c3d7b993e" testId="4c1b1763-64a2-d451-5dd8-c0cd8cebb9f3" testName="InconclusiveFeaturePassingScenario" computerName="DESKTOP" duration="00:00:00.0006118" startTime="2018-08-24T15:55:47.7696417+02:00" endTime="2018-08-24T15:55:47.7706388+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="bd4bc900-1a0c-4eb4-98c2-ab4c3d7b993e">
			<Output>
				<StdOut>Then passing step&#xD;
-&gt; done: MinimalSteps.ThenPassingStep() (0.0s)</StdOut>
			</Output>
		</UnitTestResult>
		<UnitTestResult executionId="270417ab-9d58-4f2a-b34f-3be0c0d7f34f" testId="7e46cf81-dd4a-3fd0-4759-df967f754d0d" testName="ThisIsAScenarioOutlineWhereOneScenarioIsInconclusive_Pass_1" computerName="DESKTOP" duration="00:00:00.0003315" startTime="2018-08-24T15:55:47.6778865+02:00" endTime="2018-08-24T15:55:47.6778865+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="270417ab-9d58-4f2a-b34f-3be0c0d7f34f">
			<Output>
				<StdOut>Then the scenario will 'pass_1'&#xD;
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("pass_1") (0.0s)</StdOut>
			</Output>
		</UnitTestResult>
		<UnitTestResult executionId="f778cd7d-aa0c-4268-a194-025fa919966d" testId="63ed1f0c-116c-1b91-305f-b10622ab77ce" testName="DealWithMultipleNamedExampleSectionsWithoutDuplicateValues_FirstSet_Fail" computerName="DESKTOP" duration="00:00:00.0019490" startTime="2018-08-24T15:55:47.7317434+02:00" endTime="2018-08-24T15:55:47.7347365+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f778cd7d-aa0c-4268-a194-025fa919966d">
			<Output>
				<StdOut>Then the scenario will 'fail'&#xD;
-&gt; error: 
The checked value is different from the expected one.
The checked value:
	[True]
The expected value:
	[False]</StdOut>
				<ErrorInfo>
					<Message>Test method Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.DealWithMultipleNamedExampleSectionsWithoutDuplicateValues_FirstSet_Fail threw exception: &#xD;
NFluent.FluentCheckException: 
The checked value is different from the expected one.
The checked value:
	[True]
The expected value:
	[False]</Message>
					<StackTrace>    at NFluent.Helpers.EqualityHelper.IsEqualTo(Object instance, Object expected)&#xD;
   at NFluent.ObjectCheckExtensions.&lt;&gt;c__DisplayClass1`1.&lt;IsEqualTo&gt;b__0()&#xD;
   at NFluent.Extensibility.Checker`2.ExecuteCheck(Action action, String negatedExceptionMessage)&#xD;
   at NFluent.ObjectCheckExtensions.IsEqualTo[T](ICheck`1 check, Object expected)&#xD;
   at NFluent.ObjectCheckExtensions.IsEqualTo[T](ICheck`1 check, T expected)&#xD;
   at AutomationLayer.MarkTestAs.Failing() in C:\Git\pickles\test-harness\AutomationLayer\MarkTestAs.cs:line 15&#xD;
   at AutomationLayer.ScenarioOutlineSteps.ThenTheScenarioWill(String result) in C:\Git\pickles\test-harness\AutomationLayer\ScenarioOutlineSteps.cs:line 19&#xD;
   at lambda_method(Closure , IContextManager , String )&#xD;
   at TechTalk.SpecFlow.Bindings.BindingInvoker.InvokeBinding(IBinding binding, IContextManager contextManager, Object[] arguments, ITestTracer testTracer, TimeSpan&amp; duration)&#xD;
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStepMatch(BindingMatch match, Object[] arguments)&#xD;
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep(StepInstance stepInstance)&#xD;
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()&#xD;
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()&#xD;
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.ScenarioCleanup()&#xD;
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.DealWithMultipleNamedExampleSectionsWithoutDuplicateValues(String result, String[] exampleTags) in C:\Git\pickles\test-harness\MsTest\ScenarioOutlines.feature:line 117&#xD;
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.DealWithMultipleNamedExampleSectionsWithoutDuplicateValues_FirstSet_Fail()&#xD;
					</StackTrace>
				</ErrorInfo>
			</Output>
		</UnitTestResult>
		<UnitTestResult executionId="f5afbaa6-6422-47e2-bd4e-093e30ee2300" testId="e9e8007f-b4e7-de1f-b091-ae2a70c6c359" testName="DealWithMultipleExampleSectionsWithDuplicateValues_ExampleSet1_Variant0" computerName="DESKTOP" duration="00:00:00.0027754" startTime="2018-08-24T15:55:47.7217701+02:00" endTime="2018-08-24T15:55:47.7247670+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f5afbaa6-6422-47e2-bd4e-093e30ee2300">
			<Output>
				<StdOut>Then the scenario will 'fail'&#xD;
-&gt; error: 
The checked value is different from the expected one.
The checked value:
	[True]
The expected value:
	[False]</StdOut>
				<ErrorInfo>
					<Message>Test method Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.DealWithMultipleExampleSectionsWithDuplicateValues_ExampleSet1_Variant0 threw exception: &#xD;
NFluent.FluentCheckException: 
The checked value is different from the expected one.
The checked value:
	[True]
The expected value:
	[False]</Message>
					<StackTrace>    at NFluent.Helpers.EqualityHelper.IsEqualTo(Object instance, Object expected)&#xD;
   at NFluent.ObjectCheckExtensions.&lt;&gt;c__DisplayClass1`1.&lt;IsEqualTo&gt;b__0()&#xD;
   at NFluent.Extensibility.Checker`2.ExecuteCheck(Action action, String negatedExceptionMessage)&#xD;
   at NFluent.ObjectCheckExtensions.IsEqualTo[T](ICheck`1 check, Object expected)&#xD;
   at NFluent.ObjectCheckExtensions.IsEqualTo[T](ICheck`1 check, T expected)&#xD;
   at AutomationLayer.MarkTestAs.Failing() in C:\Git\pickles\test-harness\AutomationLayer\MarkTestAs.cs:line 15&#xD;
   at AutomationLayer.ScenarioOutlineSteps.ThenTheScenarioWill(String result) in C:\Git\pickles\test-harness\AutomationLayer\ScenarioOutlineSteps.cs:line 19&#xD;
   at lambda_method(Closure , IContextManager , String )&#xD;
   at TechTalk.SpecFlow.Bindings.BindingInvoker.InvokeBinding(IBinding binding, IContextManager contextManager, Object[] arguments, ITestTracer testTracer, TimeSpan&amp; duration)&#xD;
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStepMatch(BindingMatch match, Object[] arguments)&#xD;
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep(StepInstance stepInstance)&#xD;
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()&#xD;
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()&#xD;
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.ScenarioCleanup()&#xD;
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.DealWithMultipleExampleSectionsWithDuplicateValues(String result, String[] exampleTags) in C:\Git\pickles\test-harness\MsTest\ScenarioOutlines.feature:line 101&#xD;
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.DealWithMultipleExampleSectionsWithDuplicateValues_ExampleSet1_Variant0()&#xD;
					</StackTrace>
				</ErrorInfo>
			</Output>
		</UnitTestResult>
		<UnitTestResult executionId="59065cca-abcb-4d5f-b1d0-1c4677e27042" testId="efcbe7cc-31a8-2063-2ba3-daddc29b814d" testName="ThisIsAScenarioOutlineWithParenthesesHyphenAndComma10_2030_40_Pass_1" computerName="DESKTOP" duration="00:00:00.0004744" startTime="2018-08-24T15:55:47.7506921+02:00" endTime="2018-08-24T15:55:47.7506921+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="59065cca-abcb-4d5f-b1d0-1c4677e27042">
			<Output>
				<StdOut>Given the calculator has clean memory&#xD;
-&gt; done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0.0s)&#xD;
Then the scenario will 'pass_1'&#xD;
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("pass_1") (0.0s)</StdOut>
			</Output>
		</UnitTestResult>
		<UnitTestResult executionId="15df8c0e-92b1-4768-bf94-b51eef985141" testId="e74302e2-7ff3-8284-1c9e-66602f8f2cc3" testName="DealWithMultipleExampleSectionsWithDuplicateValues_ExampleSet1_Variant1" computerName="DESKTOP" duration="00:00:00.0032439" startTime="2018-08-24T15:55:47.7247670+02:00" endTime="2018-08-24T15:55:47.7287503+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="NotExecuted" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="15df8c0e-92b1-4768-bf94-b51eef985141">
			<Output>
				<StdOut>Then the scenario will 'inconclusive'&#xD;
-&gt; pending: ScenarioOutlineSteps.ThenTheScenarioWill("inconclusive")</StdOut>
				<ErrorInfo>
					<Message>Assert.Inconclusive failed. One or more step definitions are not implemented yet.&#xD;
  ScenarioOutlineSteps.ThenTheScenarioWill("inconclusive")</Message>
					<StackTrace>   at lambda_method(Closure , String , Object[] )&#xD;
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestInconclusive(String message)&#xD;
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestPending(String message)&#xD;
   at TechTalk.SpecFlow.ErrorHandling.ErrorProvider.ThrowPendingError(TestStatus testStatus, String message)&#xD;
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()&#xD;
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()&#xD;
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.ScenarioCleanup()&#xD;
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.DealWithMultipleExampleSectionsWithDuplicateValues(String result, String[] exampleTags) in C:\Git\pickles\test-harness\MsTest\ScenarioOutlines.feature:line 101&#xD;
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.DealWithMultipleExampleSectionsWithDuplicateValues_ExampleSet1_Variant1()&#xD;
					</StackTrace>
				</ErrorInfo>
			</Output>
		</UnitTestResult>
		<UnitTestResult executionId="49ea4a85-988b-4b51-9642-76d773abcd00" testId="f3327e4b-92ea-d5bf-ceff-5062ff9febf5" testName="ThisIsAScenarioOutlineWhereOneScenarioFails_Pass_2" computerName="DESKTOP" duration="00:00:00.0002961" startTime="2018-08-24T15:55:47.6828742+02:00" endTime="2018-08-24T15:55:47.6838709+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="49ea4a85-988b-4b51-9642-76d773abcd00">
			<Output>
				<StdOut>Then the scenario will 'pass_2'&#xD;
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("pass_2") (0.0s)</StdOut>
			</Output>
		</UnitTestResult>
		<UnitTestResult executionId="6d32e8ec-7229-4b81-a868-afef5b413b00" testId="0943972d-b8e7-5cf6-5903-3ab366248fb3" testName="DealWithMultipleExampleSectionsWithDuplicateValues_ExampleSet0_Variant2" computerName="DESKTOP" duration="00:00:00.0003046" startTime="2018-08-24T15:55:47.7207721+02:00" endTime="2018-08-24T15:55:47.7217701+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6d32e8ec-7229-4b81-a868-afef5b413b00">
			<Output>
				<StdOut>Then the scenario will 'pass'&#xD;
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("pass") (0.0s)</StdOut>
			</Output>
		</UnitTestResult>
		<UnitTestResult executionId="e965a662-af26-4b40-9f21-d04175674e35" testId="263e5dc5-0d1b-01a3-8bd8-b8fe2d17245d" testName="DealWithMultipleExampleSectionsWithDuplicateValues_ExampleSet1_Variant3" computerName="DESKTOP" duration="00:00:00.0002009" startTime="2018-08-24T15:55:47.7307454+02:00" endTime="2018-08-24T15:55:47.7307454+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e965a662-af26-4b40-9f21-d04175674e35">
			<Output>
				<StdOut>Then the scenario will 'pass'&#xD;
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("pass") (0.0s)</StdOut>
			</Output>
		</UnitTestResult>
		<UnitTestResult executionId="286da3f9-1758-4b31-9ce1-26edc6d5249a" testId="27968872-ecbf-8ec7-3a98-d1be98533db7" testName="FailingFeatureFailingScenario" computerName="DESKTOP" duration="00:00:00.0020633" startTime="2018-08-24T15:55:47.7666491+02:00" endTime="2018-08-24T15:55:47.7686454+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="286da3f9-1758-4b31-9ce1-26edc6d5249a">
			<Output>
				<StdOut>Then failing step&#xD;
-&gt; error: 
The checked value is different from the expected one.
The checked value:
	[True]
The expected value:
	[False]</StdOut>
				<ErrorInfo>
					<Message>Test method Pickles.TestHarness.MsTest.MinimalFeatures.FailingFeature.FailingFeatureFailingScenario threw exception: &#xD;
NFluent.FluentCheckException: 
The checked value is different from the expected one.
The checked value:
	[True]
The expected value:
	[False]</Message>
					<StackTrace>    at NFluent.Helpers.EqualityHelper.IsEqualTo(Object instance, Object expected)&#xD;
   at NFluent.ObjectCheckExtensions.&lt;&gt;c__DisplayClass1`1.&lt;IsEqualTo&gt;b__0()&#xD;
   at NFluent.Extensibility.Checker`2.ExecuteCheck(Action action, String negatedExceptionMessage)&#xD;
   at NFluent.ObjectCheckExtensions.IsEqualTo[T](ICheck`1 check, Object expected)&#xD;
   at NFluent.ObjectCheckExtensions.IsEqualTo[T](ICheck`1 check, T expected)&#xD;
   at AutomationLayer.MarkTestAs.Failing() in C:\Git\pickles\test-harness\AutomationLayer\MarkTestAs.cs:line 15&#xD;
   at AutomationLayer.MinimalFeatures.MinimalSteps.ThenFailingStep() in C:\Git\pickles\test-harness\AutomationLayer\MinimalFeatures\MinimalSteps.cs:line 24&#xD;
   at lambda_method(Closure , IContextManager )&#xD;
   at TechTalk.SpecFlow.Bindings.BindingInvoker.InvokeBinding(IBinding binding, IContextManager contextManager, Object[] arguments, ITestTracer testTracer, TimeSpan&amp; duration)&#xD;
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStepMatch(BindingMatch match, Object[] arguments)&#xD;
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep(StepInstance stepInstance)&#xD;
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()&#xD;
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()&#xD;
   at Pickles.TestHarness.MsTest.MinimalFeatures.FailingFeature.ScenarioCleanup()&#xD;
   at Pickles.TestHarness.MsTest.MinimalFeatures.FailingFeature.FailingFeatureFailingScenario() in C:\Git\pickles\test-harness\MsTest\Minimal Features\Failing.feature:line 10&#xD;
					</StackTrace>
				</ErrorInfo>
			</Output>
		</UnitTestResult>
		<UnitTestResult executionId="908fdcbb-2250-4b60-924a-a6c09c71ad84" testId="86c6835b-f515-3465-6b34-ed7f8a77fd53" testName="DealWithDuplicateValues_Variant1" computerName="DESKTOP" duration="00:00:00.0043195" startTime="2018-08-24T15:55:47.7068094+02:00" endTime="2018-08-24T15:55:47.7107987+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="908fdcbb-2250-4b60-924a-a6c09c71ad84">
			<Output>
				<StdOut>Then the scenario will 'fail'&#xD;
-&gt; error: 
The checked value is different from the expected one.
The checked value:
	[True]
The expected value:
	[False]</StdOut>
				<ErrorInfo>
					<Message>Test method Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.DealWithDuplicateValues_Variant1 threw exception: &#xD;
NFluent.FluentCheckException: 
The checked value is different from the expected one.
The checked value:
	[True]
The expected value:
	[False]</Message>
					<StackTrace>    at NFluent.Helpers.EqualityHelper.IsEqualTo(Object instance, Object expected)&#xD;
   at NFluent.ObjectCheckExtensions.&lt;&gt;c__DisplayClass1`1.&lt;IsEqualTo&gt;b__0()&#xD;
   at NFluent.Extensibility.Checker`2.ExecuteCheck(Action action, String negatedExceptionMessage)&#xD;
   at NFluent.ObjectCheckExtensions.IsEqualTo[T](ICheck`1 check, Object expected)&#xD;
   at NFluent.ObjectCheckExtensions.IsEqualTo[T](ICheck`1 check, T expected)&#xD;
   at AutomationLayer.MarkTestAs.Failing() in C:\Git\pickles\test-harness\AutomationLayer\MarkTestAs.cs:line 15&#xD;
   at AutomationLayer.ScenarioOutlineSteps.ThenTheScenarioWill(String result) in C:\Git\pickles\test-harness\AutomationLayer\ScenarioOutlineSteps.cs:line 19&#xD;
   at lambda_method(Closure , IContextManager , String )&#xD;
   at TechTalk.SpecFlow.Bindings.BindingInvoker.InvokeBinding(IBinding binding, IContextManager contextManager, Object[] arguments, ITestTracer testTracer, TimeSpan&amp; duration)&#xD;
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStepMatch(BindingMatch match, Object[] arguments)&#xD;
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep(StepInstance stepInstance)&#xD;
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()&#xD;
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()&#xD;
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.ScenarioCleanup()&#xD;
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.DealWithDuplicateValues(String result, String[] exampleTags) in C:\Git\pickles\test-harness\MsTest\ScenarioOutlines.feature:line 90&#xD;
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.DealWithDuplicateValues_Variant1()&#xD;
					</StackTrace>
				</ErrorInfo>
			</Output>
		</UnitTestResult>
		<UnitTestResult executionId="df770803-4bfd-408b-a8b0-7222ff50afb4" testId="023be1fc-43f7-a6ca-ba7e-e49bc730031f" testName="DealWithDuplicateValues_Variant4" computerName="DESKTOP" duration="00:00:00.0026257" startTime="2018-08-24T15:55:47.7147889+02:00" endTime="2018-08-24T15:55:47.7177803+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="df770803-4bfd-408b-a8b0-7222ff50afb4">
			<Output>
				<StdOut>Then the scenario will 'fail'&#xD;
-&gt; error: 
The checked value is different from the expected one.
The checked value:
	[True]
The expected value:
	[False]</StdOut>
				<ErrorInfo>
					<Message>Test method Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.DealWithDuplicateValues_Variant4 threw exception: &#xD;
NFluent.FluentCheckException: 
The checked value is different from the expected one.
The checked value:
	[True]
The expected value:
	[False]</Message>
					<StackTrace>    at NFluent.Helpers.EqualityHelper.IsEqualTo(Object instance, Object expected)&#xD;
   at NFluent.ObjectCheckExtensions.&lt;&gt;c__DisplayClass1`1.&lt;IsEqualTo&gt;b__0()&#xD;
   at NFluent.Extensibility.Checker`2.ExecuteCheck(Action action, String negatedExceptionMessage)&#xD;
   at NFluent.ObjectCheckExtensions.IsEqualTo[T](ICheck`1 check, Object expected)&#xD;
   at NFluent.ObjectCheckExtensions.IsEqualTo[T](ICheck`1 check, T expected)&#xD;
   at AutomationLayer.MarkTestAs.Failing() in C:\Git\pickles\test-harness\AutomationLayer\MarkTestAs.cs:line 15&#xD;
   at AutomationLayer.ScenarioOutlineSteps.ThenTheScenarioWill(String result) in C:\Git\pickles\test-harness\AutomationLayer\ScenarioOutlineSteps.cs:line 19&#xD;
   at lambda_method(Closure , IContextManager , String )&#xD;
   at TechTalk.SpecFlow.Bindings.BindingInvoker.InvokeBinding(IBinding binding, IContextManager contextManager, Object[] arguments, ITestTracer testTracer, TimeSpan&amp; duration)&#xD;
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStepMatch(BindingMatch match, Object[] arguments)&#xD;
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep(StepInstance stepInstance)&#xD;
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()&#xD;
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()&#xD;
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.ScenarioCleanup()&#xD;
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.DealWithDuplicateValues(String result, String[] exampleTags) in C:\Git\pickles\test-harness\MsTest\ScenarioOutlines.feature:line 90&#xD;
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.DealWithDuplicateValues_Variant4()&#xD;
					</StackTrace>
				</ErrorInfo>
			</Output>
		</UnitTestResult>
		<UnitTestResult executionId="79c03a4c-24b7-49a5-8eda-08e28e4be38c" testId="d6dd768f-20fc-ed4a-8542-86bee0adde9e" testName="AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet2_Fail_1" computerName="DESKTOP" duration="00:00:00.0021303" startTime="2018-08-24T15:55:47.6948414+02:00" endTime="2018-08-24T15:55:47.6978336+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="79c03a4c-24b7-49a5-8eda-08e28e4be38c">
			<Output>
				<StdOut>Then the scenario will 'fail_1'&#xD;
-&gt; error: 
The checked value is different from the expected one.
The checked value:
	[True]
The expected value:
	[False]</StdOut>
				<ErrorInfo>
					<Message>Test method Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet2_Fail_1 threw exception: &#xD;
NFluent.FluentCheckException: 
The checked value is different from the expected one.
The checked value:
	[True]
The expected value:
	[False]</Message>
					<StackTrace>    at NFluent.Helpers.EqualityHelper.IsEqualTo(Object instance, Object expected)&#xD;
   at NFluent.ObjectCheckExtensions.&lt;&gt;c__DisplayClass1`1.&lt;IsEqualTo&gt;b__0()&#xD;
   at NFluent.Extensibility.Checker`2.ExecuteCheck(Action action, String negatedExceptionMessage)&#xD;
   at NFluent.ObjectCheckExtensions.IsEqualTo[T](ICheck`1 check, Object expected)&#xD;
   at NFluent.ObjectCheckExtensions.IsEqualTo[T](ICheck`1 check, T expected)&#xD;
   at AutomationLayer.MarkTestAs.Failing() in C:\Git\pickles\test-harness\AutomationLayer\MarkTestAs.cs:line 15&#xD;
   at AutomationLayer.ScenarioOutlineSteps.ThenTheScenarioWill(String result) in C:\Git\pickles\test-harness\AutomationLayer\ScenarioOutlineSteps.cs:line 19&#xD;
   at lambda_method(Closure , IContextManager , String )&#xD;
   at TechTalk.SpecFlow.Bindings.BindingInvoker.InvokeBinding(IBinding binding, IContextManager contextManager, Object[] arguments, ITestTracer testTracer, TimeSpan&amp; duration)&#xD;
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStepMatch(BindingMatch match, Object[] arguments)&#xD;
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep(StepInstance stepInstance)&#xD;
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()&#xD;
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()&#xD;
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.ScenarioCleanup()&#xD;
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.AndWeCanGoTotallyBonkersWithMultipleExampleSections_(String result, String[] exampleTags) in C:\Git\pickles\test-harness\MsTest\ScenarioOutlines.feature:line 45&#xD;
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet2_Fail_1()&#xD;
					</StackTrace>
				</ErrorInfo>
			</Output>
		</UnitTestResult>
		<UnitTestResult executionId="426a5f1e-1e28-4c6b-a27d-88773a27f17b" testId="6aa57053-5392-ab46-85c8-7e37adaaee43" testName="AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet1_Inconclusive_1" computerName="DESKTOP" duration="00:00:00.0026542" startTime="2018-08-24T15:55:47.6868631+02:00" endTime="2018-08-24T15:55:47.6898549+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="NotExecuted" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="426a5f1e-1e28-4c6b-a27d-88773a27f17b">
			<Output>
				<StdOut>Then the scenario will 'inconclusive_1'&#xD;
-&gt; pending: ScenarioOutlineSteps.ThenTheScenarioWill("inconclusive_1")</StdOut>
				<ErrorInfo>
					<Message>Assert.Inconclusive failed. One or more step definitions are not implemented yet.&#xD;
  ScenarioOutlineSteps.ThenTheScenarioWill("inconclusive_1")</Message>
					<StackTrace>   at lambda_method(Closure , String , Object[] )&#xD;
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestInconclusive(String message)&#xD;
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestPending(String message)&#xD;
   at TechTalk.SpecFlow.ErrorHandling.ErrorProvider.ThrowPendingError(TestStatus testStatus, String message)&#xD;
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()&#xD;
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()&#xD;
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.ScenarioCleanup()&#xD;
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.AndWeCanGoTotallyBonkersWithMultipleExampleSections_(String result, String[] exampleTags) in C:\Git\pickles\test-harness\MsTest\ScenarioOutlines.feature:line 45&#xD;
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet1_Inconclusive_1()&#xD;
					</StackTrace>
				</ErrorInfo>
			</Output>
		</UnitTestResult>
		<UnitTestResult executionId="d04520ff-cf95-4bca-8115-2b781e12e9e9" testId="fe3a2fd1-be1c-0a5c-b0fd-93bfa634a24c" testName="ThisIsAScenarioWithDanishCharactersAEoaAEOA" computerName="DESKTOP" duration="00:00:00.0014173" startTime="2018-08-24T15:55:47.7596777+02:00" endTime="2018-08-24T15:55:47.7616626+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d04520ff-cf95-4bca-8115-2b781e12e9e9">
			<Output>
				<StdOut>Given the calculator has clean memory&#xD;
-&gt; done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0.0s)&#xD;
Then passing step&#xD;
-&gt; done: MinimalSteps.ThenPassingStep() (0.0s)</StdOut>
			</Output>
		</UnitTestResult>
		<UnitTestResult executionId="281067a9-8e93-4d92-8ec2-79edb88e3a27" testId="0a26fb5c-e736-30e7-7253-b17d330352c1" testName="DealWithMultipleNamedExampleSectionsWithoutDuplicateValues_FirstSet_Pass" computerName="DESKTOP" duration="00:00:00.0004305" startTime="2018-08-24T15:55:47.7307454+02:00" endTime="2018-08-24T15:55:47.7317434+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="281067a9-8e93-4d92-8ec2-79edb88e3a27">
			<Output>
				<StdOut>Then the scenario will 'pass'&#xD;
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("pass") (0.0s)</StdOut>
			</Output>
		</UnitTestResult>
		<UnitTestResult executionId="45b5ef97-b86e-4906-876c-b5a7b5d136ea" testId="46f974ed-841e-26dd-a181-971cc88d892b" testName="ThisScenarioContainsExamplesWithRegex_SpecialCharacters_Variant2" computerName="DESKTOP" duration="00:00:00.0002308" startTime="2018-08-24T15:55:47.7526876+02:00" endTime="2018-08-24T15:55:47.7536865+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="45b5ef97-b86e-4906-876c-b5a7b5d136ea">
			<Output>
				<StdOut>Given the calculator has clean memory&#xD;
-&gt; done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0.0s)&#xD;
When I have special characters for regexes in the value, for example a '.*'&#xD;
-&gt; done: ScenarioOutlineSteps.WhenIHaveSpecialCharactersForRegexesInTheValueForExampleARegex(".*") (0.0s)&#xD;
Then the scenario will 'PASS'&#xD;
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("PASS") (0.0s)</StdOut>
			</Output>
		</UnitTestResult>
		<UnitTestResult executionId="f21bd6cf-0b40-4c93-8aea-507be391eba5" testId="bac4170c-1a63-a86c-98ab-970a14d6058b" testName="DealWithMultipleNamedExampleSectionsWithDuplicateValues_SecondSet_Variant0" computerName="DESKTOP" duration="00:00:00.0031381" startTime="2018-08-24T15:55:47.7397217+02:00" endTime="2018-08-24T15:55:47.7437118+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f21bd6cf-0b40-4c93-8aea-507be391eba5">
			<Output>
				<StdOut>Then the scenario will 'fail'&#xD;
-&gt; error: 
The checked value is different from the expected one.
The checked value:
	[True]
The expected value:
	[False]</StdOut>
				<ErrorInfo>
					<Message>Test method Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.DealWithMultipleNamedExampleSectionsWithDuplicateValues_SecondSet_Variant0 threw exception: &#xD;
NFluent.FluentCheckException: 
The checked value is different from the expected one.
The checked value:
	[True]
The expected value:
	[False]</Message>
					<StackTrace>    at NFluent.Helpers.EqualityHelper.IsEqualTo(Object instance, Object expected)&#xD;
   at NFluent.ObjectCheckExtensions.&lt;&gt;c__DisplayClass1`1.&lt;IsEqualTo&gt;b__0()&#xD;
   at NFluent.Extensibility.Checker`2.ExecuteCheck(Action action, String negatedExceptionMessage)&#xD;
   at NFluent.ObjectCheckExtensions.IsEqualTo[T](ICheck`1 check, Object expected)&#xD;
   at NFluent.ObjectCheckExtensions.IsEqualTo[T](ICheck`1 check, T expected)&#xD;
   at AutomationLayer.MarkTestAs.Failing() in C:\Git\pickles\test-harness\AutomationLayer\MarkTestAs.cs:line 15&#xD;
   at AutomationLayer.ScenarioOutlineSteps.ThenTheScenarioWill(String result) in C:\Git\pickles\test-harness\AutomationLayer\ScenarioOutlineSteps.cs:line 19&#xD;
   at lambda_method(Closure , IContextManager , String )&#xD;
   at TechTalk.SpecFlow.Bindings.BindingInvoker.InvokeBinding(IBinding binding, IContextManager contextManager, Object[] arguments, ITestTracer testTracer, TimeSpan&amp; duration)&#xD;
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStepMatch(BindingMatch match, Object[] arguments)&#xD;
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep(StepInstance stepInstance)&#xD;
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()&#xD;
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()&#xD;
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.ScenarioCleanup()&#xD;
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.DealWithMultipleNamedExampleSectionsWithDuplicateValues(String result, String[] exampleTags) in C:\Git\pickles\test-harness\MsTest\ScenarioOutlines.feature:line 129&#xD;
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.DealWithMultipleNamedExampleSectionsWithDuplicateValues_SecondSet_Variant0()&#xD;
					</StackTrace>
				</ErrorInfo>
			</Output>
		</UnitTestResult>
		<UnitTestResult executionId="9341d985-d5d8-4e6e-8e34-a13410b7f00d" testId="b4fa0e1c-5a4e-dabb-6fb2-000597c04404" testName="ThisIsAScenarioOutlineWhereOneScenarioIsInconclusive_Inconclusive_1" computerName="DESKTOP" duration="00:00:00.0028556" startTime="2018-08-24T15:55:47.6788836+02:00" endTime="2018-08-24T15:55:47.6818762+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="NotExecuted" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9341d985-d5d8-4e6e-8e34-a13410b7f00d">
			<Output>
				<StdOut>Then the scenario will 'inconclusive_1'&#xD;
-&gt; pending: ScenarioOutlineSteps.ThenTheScenarioWill("inconclusive_1")</StdOut>
				<ErrorInfo>
					<Message>Assert.Inconclusive failed. One or more step definitions are not implemented yet.&#xD;
  ScenarioOutlineSteps.ThenTheScenarioWill("inconclusive_1")</Message>
					<StackTrace>   at lambda_method(Closure , String , Object[] )&#xD;
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestInconclusive(String message)&#xD;
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestPending(String message)&#xD;
   at TechTalk.SpecFlow.ErrorHandling.ErrorProvider.ThrowPendingError(TestStatus testStatus, String message)&#xD;
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()&#xD;
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()&#xD;
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.ScenarioCleanup()&#xD;
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.ThisIsAScenarioOutlineWhereOneScenarioIsInconclusive(String result, String[] exampleTags) in C:\Git\pickles\test-harness\MsTest\ScenarioOutlines.feature:line 21&#xD;
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.ThisIsAScenarioOutlineWhereOneScenarioIsInconclusive_Inconclusive_1()&#xD;
					</StackTrace>
				</ErrorInfo>
			</Output>
		</UnitTestResult>
		<UnitTestResult executionId="10d74c9c-0af4-45f5-9d33-a9d11029531a" testId="9fb96cdc-a81e-252c-1a41-7ecd9a592065" testName="TestMethod" computerName="DESKTOP" duration="00:00:00.0000793" startTime="2018-08-24T15:55:47.7477008+02:00" endTime="2018-08-24T15:55:47.7486975+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="10d74c9c-0af4-45f5-9d33-a9d11029531a" />
		<UnitTestResult executionId="9d794357-2e96-41e8-a8de-ea8c0827d917" testId="860fe6a8-8ab8-da24-9ff4-8fc156cff05f" testName="ThisScenarioContainsExamplesWithRegex_SpecialCharacters_Variant0" computerName="DESKTOP" duration="00:00:00.0009395" startTime="2018-08-24T15:55:47.7506921+02:00" endTime="2018-08-24T15:55:47.7526876+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9d794357-2e96-41e8-a8de-ea8c0827d917">
			<Output>
				<StdOut>Given the calculator has clean memory&#xD;
-&gt; done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0.0s)&#xD;
When I have special characters for regexes in the value, for example a '**'&#xD;
-&gt; done: ScenarioOutlineSteps.WhenIHaveSpecialCharactersForRegexesInTheValueForExampleARegex("**") (0.0s)&#xD;
Then the scenario will 'PASS'&#xD;
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("PASS") (0.0s)</StdOut>
			</Output>
		</UnitTestResult>
		<UnitTestResult executionId="c3d1b665-efea-42de-be0c-d1f3504bbf9f" testId="8bc041bd-d809-7992-ff2a-09b84d713da5" testName="NotAutomatedScenario2" computerName="DESKTOP" duration="00:00:00.0103445" startTime="2018-08-24T15:55:47.6449747+02:00" endTime="2018-08-24T15:55:47.6549480+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="NotExecuted" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c3d1b665-efea-42de-be0c-d1f3504bbf9f">
			<Output>
				<StdOut>Given unimplemented step&#xD;
-&gt; No matching step definition found for the step. Use the following code to create one:&#xD;
        [Given(@"unimplemented step")]&#xD;
        public void GivenUnimplementedStep()&#xD;
        {&#xD;
            ScenarioContext.Current.Pending();&#xD;
        }&#xD;
&#xD;
Given unimplemented step&#xD;
-&gt; No matching step definition found for the step. Use the following code to create one:&#xD;
        [Given(@"unimplemented step")]&#xD;
        public void GivenUnimplementedStep()&#xD;
        {&#xD;
            ScenarioContext.Current.Pending();&#xD;
        }&#xD;
&#xD;
When unimplemented step&#xD;
-&gt; No matching step definition found for the step. Use the following code to create one:&#xD;
        [When(@"unimplemented step")]&#xD;
        public void WhenUnimplementedStep()&#xD;
        {&#xD;
            ScenarioContext.Current.Pending();&#xD;
        }&#xD;
&#xD;
Then unimplemented step&#xD;
-&gt; No matching step definition found for the step. Use the following code to create one:&#xD;
        [Then(@"unimplemented step")]&#xD;
        public void ThenUnimplementedStep()&#xD;
        {&#xD;
            ScenarioContext.Current.Pending();&#xD;
        }</StdOut>
				<ErrorInfo>
					<Message>Assert.Inconclusive failed. No matching step definition found for one or more steps.&#xD;
using System;&#xD;
using TechTalk.SpecFlow;&#xD;
&#xD;
namespace MyNamespace&#xD;
{&#xD;
    [Binding]&#xD;
    public class StepDefinitions&#xD;
    {&#xD;
        [Given(@"unimplemented step")]&#xD;
        public void GivenUnimplementedStep()&#xD;
        {&#xD;
            ScenarioContext.Current.Pending();&#xD;
        }&#xD;
        &#xD;
        [When(@"unimplemented step")]&#xD;
        public void WhenUnimplementedStep()&#xD;
        {&#xD;
            ScenarioContext.Current.Pending();&#xD;
        }&#xD;
        &#xD;
        [Then(@"unimplemented step")]&#xD;
        public void ThenUnimplementedStep()&#xD;
        {&#xD;
            ScenarioContext.Current.Pending();&#xD;
        }&#xD;
    }&#xD;
}&#xD;
					</Message>
					<StackTrace>   at lambda_method(Closure , String , Object[] )&#xD;
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestInconclusive(String message)&#xD;
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestPending(String message)&#xD;
   at TechTalk.SpecFlow.ErrorHandling.ErrorProvider.ThrowPendingError(TestStatus testStatus, String message)&#xD;
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()&#xD;
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()&#xD;
   at Pickles.TestHarness.MsTest.NotAutomatedAtAllFeature.ScenarioCleanup()&#xD;
   at Pickles.TestHarness.MsTest.NotAutomatedAtAllFeature.NotAutomatedScenario2() in C:\Git\pickles\test-harness\MsTest\NotAutomatedAtAll.feature:line 14&#xD;
					</StackTrace>
				</ErrorInfo>
			</Output>
		</UnitTestResult>
		<UnitTestResult executionId="623a289b-d32d-4012-b0a1-8e6dfe77f588" testId="b2578459-aaca-c2fd-c57f-0405fafa6c43" testName="DealCorrectlyWithBackslashesInTheExamples_CTemp" computerName="DESKTOP" duration="00:00:00.0010611" startTime="2018-08-24T15:55:47.7008258+02:00" endTime="2018-08-24T15:55:47.7018229+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="623a289b-d32d-4012-b0a1-8e6dfe77f588">
			<Output>
				<StdOut>When I have backslashes in the value, for example a 'c:\Temp\'&#xD;
-&gt; done: ScenarioOutlineSteps.WhenIHaveBackslashesInTheValueForExampleAFilePath("c:\Temp\") (0.0s)</StdOut>
			</Output>
		</UnitTestResult>
		<UnitTestResult executionId="891b441b-ab1f-43d0-b86a-15faea0b8ab2" testId="704f3991-3746-c4a7-d868-c680e23c1099" testName="DealWithMultipleNamedExampleSectionsWithDuplicateValues_FirstSet_Variant1" computerName="DESKTOP" duration="00:00:00.0017523" startTime="2018-08-24T15:55:47.7377270+02:00" endTime="2018-08-24T15:55:47.7397217+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="891b441b-ab1f-43d0-b86a-15faea0b8ab2">
			<Output>
				<StdOut>Then the scenario will 'fail'&#xD;
-&gt; error: 
The checked value is different from the expected one.
The checked value:
	[True]
The expected value:
	[False]</StdOut>
				<ErrorInfo>
					<Message>Test method Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.DealWithMultipleNamedExampleSectionsWithDuplicateValues_FirstSet_Variant1 threw exception: &#xD;
NFluent.FluentCheckException: 
The checked value is different from the expected one.
The checked value:
	[True]
The expected value:
	[False]</Message>
					<StackTrace>    at NFluent.Helpers.EqualityHelper.IsEqualTo(Object instance, Object expected)&#xD;
   at NFluent.ObjectCheckExtensions.&lt;&gt;c__DisplayClass1`1.&lt;IsEqualTo&gt;b__0()&#xD;
   at NFluent.Extensibility.Checker`2.ExecuteCheck(Action action, String negatedExceptionMessage)&#xD;
   at NFluent.ObjectCheckExtensions.IsEqualTo[T](ICheck`1 check, Object expected)&#xD;
   at NFluent.ObjectCheckExtensions.IsEqualTo[T](ICheck`1 check, T expected)&#xD;
   at AutomationLayer.MarkTestAs.Failing() in C:\Git\pickles\test-harness\AutomationLayer\MarkTestAs.cs:line 15&#xD;
   at AutomationLayer.ScenarioOutlineSteps.ThenTheScenarioWill(String result) in C:\Git\pickles\test-harness\AutomationLayer\ScenarioOutlineSteps.cs:line 19&#xD;
   at lambda_method(Closure , IContextManager , String )&#xD;
   at TechTalk.SpecFlow.Bindings.BindingInvoker.InvokeBinding(IBinding binding, IContextManager contextManager, Object[] arguments, ITestTracer testTracer, TimeSpan&amp; duration)&#xD;
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStepMatch(BindingMatch match, Object[] arguments)&#xD;
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep(StepInstance stepInstance)&#xD;
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()&#xD;
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()&#xD;
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.ScenarioCleanup()&#xD;
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.DealWithMultipleNamedExampleSectionsWithDuplicateValues(String result, String[] exampleTags) in C:\Git\pickles\test-harness\MsTest\ScenarioOutlines.feature:line 129&#xD;
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.DealWithMultipleNamedExampleSectionsWithDuplicateValues_FirstSet_Variant1()&#xD;
					</StackTrace>
				</ErrorInfo>
			</Output>
		</UnitTestResult>
		<UnitTestResult executionId="b3067290-e057-4b0a-8ba2-0fea31ff3820" testId="68c045a3-263d-f215-70d9-bc46476ac556" testName="FailingFeatureInconclusiveScenario" computerName="DESKTOP" duration="00:00:00.0026099" startTime="2018-08-24T15:55:47.7636577+02:00" endTime="2018-08-24T15:55:47.7666491+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="NotExecuted" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b3067290-e057-4b0a-8ba2-0fea31ff3820">
			<Output>
				<StdOut>Then inconclusive step&#xD;
-&gt; pending: MinimalSteps.ThenInconclusiveStep()</StdOut>
				<ErrorInfo>
					<Message>Assert.Inconclusive failed. One or more step definitions are not implemented yet.&#xD;
  MinimalSteps.ThenInconclusiveStep()</Message>
					<StackTrace>   at lambda_method(Closure , String , Object[] )&#xD;
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestInconclusive(String message)&#xD;
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestPending(String message)&#xD;
   at TechTalk.SpecFlow.ErrorHandling.ErrorProvider.ThrowPendingError(TestStatus testStatus, String message)&#xD;
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()&#xD;
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()&#xD;
   at Pickles.TestHarness.MsTest.MinimalFeatures.FailingFeature.ScenarioCleanup()&#xD;
   at Pickles.TestHarness.MsTest.MinimalFeatures.FailingFeature.FailingFeatureInconclusiveScenario() in C:\Git\pickles\test-harness\MsTest\Minimal Features\Failing.feature:line 7&#xD;
					</StackTrace>
				</ErrorInfo>
			</Output>
		</UnitTestResult>
		<UnitTestResult executionId="9354de18-e3f6-47b8-9fb1-00bb54b00f16" testId="e8c43f8a-7359-f15b-4250-8ed752528b1b" testName="AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet1_Inconclusive_2" computerName="DESKTOP" duration="00:00:00.0045060" startTime="2018-08-24T15:55:47.6898549+02:00" endTime="2018-08-24T15:55:47.6948414+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="NotExecuted" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9354de18-e3f6-47b8-9fb1-00bb54b00f16">
			<Output>
				<StdOut>Then the scenario will 'inconclusive_2'&#xD;
-&gt; pending: ScenarioOutlineSteps.ThenTheScenarioWill("inconclusive_2")</StdOut>
				<ErrorInfo>
					<Message>Assert.Inconclusive failed. One or more step definitions are not implemented yet.&#xD;
  ScenarioOutlineSteps.ThenTheScenarioWill("inconclusive_2")</Message>
					<StackTrace>   at lambda_method(Closure , String , Object[] )&#xD;
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestInconclusive(String message)&#xD;
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestPending(String message)&#xD;
   at TechTalk.SpecFlow.ErrorHandling.ErrorProvider.ThrowPendingError(TestStatus testStatus, String message)&#xD;
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()&#xD;
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()&#xD;
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.ScenarioCleanup()&#xD;
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.AndWeCanGoTotallyBonkersWithMultipleExampleSections_(String result, String[] exampleTags) in C:\Git\pickles\test-harness\MsTest\ScenarioOutlines.feature:line 45&#xD;
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet1_Inconclusive_2()&#xD;
					</StackTrace>
				</ErrorInfo>
			</Output>
		</UnitTestResult>
		<UnitTestResult executionId="90842bdc-cb67-4f84-9433-e6e9550f5d4b" testId="f9a64263-f40d-f64d-0a5b-22b6db10eb26" testName="ThisIsAScenarioOutlineWhereAllScenariosPass_Pass_1" computerName="DESKTOP" duration="00:00:00.0042474" startTime="2018-08-24T15:55:47.6709054+02:00" endTime="2018-08-24T15:55:47.6768894+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="90842bdc-cb67-4f84-9433-e6e9550f5d4b">
			<Output>
				<StdOut>Then the scenario will 'pass_1'&#xD;
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("pass_1") (0.0s)</StdOut>
			</Output>
		</UnitTestResult>
		<UnitTestResult executionId="b54c18a7-5a28-4d86-aef5-642b7d6bb2a7" testId="522385c4-21c5-f000-d373-cd3fcbd0a206" testName="DealWithMultipleExampleSectionsWithDuplicateValues_ExampleSet0_Variant0" computerName="DESKTOP" duration="00:00:00.0004288" startTime="2018-08-24T15:55:47.7177803+02:00" endTime="2018-08-24T15:55:47.7187778+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b54c18a7-5a28-4d86-aef5-642b7d6bb2a7">
			<Output>
				<StdOut>Then the scenario will 'pass'&#xD;
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("pass") (0.0s)</StdOut>
			</Output>
		</UnitTestResult>
		<UnitTestResult executionId="85343b94-e938-4f10-9c1b-59c5ceee26a2" testId="9404b577-698b-61ca-64fc-88ff799201bd" testName="DealCorrectlyWithOverlongExampleValues_PleaseEnterAValidTwoLetterCountryCodeE_G_DE" computerName="DESKTOP" duration="00:00:00.0014097" startTime="2018-08-24T15:55:47.7038296+02:00" endTime="2018-08-24T15:55:47.7058123+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="85343b94-e938-4f10-9c1b-59c5ceee26a2">
			<Output>
				<StdOut>When I have a field with value 'Please enter a valid two letter country code (e.g. DE)!'&#xD;
-&gt; done: ScenarioOutlineSteps.WhenIHaveAFieldWithValue("Please enter a va...") (0.0s)&#xD;
And I have a field with value 'This is just a very very very veery long error message!'&#xD;
-&gt; done: ScenarioOutlineSteps.WhenIHaveAFieldWithValue("This is just a ve...") (0.0s)&#xD;
Then the scenario will 'pass_1'&#xD;
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("pass_1") (0.0s)</StdOut>
			</Output>
		</UnitTestResult>
		<UnitTestResult executionId="83b3eee7-7b60-4306-831a-495f1324b81c" testId="b08cd0c6-1fb7-422e-7264-d77da39fe00d" testName="FailingFeaturePassingScenario" computerName="DESKTOP" duration="00:00:00.0007078" startTime="2018-08-24T15:55:47.7626606+02:00" endTime="2018-08-24T15:55:47.7636577+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="83b3eee7-7b60-4306-831a-495f1324b81c">
			<Output>
				<StdOut>Then passing step&#xD;
-&gt; done: MinimalSteps.ThenPassingStep() (0.0s)</StdOut>
			</Output>
		</UnitTestResult>
		<UnitTestResult executionId="b8bbfbf9-0ddb-408b-bf22-f720df567805" testId="a900fecb-3728-fcea-67f2-b24d9d94cd5e" testName="ThisScenarioContainsExamplesWithRegex_SpecialCharacters_Variant1" computerName="DESKTOP" duration="00:00:00.0002508" startTime="2018-08-24T15:55:47.7526876+02:00" endTime="2018-08-24T15:55:47.7526876+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b8bbfbf9-0ddb-408b-bf22-f720df567805">
			<Output>
				<StdOut>Given the calculator has clean memory&#xD;
-&gt; done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0.0s)&#xD;
When I have special characters for regexes in the value, for example a '++'&#xD;
-&gt; done: ScenarioOutlineSteps.WhenIHaveSpecialCharactersForRegexesInTheValueForExampleARegex("++") (0.0s)&#xD;
Then the scenario will 'PASS'&#xD;
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("PASS") (0.0s)</StdOut>
			</Output>
		</UnitTestResult>
		<UnitTestResult executionId="e7a308dc-efd0-4aad-b326-736418c522b3" testId="0df655e6-c4cf-164c-b17f-7f9f92c19045" testName="FailToAddTwoNumbers" computerName="DESKTOP" duration="00:00:00.0181896" startTime="2018-08-24T15:55:47.5492301+02:00" endTime="2018-08-24T15:55:47.5672099+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e7a308dc-efd0-4aad-b326-736418c522b3">
			<Output>
				<StdOut>Given the calculator has clean memory&#xD;
-&gt; done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0.0s)&#xD;
Given I have entered 1 into the calculator&#xD;
-&gt; done: AdditionSteps.GivenIHaveEnteredIntoTheCalculator(1) (0.0s)&#xD;
And I have entered 2.2 into the calculator&#xD;
-&gt; done: AdditionSteps.GivenIHaveEnteredIntoTheCalculator(2.2) (0.0s)&#xD;
When I press add&#xD;
-&gt; done: AdditionSteps.WhenIPressAdd() (0.0s)&#xD;
Then the result should be 3.2 on the screen&#xD;
-&gt; error: Input string was not in a correct format.</StdOut>
				<ErrorInfo>
					<Message>Test method Pickles.TestHarness.MsTest.AdditionFeature.FailToAddTwoNumbers threw exception: &#xD;
System.FormatException: Input string was not in a correct format.</Message>
					<StackTrace>    at System.Number.StringToNumber(String str, NumberStyles options, NumberBuffer&amp; number, NumberFormatInfo info, Boolean parseDecimal)&#xD;
   at System.Number.ParseInt32(String s, NumberStyles style, NumberFormatInfo info)&#xD;
   at System.String.System.IConvertible.ToInt32(IFormatProvider provider)&#xD;
   at System.Convert.ChangeType(Object value, Type conversionType, IFormatProvider provider)&#xD;
   at TechTalk.SpecFlow.Bindings.StepArgumentTypeConverter.ConvertSimple(Type typeToConvertTo, Object value, CultureInfo cultureInfo)&#xD;
   at TechTalk.SpecFlow.Bindings.StepArgumentTypeConverter.ConvertSimple(IBindingType typeToConvertTo, Object value, CultureInfo cultureInfo)&#xD;
   at TechTalk.SpecFlow.Bindings.StepArgumentTypeConverter.Convert(Object value, IBindingType typeToConvertTo, CultureInfo cultureInfo)&#xD;
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ConvertArg(Object value, IBindingType typeToConvertTo)&#xD;
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.&lt;&gt;c__DisplayClass5.&lt;GetExecuteArguments&gt;b__4(Object arg, Int32 argIndex)&#xD;
   at System.Linq.Enumerable.&lt;SelectIterator&gt;d__5`2.MoveNext()&#xD;
   at System.Linq.Buffer`1..ctor(IEnumerable`1 source)&#xD;
   at System.Linq.Enumerable.ToArray[TSource](IEnumerable`1 source)&#xD;
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.GetExecuteArguments(BindingMatch match)&#xD;
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep(StepInstance stepInstance)&#xD;
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()&#xD;
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()&#xD;
   at Pickles.TestHarness.MsTest.AdditionFeature.ScenarioCleanup()&#xD;
   at Pickles.TestHarness.MsTest.AdditionFeature.FailToAddTwoNumbers() in C:\Git\pickles\test-harness\MsTest\Addition.feature:line 34&#xD;
					</StackTrace>
				</ErrorInfo>
			</Output>
		</UnitTestResult>
		<UnitTestResult executionId="d2f2edbb-23d3-47b9-a184-2e1ffb523300" testId="99ae1964-4272-f64b-08c7-beaae8bff30c" testName="AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet0_Pass_2" computerName="DESKTOP" duration="00:00:00.0002585" startTime="2018-08-24T15:55:47.6868631+02:00" endTime="2018-08-24T15:55:47.6868631+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d2f2edbb-23d3-47b9-a184-2e1ffb523300">
			<Output>
				<StdOut>Then the scenario will 'pass_2'&#xD;
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("pass_2") (0.0s)</StdOut>
			</Output>
		</UnitTestResult>
		<UnitTestResult executionId="66bd0269-855c-465a-9793-f969102204fb" testId="cd06647c-3ccf-9545-fdb0-c96daaba2ca8" testName="AddTwoNumbers" computerName="DESKTOP" duration="00:00:00.0094451" startTime="2018-08-24T15:55:47.6140605+02:00" endTime="2018-08-24T15:55:47.6250288+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="66bd0269-855c-465a-9793-f969102204fb">
			<Output>
				<StdOut>Given the background step fails&#xD;
-&gt; error: 
The checked value is different from the expected one.
The checked value:
	[True]
The expected value:
	[False]&#xD;
And the calculator has clean memory&#xD;
-&gt; skipped because of previous errors&#xD;
Given I have entered 50 into the calculator&#xD;
-&gt; skipped because of previous errors&#xD;
And I have entered 70 into the calculator&#xD;
-&gt; skipped because of previous errors&#xD;
When I press add&#xD;
-&gt; skipped because of previous errors&#xD;
Then the result should be 120 on the screen&#xD;
-&gt; skipped because of previous errors</StdOut>
				<ErrorInfo>
					<Message>Test method Pickles.TestHarness.MsTest.FailingBackgroundFeature.AddTwoNumbers threw exception: &#xD;
NFluent.FluentCheckException: 
The checked value is different from the expected one.
The checked value:
	[True]
The expected value:
	[False]</Message>
					<StackTrace>    at NFluent.Helpers.EqualityHelper.IsEqualTo(Object instance, Object expected)&#xD;
   at NFluent.ObjectCheckExtensions.&lt;&gt;c__DisplayClass1`1.&lt;IsEqualTo&gt;b__0()&#xD;
   at NFluent.Extensibility.Checker`2.ExecuteCheck(Action action, String negatedExceptionMessage)&#xD;
   at NFluent.ObjectCheckExtensions.IsEqualTo[T](ICheck`1 check, Object expected)&#xD;
   at NFluent.ObjectCheckExtensions.IsEqualTo[T](ICheck`1 check, T expected)&#xD;
   at AutomationLayer.MarkTestAs.Failing() in C:\Git\pickles\test-harness\AutomationLayer\MarkTestAs.cs:line 15&#xD;
   at AutomationLayer.AdditionSteps.GivenTheBackgroundStepFails() in C:\Git\pickles\test-harness\AutomationLayer\AdditionSteps.cs:line 25&#xD;
   at lambda_method(Closure , IContextManager )&#xD;
   at TechTalk.SpecFlow.Bindings.BindingInvoker.InvokeBinding(IBinding binding, IContextManager contextManager, Object[] arguments, ITestTracer testTracer, TimeSpan&amp; duration)&#xD;
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStepMatch(BindingMatch match, Object[] arguments)&#xD;
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep(StepInstance stepInstance)&#xD;
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()&#xD;
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()&#xD;
   at Pickles.TestHarness.MsTest.FailingBackgroundFeature.ScenarioCleanup()&#xD;
   at Pickles.TestHarness.MsTest.FailingBackgroundFeature.AddTwoNumbers() in C:\Git\pickles\test-harness\MsTest\FailingBackground.feature:line 12&#xD;
					</StackTrace>
				</ErrorInfo>
			</Output>
		</UnitTestResult>
		<UnitTestResult executionId="e4a13633-9ddf-4d32-a34a-2d71dc4415b7" testId="d2820219-bd97-2273-945a-4d371724085a" testName="NotAutomatedScenario1" computerName="DESKTOP" duration="00:00:00.0090944" startTime="2018-08-24T15:55:47.6350030+02:00" endTime="2018-08-24T15:55:47.6449747+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="NotExecuted" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e4a13633-9ddf-4d32-a34a-2d71dc4415b7">
			<Output>
				<StdOut>Given unimplemented step&#xD;
-&gt; No matching step definition found for the step. Use the following code to create one:&#xD;
        [Given(@"unimplemented step")]&#xD;
        public void GivenUnimplementedStep()&#xD;
        {&#xD;
            ScenarioContext.Current.Pending();&#xD;
        }&#xD;
&#xD;
Given unimplemented step&#xD;
-&gt; No matching step definition found for the step. Use the following code to create one:&#xD;
        [Given(@"unimplemented step")]&#xD;
        public void GivenUnimplementedStep()&#xD;
        {&#xD;
            ScenarioContext.Current.Pending();&#xD;
        }&#xD;
&#xD;
When unimplemented step&#xD;
-&gt; No matching step definition found for the step. Use the following code to create one:&#xD;
        [When(@"unimplemented step")]&#xD;
        public void WhenUnimplementedStep()&#xD;
        {&#xD;
            ScenarioContext.Current.Pending();&#xD;
        }&#xD;
&#xD;
Then unimplemented step&#xD;
-&gt; No matching step definition found for the step. Use the following code to create one:&#xD;
        [Then(@"unimplemented step")]&#xD;
        public void ThenUnimplementedStep()&#xD;
        {&#xD;
            ScenarioContext.Current.Pending();&#xD;
        }</StdOut>
				<ErrorInfo>
					<Message>Assert.Inconclusive failed. No matching step definition found for one or more steps.&#xD;
using System;&#xD;
using TechTalk.SpecFlow;&#xD;
&#xD;
namespace MyNamespace&#xD;
{&#xD;
    [Binding]&#xD;
    public class StepDefinitions&#xD;
    {&#xD;
        [Given(@"unimplemented step")]&#xD;
        public void GivenUnimplementedStep()&#xD;
        {&#xD;
            ScenarioContext.Current.Pending();&#xD;
        }&#xD;
        &#xD;
        [When(@"unimplemented step")]&#xD;
        public void WhenUnimplementedStep()&#xD;
        {&#xD;
            ScenarioContext.Current.Pending();&#xD;
        }&#xD;
        &#xD;
        [Then(@"unimplemented step")]&#xD;
        public void ThenUnimplementedStep()&#xD;
        {&#xD;
            ScenarioContext.Current.Pending();&#xD;
        }&#xD;
    }&#xD;
}&#xD;
					</Message>
					<StackTrace>   at lambda_method(Closure , String , Object[] )&#xD;
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestInconclusive(String message)&#xD;
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestPending(String message)&#xD;
   at TechTalk.SpecFlow.ErrorHandling.ErrorProvider.ThrowPendingError(TestStatus testStatus, String message)&#xD;
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()&#xD;
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()&#xD;
   at Pickles.TestHarness.MsTest.NotAutomatedAtAllFeature.ScenarioCleanup()&#xD;
   at Pickles.TestHarness.MsTest.NotAutomatedAtAllFeature.NotAutomatedScenario1() in C:\Git\pickles\test-harness\MsTest\NotAutomatedAtAll.feature:line 9&#xD;
					</StackTrace>
				</ErrorInfo>
			</Output>
		</UnitTestResult>
		<UnitTestResult executionId="25193dfc-04c7-4ff7-9fbc-641329d723b9" testId="21bcc183-2ce2-c7f7-4a75-61985a78b639" testName="AddingSeveralNumbers_40" computerName="DESKTOP" duration="00:00:00.0003886" startTime="2018-08-24T15:55:47.5472350+02:00" endTime="2018-08-24T15:55:47.5482326+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="25193dfc-04c7-4ff7-9fbc-641329d723b9">
			<Output>
				<StdOut>Given the calculator has clean memory&#xD;
-&gt; done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0.0s)&#xD;
Given I have entered 40 into the calculator&#xD;
-&gt; done: AdditionSteps.GivenIHaveEnteredIntoTheCalculator(40) (0.0s)&#xD;
And I have entered 50 into the calculator&#xD;
-&gt; done: AdditionSteps.GivenIHaveEnteredIntoTheCalculator(50) (0.0s)&#xD;
And I have entered 90 into the calculator&#xD;
-&gt; done: AdditionSteps.GivenIHaveEnteredIntoTheCalculator(90) (0.0s)&#xD;
When I press add&#xD;
-&gt; done: AdditionSteps.WhenIPressAdd() (0.0s)&#xD;
Then the result should be 180 on the screen&#xD;
-&gt; done: AdditionSteps.ThenTheResultShouldBeOnTheScreen(180) (0.0s)</StdOut>
			</Output>
		</UnitTestResult>
		<UnitTestResult executionId="d44ce89f-658f-4d89-b788-90dda0aedaed" testId="ece5cdce-c3f9-32d6-6d48-bb2f6fd1ba91" testName="DealCorrectlyWithParenthesisInTheExamples_ThisIsADescriptionAndMore" computerName="DESKTOP" duration="00:00:00.0018005" startTime="2018-08-24T15:55:47.7018229+02:00" endTime="2018-08-24T15:55:47.7038296+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d44ce89f-658f-4d89-b788-90dda0aedaed">
			<Output>
				<StdOut>When I have parenthesis in the value, for example an 'This is a description (and more)'&#xD;
-&gt; done: ScenarioOutlineSteps.WhenIHaveParenthesisInTheValueForExampleAnOverlyDescriptiveField("This is a descrip...") (0.0s)</StdOut>
			</Output>
		</UnitTestResult>
		<UnitTestResult executionId="67957a9a-2814-4b78-b06d-1f9741309a7e" testId="6d989d5b-184b-a816-faf4-3b3820efbc92" testName="DealWithDuplicateValues_Variant3" computerName="DESKTOP" duration="00:00:00.0002261" startTime="2018-08-24T15:55:47.7137905+02:00" endTime="2018-08-24T15:55:47.7147889+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="67957a9a-2814-4b78-b06d-1f9741309a7e">
			<Output>
				<StdOut>Then the scenario will 'pass'&#xD;
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("pass") (0.0s)</StdOut>
			</Output>
		</UnitTestResult>
		<UnitTestResult executionId="9ce15d15-2dd7-410d-86f7-6c41e5c55b1c" testId="56d99493-ce4f-1ba5-fd53-ff9bcd3d5adb" testName="DealWithDuplicateValues_Variant2" computerName="DESKTOP" duration="00:00:00.0026158" startTime="2018-08-24T15:55:47.7107987+02:00" endTime="2018-08-24T15:55:47.7137905+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="NotExecuted" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9ce15d15-2dd7-410d-86f7-6c41e5c55b1c">
			<Output>
				<StdOut>Then the scenario will 'inconclusive'&#xD;
-&gt; pending: ScenarioOutlineSteps.ThenTheScenarioWill("inconclusive")</StdOut>
				<ErrorInfo>
					<Message>Assert.Inconclusive failed. One or more step definitions are not implemented yet.&#xD;
  ScenarioOutlineSteps.ThenTheScenarioWill("inconclusive")</Message>
					<StackTrace>   at lambda_method(Closure , String , Object[] )&#xD;
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestInconclusive(String message)&#xD;
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestPending(String message)&#xD;
   at TechTalk.SpecFlow.ErrorHandling.ErrorProvider.ThrowPendingError(TestStatus testStatus, String message)&#xD;
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()&#xD;
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()&#xD;
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.ScenarioCleanup()&#xD;
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.DealWithDuplicateValues(String result, String[] exampleTags) in C:\Git\pickles\test-harness\MsTest\ScenarioOutlines.feature:line 90&#xD;
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.DealWithDuplicateValues_Variant2()&#xD;
					</StackTrace>
				</ErrorInfo>
			</Output>
		</UnitTestResult>
		<UnitTestResult executionId="cbcfb95b-f3ff-41e1-b341-02793c99a69b" testId="272cd0db-3670-5256-8896-fd6e5899a9e6" testName="PassingFeaturePassingScenario" computerName="DESKTOP" duration="00:00:00.0009864" startTime="2018-08-24T15:55:47.7726335+02:00" endTime="2018-08-24T15:55:47.7746299+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="cbcfb95b-f3ff-41e1-b341-02793c99a69b">
			<Output>
				<StdOut>Then passing step&#xD;
-&gt; done: MinimalSteps.ThenPassingStep() (0.0s)</StdOut>
			</Output>
		</UnitTestResult>
		<UnitTestResult executionId="5a94a155-3685-4947-9104-6bbcd5ad8e3c" testId="d4e92e37-b370-9951-cf08-d28c8be3df76" testName="ThisScenarioContainsExamplesWithRegex_SpecialCharacters_Variant5" computerName="DESKTOP" duration="00:00:00.0002944" startTime="2018-08-24T15:55:47.7546810+02:00" endTime="2018-08-24T15:55:47.7546810+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5a94a155-3685-4947-9104-6bbcd5ad8e3c">
			<Output>
				<StdOut>Given the calculator has clean memory&#xD;
-&gt; done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0.0s)&#xD;
When I have special characters for regexes in the value, for example a '()'&#xD;
-&gt; done: ScenarioOutlineSteps.WhenIHaveSpecialCharactersForRegexesInTheValueForExampleARegex("()") (0.0s)&#xD;
Then the scenario will 'PASS'&#xD;
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("PASS") (0.0s)</StdOut>
			</Output>
		</UnitTestResult>
		<UnitTestResult executionId="2c7c61c4-e1de-47b4-95d3-2a06d6b5eb48" testId="cb3103e4-325a-9704-ce55-19a4255a20ad" testName="DealWithMultipleNamedExampleSectionsWithDuplicateValues_FirstSet_Variant2" computerName="DESKTOP" duration="00:00:00.0003029" startTime="2018-08-24T15:55:47.7397217+02:00" endTime="2018-08-24T15:55:47.7397217+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2c7c61c4-e1de-47b4-95d3-2a06d6b5eb48">
			<Output>
				<StdOut>Then the scenario will 'pass'&#xD;
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("pass") (0.0s)</StdOut>
			</Output>
		</UnitTestResult>
		<UnitTestResult executionId="a7c20f4c-e791-46c5-80e7-4762905f6999" testId="cba8108c-d46f-3b56-65fe-7ea468397e20" testName="DealWithMultipleNamedExampleSectionsWithDuplicateValues_SecondSet_Variant3" computerName="DESKTOP" duration="00:00:00.0002129" startTime="2018-08-24T15:55:47.7477008+02:00" endTime="2018-08-24T15:55:47.7477008+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a7c20f4c-e791-46c5-80e7-4762905f6999">
			<Output>
				<StdOut>Then the scenario will 'pass'&#xD;
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("pass") (0.0s)</StdOut>
			</Output>
		</UnitTestResult>
		<UnitTestResult executionId="74cc9779-613e-4b5e-9d55-659f42905aba" testId="7ef69afa-3afb-8791-c4d2-657df7ba5408" testName="AddingSeveralNumbers_40" computerName="DESKTOP" duration="00:00:00.0015389" startTime="2018-08-24T15:55:47.6280215+02:00" endTime="2018-08-24T15:55:47.6300183+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="74cc9779-613e-4b5e-9d55-659f42905aba">
			<Output>
				<StdOut>Given the background step fails&#xD;
-&gt; error: 
The checked value is different from the expected one.
The checked value:
	[True]
The expected value:
	[False]&#xD;
And the calculator has clean memory&#xD;
-&gt; skipped because of previous errors&#xD;
Given I have entered 40 into the calculator&#xD;
-&gt; skipped because of previous errors&#xD;
And I have entered 50 into the calculator&#xD;
-&gt; skipped because of previous errors&#xD;
And I have entered 90 into the calculator&#xD;
-&gt; skipped because of previous errors&#xD;
When I press add&#xD;
-&gt; skipped because of previous errors&#xD;
Then the result should be 180 on the screen&#xD;
-&gt; skipped because of previous errors</StdOut>
				<ErrorInfo>
					<Message>Test method Pickles.TestHarness.MsTest.FailingBackgroundFeature.AddingSeveralNumbers_40 threw exception: &#xD;
NFluent.FluentCheckException: 
The checked value is different from the expected one.
The checked value:
	[True]
The expected value:
	[False]</Message>
					<StackTrace>    at NFluent.Helpers.EqualityHelper.IsEqualTo(Object instance, Object expected)&#xD;
   at NFluent.ObjectCheckExtensions.&lt;&gt;c__DisplayClass1`1.&lt;IsEqualTo&gt;b__0()&#xD;
   at NFluent.Extensibility.Checker`2.ExecuteCheck(Action action, String negatedExceptionMessage)&#xD;
   at NFluent.ObjectCheckExtensions.IsEqualTo[T](ICheck`1 check, Object expected)&#xD;
   at NFluent.ObjectCheckExtensions.IsEqualTo[T](ICheck`1 check, T expected)&#xD;
   at AutomationLayer.MarkTestAs.Failing() in C:\Git\pickles\test-harness\AutomationLayer\MarkTestAs.cs:line 15&#xD;
   at AutomationLayer.AdditionSteps.GivenTheBackgroundStepFails() in C:\Git\pickles\test-harness\AutomationLayer\AdditionSteps.cs:line 25&#xD;
   at lambda_method(Closure , IContextManager )&#xD;
   at TechTalk.SpecFlow.Bindings.BindingInvoker.InvokeBinding(IBinding binding, IContextManager contextManager, Object[] arguments, ITestTracer testTracer, TimeSpan&amp; duration)&#xD;
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStepMatch(BindingMatch match, Object[] arguments)&#xD;
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep(StepInstance stepInstance)&#xD;
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()&#xD;
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()&#xD;
   at Pickles.TestHarness.MsTest.FailingBackgroundFeature.ScenarioCleanup()&#xD;
   at Pickles.TestHarness.MsTest.FailingBackgroundFeature.AddingSeveralNumbers(String firstNumber, String secondNumber, String thirdNumber, String result, String[] exampleTags) in C:\Git\pickles\test-harness\MsTest\FailingBackground.feature:line 19&#xD;
   at Pickles.TestHarness.MsTest.FailingBackgroundFeature.AddingSeveralNumbers_40()&#xD;
					</StackTrace>
				</ErrorInfo>
			</Output>
		</UnitTestResult>
		<UnitTestResult executionId="62e474fc-3499-48db-a7ed-b50740740132" testId="ee64b0d5-906e-5159-a108-531362c596d1" testName="NotAutomatedScenario3" computerName="DESKTOP" duration="00:00:00.0157299" startTime="2018-08-24T15:55:47.6549480+02:00" endTime="2018-08-24T15:55:47.6709054+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="NotExecuted" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="62e474fc-3499-48db-a7ed-b50740740132">
			<Output>
				<StdOut>Given unimplemented step&#xD;
-&gt; No matching step definition found for the step. Use the following code to create one:&#xD;
        [Given(@"unimplemented step")]&#xD;
        public void GivenUnimplementedStep()&#xD;
        {&#xD;
            ScenarioContext.Current.Pending();&#xD;
        }&#xD;
&#xD;
Given unimplemented step&#xD;
-&gt; No matching step definition found for the step. Use the following code to create one:&#xD;
        [Given(@"unimplemented step")]&#xD;
        public void GivenUnimplementedStep()&#xD;
        {&#xD;
            ScenarioContext.Current.Pending();&#xD;
        }&#xD;
&#xD;
When unimplemented step&#xD;
-&gt; No matching step definition found for the step. Use the following code to create one:&#xD;
        [When(@"unimplemented step")]&#xD;
        public void WhenUnimplementedStep()&#xD;
        {&#xD;
            ScenarioContext.Current.Pending();&#xD;
        }&#xD;
&#xD;
Then unimplemented step&#xD;
-&gt; No matching step definition found for the step. Use the following code to create one:&#xD;
        [Then(@"unimplemented step")]&#xD;
        public void ThenUnimplementedStep()&#xD;
        {&#xD;
            ScenarioContext.Current.Pending();&#xD;
        }</StdOut>
				<ErrorInfo>
					<Message>Assert.Inconclusive failed. No matching step definition found for one or more steps.&#xD;
using System;&#xD;
using TechTalk.SpecFlow;&#xD;
&#xD;
namespace MyNamespace&#xD;
{&#xD;
    [Binding]&#xD;
    public class StepDefinitions&#xD;
    {&#xD;
        [Given(@"unimplemented step")]&#xD;
        public void GivenUnimplementedStep()&#xD;
        {&#xD;
            ScenarioContext.Current.Pending();&#xD;
        }&#xD;
        &#xD;
        [When(@"unimplemented step")]&#xD;
        public void WhenUnimplementedStep()&#xD;
        {&#xD;
            ScenarioContext.Current.Pending();&#xD;
        }&#xD;
        &#xD;
        [Then(@"unimplemented step")]&#xD;
        public void ThenUnimplementedStep()&#xD;
        {&#xD;
            ScenarioContext.Current.Pending();&#xD;
        }&#xD;
    }&#xD;
}&#xD;
					</Message>
					<StackTrace>   at lambda_method(Closure , String , Object[] )&#xD;
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestInconclusive(String message)&#xD;
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestPending(String message)&#xD;
   at TechTalk.SpecFlow.ErrorHandling.ErrorProvider.ThrowPendingError(TestStatus testStatus, String message)&#xD;
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()&#xD;
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()&#xD;
   at Pickles.TestHarness.MsTest.NotAutomatedAtAllFeature.ScenarioCleanup()&#xD;
   at Pickles.TestHarness.MsTest.NotAutomatedAtAllFeature.NotAutomatedScenario3() in C:\Git\pickles\test-harness\MsTest\NotAutomatedAtAll.feature:line 19&#xD;
					</StackTrace>
				</ErrorInfo>
			</Output>
		</UnitTestResult>
		<UnitTestResult executionId="a391fa32-0fe7-41ef-b83a-fc8bc99a9f71" testId="8c3089df-e8ec-4931-e07f-19784ba313d4" testName="NotAutomatedAddingTwoNumbers" computerName="DESKTOP" duration="00:00:00.0468156" startTime="2018-08-24T15:55:47.5672099+02:00" endTime="2018-08-24T15:55:47.6140605+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="NotExecuted" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a391fa32-0fe7-41ef-b83a-fc8bc99a9f71">
			<Output>
				<StdOut>Given the calculator has clean memory&#xD;
-&gt; done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0.0s)&#xD;
Given unimplemented step&#xD;
-&gt; No matching step definition found for the step. Use the following code to create one:&#xD;
        [Given(@"unimplemented step")]&#xD;
        public void GivenUnimplementedStep()&#xD;
        {&#xD;
            ScenarioContext.Current.Pending();&#xD;
        }&#xD;
&#xD;
When unimplemented step&#xD;
-&gt; No matching step definition found for the step. Use the following code to create one:&#xD;
        [When(@"unimplemented step")]&#xD;
        public void WhenUnimplementedStep()&#xD;
        {&#xD;
            ScenarioContext.Current.Pending();&#xD;
        }&#xD;
&#xD;
Then unimplemented step&#xD;
-&gt; No matching step definition found for the step. Use the following code to create one:&#xD;
        [Then(@"unimplemented step")]&#xD;
        public void ThenUnimplementedStep()&#xD;
        {&#xD;
            ScenarioContext.Current.Pending();&#xD;
        }</StdOut>
				<ErrorInfo>
					<Message>Assert.Inconclusive failed. No matching step definition found for one or more steps.&#xD;
using System;&#xD;
using TechTalk.SpecFlow;&#xD;
&#xD;
namespace MyNamespace&#xD;
{&#xD;
    [Binding]&#xD;
    public class StepDefinitions&#xD;
    {&#xD;
        [Given(@"unimplemented step")]&#xD;
        public void GivenUnimplementedStep()&#xD;
        {&#xD;
            ScenarioContext.Current.Pending();&#xD;
        }&#xD;
        &#xD;
        [When(@"unimplemented step")]&#xD;
        public void WhenUnimplementedStep()&#xD;
        {&#xD;
            ScenarioContext.Current.Pending();&#xD;
        }&#xD;
        &#xD;
        [Then(@"unimplemented step")]&#xD;
        public void ThenUnimplementedStep()&#xD;
        {&#xD;
            ScenarioContext.Current.Pending();&#xD;
        }&#xD;
    }&#xD;
}&#xD;
					</Message>
					<StackTrace>   at lambda_method(Closure , String , Object[] )&#xD;
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestInconclusive(String message)&#xD;
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestPending(String message)&#xD;
   at TechTalk.SpecFlow.ErrorHandling.ErrorProvider.ThrowPendingError(TestStatus testStatus, String message)&#xD;
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()&#xD;
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()&#xD;
   at Pickles.TestHarness.MsTest.AdditionFeature.ScenarioCleanup()&#xD;
   at Pickles.TestHarness.MsTest.AdditionFeature.NotAutomatedAddingTwoNumbers() in C:\Git\pickles\test-harness\MsTest\Addition.feature:line 46&#xD;
					</StackTrace>
				</ErrorInfo>
			</Output>
		</UnitTestResult>
		<UnitTestResult executionId="682856cd-b0ef-41af-a08b-5789eb8f2477" testId="0943a703-db7d-3781-87ab-a7405aa83a66" testName="ThisIsAScenarioOutlineWithAmpersand_Pass_1" computerName="DESKTOP" duration="00:00:00.0008311" startTime="2018-08-24T15:55:47.7576779+02:00" endTime="2018-08-24T15:55:47.7596777+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="682856cd-b0ef-41af-a08b-5789eb8f2477">
			<Output>
				<StdOut>Given the calculator has clean memory&#xD;
-&gt; done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0.0s)&#xD;
Then the scenario will 'pass_1'&#xD;
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("pass_1") (0.0s)</StdOut>
			</Output>
		</UnitTestResult>
		<UnitTestResult executionId="b014a59c-d2c0-4bf0-9293-579d5d399a40" testId="148fdc13-150c-f283-31f0-8c7fc289bb7c" testName="DealWithMultipleNamedExampleSectionsWithDuplicateValues_SecondSet_Variant1" computerName="DESKTOP" duration="00:00:00.0019063" startTime="2018-08-24T15:55:47.7437118+02:00" endTime="2018-08-24T15:55:47.7457052+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="NotExecuted" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b014a59c-d2c0-4bf0-9293-579d5d399a40">
			<Output>
				<StdOut>Then the scenario will 'inconclusive'&#xD;
-&gt; pending: ScenarioOutlineSteps.ThenTheScenarioWill("inconclusive")</StdOut>
				<ErrorInfo>
					<Message>Assert.Inconclusive failed. One or more step definitions are not implemented yet.&#xD;
  ScenarioOutlineSteps.ThenTheScenarioWill("inconclusive")</Message>
					<StackTrace>   at lambda_method(Closure , String , Object[] )&#xD;
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestInconclusive(String message)&#xD;
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestPending(String message)&#xD;
   at TechTalk.SpecFlow.ErrorHandling.ErrorProvider.ThrowPendingError(TestStatus testStatus, String message)&#xD;
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()&#xD;
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()&#xD;
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.ScenarioCleanup()&#xD;
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.DealWithMultipleNamedExampleSectionsWithDuplicateValues(String result, String[] exampleTags) in C:\Git\pickles\test-harness\MsTest\ScenarioOutlines.feature:line 129&#xD;
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.DealWithMultipleNamedExampleSectionsWithDuplicateValues_SecondSet_Variant1()&#xD;
					</StackTrace>
				</ErrorInfo>
			</Output>
		</UnitTestResult>
		<UnitTestResult executionId="ad23ef5b-ea86-4772-96fd-79de47b2538d" testId="53ebc13a-89fc-b58c-a6e0-dfd85e793e5f" testName="ThisIsAScenarioWithParenthesesHyphenAndComma10_2030_40" computerName="DESKTOP" duration="00:00:00.0010871" startTime="2018-08-24T15:55:47.7486975+02:00" endTime="2018-08-24T15:55:47.7506921+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ad23ef5b-ea86-4772-96fd-79de47b2538d">
			<Output>
				<StdOut>Given the calculator has clean memory&#xD;
-&gt; done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0.0s)&#xD;
Given I have entered 50 into the calculator&#xD;
-&gt; done: AdditionSteps.GivenIHaveEnteredIntoTheCalculator(50) (0.0s)&#xD;
And I have entered 70 into the calculator&#xD;
-&gt; done: AdditionSteps.GivenIHaveEnteredIntoTheCalculator(70) (0.0s)&#xD;
When I press add&#xD;
-&gt; done: AdditionSteps.WhenIPressAdd() (0.0s)&#xD;
Then the result should be 120 on the screen&#xD;
-&gt; done: AdditionSteps.ThenTheResultShouldBeOnTheScreen(120) (0.0s)</StdOut>
			</Output>
		</UnitTestResult>
		<UnitTestResult executionId="e008ce4d-665a-4f8e-95dd-aebd29d5fc8b" testId="66249adc-f801-3706-d96a-bb0915429b51" testName="DealWithMultipleExampleSectionsWithDuplicateValues_ExampleSet1_Variant2" computerName="DESKTOP" duration="00:00:00.0017600" startTime="2018-08-24T15:55:47.7287503+02:00" endTime="2018-08-24T15:55:47.7307454+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e008ce4d-665a-4f8e-95dd-aebd29d5fc8b">
			<Output>
				<StdOut>Then the scenario will 'fail'&#xD;
-&gt; error: 
The checked value is different from the expected one.
The checked value:
	[True]
The expected value:
	[False]</StdOut>
				<ErrorInfo>
					<Message>Test method Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.DealWithMultipleExampleSectionsWithDuplicateValues_ExampleSet1_Variant2 threw exception: &#xD;
NFluent.FluentCheckException: 
The checked value is different from the expected one.
The checked value:
	[True]
The expected value:
	[False]</Message>
					<StackTrace>    at NFluent.Helpers.EqualityHelper.IsEqualTo(Object instance, Object expected)&#xD;
   at NFluent.ObjectCheckExtensions.&lt;&gt;c__DisplayClass1`1.&lt;IsEqualTo&gt;b__0()&#xD;
   at NFluent.Extensibility.Checker`2.ExecuteCheck(Action action, String negatedExceptionMessage)&#xD;
   at NFluent.ObjectCheckExtensions.IsEqualTo[T](ICheck`1 check, Object expected)&#xD;
   at NFluent.ObjectCheckExtensions.IsEqualTo[T](ICheck`1 check, T expected)&#xD;
   at AutomationLayer.MarkTestAs.Failing() in C:\Git\pickles\test-harness\AutomationLayer\MarkTestAs.cs:line 15&#xD;
   at AutomationLayer.ScenarioOutlineSteps.ThenTheScenarioWill(String result) in C:\Git\pickles\test-harness\AutomationLayer\ScenarioOutlineSteps.cs:line 19&#xD;
   at lambda_method(Closure , IContextManager , String )&#xD;
   at TechTalk.SpecFlow.Bindings.BindingInvoker.InvokeBinding(IBinding binding, IContextManager contextManager, Object[] arguments, ITestTracer testTracer, TimeSpan&amp; duration)&#xD;
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStepMatch(BindingMatch match, Object[] arguments)&#xD;
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep(StepInstance stepInstance)&#xD;
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()&#xD;
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()&#xD;
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.ScenarioCleanup()&#xD;
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.DealWithMultipleExampleSectionsWithDuplicateValues(String result, String[] exampleTags) in C:\Git\pickles\test-harness\MsTest\ScenarioOutlines.feature:line 101&#xD;
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.DealWithMultipleExampleSectionsWithDuplicateValues_ExampleSet1_Variant2()&#xD;
					</StackTrace>
				</ErrorInfo>
			</Output>
		</UnitTestResult>
		<UnitTestResult executionId="355385b4-c8c3-4f36-b8bf-3ce72767507d" testId="83671065-aa96-4b23-83e8-5b7fb93bede0" testName="ThisIsAScenarioWithSpanishCharactersNaeiou" computerName="DESKTOP" duration="00:00:00.0003741" startTime="2018-08-24T15:55:47.7616626+02:00" endTime="2018-08-24T15:55:47.7626606+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="355385b4-c8c3-4f36-b8bf-3ce72767507d">
			<Output>
				<StdOut>Given the calculator has clean memory&#xD;
-&gt; done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0.0s)&#xD;
Then passing step&#xD;
-&gt; done: MinimalSteps.ThenPassingStep() (0.0s)</StdOut>
			</Output>
		</UnitTestResult>
		<UnitTestResult executionId="13e3f5c3-f92f-44ee-ad42-02311d13df5e" testId="635e5bc5-c3fe-72a8-367f-654037b1c1da" testName="AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet0_Pass_1" computerName="DESKTOP" duration="00:00:00.0005568" startTime="2018-08-24T15:55:47.6858660+02:00" endTime="2018-08-24T15:55:47.6868631+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="13e3f5c3-f92f-44ee-ad42-02311d13df5e">
			<Output>
				<StdOut>Then the scenario will 'pass_1'&#xD;
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("pass_1") (0.0s)</StdOut>
			</Output>
		</UnitTestResult>
		<UnitTestResult executionId="6d4debec-359b-47dd-bbc4-9be164311f2e" testId="5309a9c5-1ee0-31a6-55f5-b76209e03db3" testName="ThisIsAScenarioOutlineWhereOneScenarioFails_Fail_1" computerName="DESKTOP" duration="00:00:00.0017262" startTime="2018-08-24T15:55:47.6838709+02:00" endTime="2018-08-24T15:55:47.6858660+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6d4debec-359b-47dd-bbc4-9be164311f2e">
			<Output>
				<StdOut>Then the scenario will 'fail_1'&#xD;
-&gt; error: 
The checked value is different from the expected one.
The checked value:
	[True]
The expected value:
	[False]</StdOut>
				<ErrorInfo>
					<Message>Test method Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.ThisIsAScenarioOutlineWhereOneScenarioFails_Fail_1 threw exception: &#xD;
NFluent.FluentCheckException: 
The checked value is different from the expected one.
The checked value:
	[True]
The expected value:
	[False]</Message>
					<StackTrace>    at NFluent.Helpers.EqualityHelper.IsEqualTo(Object instance, Object expected)&#xD;
   at NFluent.ObjectCheckExtensions.&lt;&gt;c__DisplayClass1`1.&lt;IsEqualTo&gt;b__0()&#xD;
   at NFluent.Extensibility.Checker`2.ExecuteCheck(Action action, String negatedExceptionMessage)&#xD;
   at NFluent.ObjectCheckExtensions.IsEqualTo[T](ICheck`1 check, Object expected)&#xD;
   at NFluent.ObjectCheckExtensions.IsEqualTo[T](ICheck`1 check, T expected)&#xD;
   at AutomationLayer.MarkTestAs.Failing() in C:\Git\pickles\test-harness\AutomationLayer\MarkTestAs.cs:line 15&#xD;
   at AutomationLayer.ScenarioOutlineSteps.ThenTheScenarioWill(String result) in C:\Git\pickles\test-harness\AutomationLayer\ScenarioOutlineSteps.cs:line 19&#xD;
   at lambda_method(Closure , IContextManager , String )&#xD;
   at TechTalk.SpecFlow.Bindings.BindingInvoker.InvokeBinding(IBinding binding, IContextManager contextManager, Object[] arguments, ITestTracer testTracer, TimeSpan&amp; duration)&#xD;
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStepMatch(BindingMatch match, Object[] arguments)&#xD;
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep(StepInstance stepInstance)&#xD;
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()&#xD;
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()&#xD;
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.ScenarioCleanup()&#xD;
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.ThisIsAScenarioOutlineWhereOneScenarioFails(String result, String[] exampleTags) in C:\Git\pickles\test-harness\MsTest\ScenarioOutlines.feature:line 34&#xD;
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.ThisIsAScenarioOutlineWhereOneScenarioFails_Fail_1()&#xD;
					</StackTrace>
				</ErrorInfo>
			</Output>
		</UnitTestResult>
		<UnitTestResult executionId="1000920c-941f-44c3-a673-e5b762590076" testId="8ec08426-4901-6383-e565-646137b3299c" testName="InconclusiveFeatureInconclusiveScenario" computerName="DESKTOP" duration="00:00:00.0020578" startTime="2018-08-24T15:55:47.7706388+02:00" endTime="2018-08-24T15:55:47.7726335+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="NotExecuted" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1000920c-941f-44c3-a673-e5b762590076">
			<Output>
				<StdOut>Then inconclusive step&#xD;
-&gt; pending: MinimalSteps.ThenInconclusiveStep()</StdOut>
				<ErrorInfo>
					<Message>Assert.Inconclusive failed. One or more step definitions are not implemented yet.&#xD;
  MinimalSteps.ThenInconclusiveStep()</Message>
					<StackTrace>   at lambda_method(Closure , String , Object[] )&#xD;
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestInconclusive(String message)&#xD;
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestPending(String message)&#xD;
   at TechTalk.SpecFlow.ErrorHandling.ErrorProvider.ThrowPendingError(TestStatus testStatus, String message)&#xD;
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()&#xD;
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()&#xD;
   at Pickles.TestHarness.MsTest.MinimalFeatures.InconclusiveFeature.ScenarioCleanup()&#xD;
   at Pickles.TestHarness.MsTest.MinimalFeatures.InconclusiveFeature.InconclusiveFeatureInconclusiveScenario() in C:\Git\pickles\test-harness\MsTest\Minimal Features\Inconclusive.feature:line 7&#xD;
					</StackTrace>
				</ErrorInfo>
			</Output>
		</UnitTestResult>
		<UnitTestResult executionId="225a56e1-4f79-4530-82fa-bd10863225fb" testId="ed9be2e6-2632-9fc1-c693-fe530d107927" testName="AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet2_Fail_2" computerName="DESKTOP" duration="00:00:00.0023692" startTime="2018-08-24T15:55:47.6978336+02:00" endTime="2018-08-24T15:55:47.6998283+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="225a56e1-4f79-4530-82fa-bd10863225fb">
			<Output>
				<StdOut>Then the scenario will 'fail_2'&#xD;
-&gt; error: 
The checked value is different from the expected one.
The checked value:
	[True]
The expected value:
	[False]</StdOut>
				<ErrorInfo>
					<Message>Test method Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet2_Fail_2 threw exception: &#xD;
NFluent.FluentCheckException: 
The checked value is different from the expected one.
The checked value:
	[True]
The expected value:
	[False]</Message>
					<StackTrace>    at NFluent.Helpers.EqualityHelper.IsEqualTo(Object instance, Object expected)&#xD;
   at NFluent.ObjectCheckExtensions.&lt;&gt;c__DisplayClass1`1.&lt;IsEqualTo&gt;b__0()&#xD;
   at NFluent.Extensibility.Checker`2.ExecuteCheck(Action action, String negatedExceptionMessage)&#xD;
   at NFluent.ObjectCheckExtensions.IsEqualTo[T](ICheck`1 check, Object expected)&#xD;
   at NFluent.ObjectCheckExtensions.IsEqualTo[T](ICheck`1 check, T expected)&#xD;
   at AutomationLayer.MarkTestAs.Failing() in C:\Git\pickles\test-harness\AutomationLayer\MarkTestAs.cs:line 15&#xD;
   at AutomationLayer.ScenarioOutlineSteps.ThenTheScenarioWill(String result) in C:\Git\pickles\test-harness\AutomationLayer\ScenarioOutlineSteps.cs:line 19&#xD;
   at lambda_method(Closure , IContextManager , String )&#xD;
   at TechTalk.SpecFlow.Bindings.BindingInvoker.InvokeBinding(IBinding binding, IContextManager contextManager, Object[] arguments, ITestTracer testTracer, TimeSpan&amp; duration)&#xD;
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStepMatch(BindingMatch match, Object[] arguments)&#xD;
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep(StepInstance stepInstance)&#xD;
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()&#xD;
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()&#xD;
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.ScenarioCleanup()&#xD;
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.AndWeCanGoTotallyBonkersWithMultipleExampleSections_(String result, String[] exampleTags) in C:\Git\pickles\test-harness\MsTest\ScenarioOutlines.feature:line 45&#xD;
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet2_Fail_2()&#xD;
					</StackTrace>
				</ErrorInfo>
			</Output>
		</UnitTestResult>
		<UnitTestResult executionId="871fbb17-911d-4502-8091-84c280cb96ad" testId="f85c758e-c623-23ea-60d0-5cf3365fe6c7" testName="DealWithMultipleNamedExampleSectionsWithDuplicateValues_SecondSet_Variant2" computerName="DESKTOP" duration="00:00:00.0016081" startTime="2018-08-24T15:55:47.7457052+02:00" endTime="2018-08-24T15:55:47.7477008+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="871fbb17-911d-4502-8091-84c280cb96ad">
			<Output>
				<StdOut>Then the scenario will 'fail'&#xD;
-&gt; error: 
The checked value is different from the expected one.
The checked value:
	[True]
The expected value:
	[False]</StdOut>
				<ErrorInfo>
					<Message>Test method Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.DealWithMultipleNamedExampleSectionsWithDuplicateValues_SecondSet_Variant2 threw exception: &#xD;
NFluent.FluentCheckException: 
The checked value is different from the expected one.
The checked value:
	[True]
The expected value:
	[False]</Message>
					<StackTrace>    at NFluent.Helpers.EqualityHelper.IsEqualTo(Object instance, Object expected)&#xD;
   at NFluent.ObjectCheckExtensions.&lt;&gt;c__DisplayClass1`1.&lt;IsEqualTo&gt;b__0()&#xD;
   at NFluent.Extensibility.Checker`2.ExecuteCheck(Action action, String negatedExceptionMessage)&#xD;
   at NFluent.ObjectCheckExtensions.IsEqualTo[T](ICheck`1 check, Object expected)&#xD;
   at NFluent.ObjectCheckExtensions.IsEqualTo[T](ICheck`1 check, T expected)&#xD;
   at AutomationLayer.MarkTestAs.Failing() in C:\Git\pickles\test-harness\AutomationLayer\MarkTestAs.cs:line 15&#xD;
   at AutomationLayer.ScenarioOutlineSteps.ThenTheScenarioWill(String result) in C:\Git\pickles\test-harness\AutomationLayer\ScenarioOutlineSteps.cs:line 19&#xD;
   at lambda_method(Closure , IContextManager , String )&#xD;
   at TechTalk.SpecFlow.Bindings.BindingInvoker.InvokeBinding(IBinding binding, IContextManager contextManager, Object[] arguments, ITestTracer testTracer, TimeSpan&amp; duration)&#xD;
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStepMatch(BindingMatch match, Object[] arguments)&#xD;
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep(StepInstance stepInstance)&#xD;
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()&#xD;
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()&#xD;
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.ScenarioCleanup()&#xD;
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.DealWithMultipleNamedExampleSectionsWithDuplicateValues(String result, String[] exampleTags) in C:\Git\pickles\test-harness\MsTest\ScenarioOutlines.feature:line 129&#xD;
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.DealWithMultipleNamedExampleSectionsWithDuplicateValues_SecondSet_Variant2()&#xD;
					</StackTrace>
				</ErrorInfo>
			</Output>
		</UnitTestResult>
		<UnitTestResult executionId="9cecc997-6e2a-4dfc-9915-d2f62a6f97e1" testId="aa2a8cc1-e688-63c4-aaa8-48991a911b15" testName="DealWithMultipleNamedExampleSectionsWithoutDuplicateValues_SecondSet_Inconclusive" computerName="DESKTOP" duration="00:00:00.0019494" startTime="2018-08-24T15:55:47.7347365+02:00" endTime="2018-08-24T15:55:47.7367294+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="NotExecuted" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9cecc997-6e2a-4dfc-9915-d2f62a6f97e1">
			<Output>
				<StdOut>Then the scenario will 'inconclusive'&#xD;
-&gt; pending: ScenarioOutlineSteps.ThenTheScenarioWill("inconclusive")</StdOut>
				<ErrorInfo>
					<Message>Assert.Inconclusive failed. One or more step definitions are not implemented yet.&#xD;
  ScenarioOutlineSteps.ThenTheScenarioWill("inconclusive")</Message>
					<StackTrace>   at lambda_method(Closure , String , Object[] )&#xD;
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestInconclusive(String message)&#xD;
   at TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestPending(String message)&#xD;
   at TechTalk.SpecFlow.ErrorHandling.ErrorProvider.ThrowPendingError(TestStatus testStatus, String message)&#xD;
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()&#xD;
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()&#xD;
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.ScenarioCleanup()&#xD;
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.DealWithMultipleNamedExampleSectionsWithoutDuplicateValues(String result, String[] exampleTags) in C:\Git\pickles\test-harness\MsTest\ScenarioOutlines.feature:line 117&#xD;
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.DealWithMultipleNamedExampleSectionsWithoutDuplicateValues_SecondSet_Inconclusive()&#xD;
					</StackTrace>
				</ErrorInfo>
			</Output>
		</UnitTestResult>
		<UnitTestResult executionId="be19a94f-8ec9-4ec9-9657-499b08ced235" testId="aa38c998-4087-fdeb-c742-f6a940beef87" testName="ThisIsAScenarioOutlineWhereAllScenariosPass_Pass_2" computerName="DESKTOP" duration="00:00:00.0002112" startTime="2018-08-24T15:55:47.6768894+02:00" endTime="2018-08-24T15:55:47.6768894+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="be19a94f-8ec9-4ec9-9657-499b08ced235">
			<Output>
				<StdOut>Then the scenario will 'pass_2'&#xD;
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("pass_2") (0.0s)</StdOut>
			</Output>
		</UnitTestResult>
		<UnitTestResult executionId="cbcafa6f-8e6e-41ba-b95f-f529bab92418" testId="140c2ca4-3d30-406e-fdc9-be44c10a340a" testName="AddingSeveralNumbers_60" computerName="DESKTOP" duration="00:00:00.0657127" startTime="2018-08-24T15:55:47.3318120+02:00" endTime="2018-08-24T15:55:47.5372617+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="cbcafa6f-8e6e-41ba-b95f-f529bab92418">
			<Output>
				<StdOut>Given the calculator has clean memory&#xD;
-&gt; done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0.0s)&#xD;
Given I have entered 60 into the calculator&#xD;
-&gt; done: AdditionSteps.GivenIHaveEnteredIntoTheCalculator(60) (0.0s)&#xD;
And I have entered 70 into the calculator&#xD;
-&gt; done: AdditionSteps.GivenIHaveEnteredIntoTheCalculator(70) (0.0s)&#xD;
And I have entered 130 into the calculator&#xD;
-&gt; done: AdditionSteps.GivenIHaveEnteredIntoTheCalculator(130) (0.0s)&#xD;
When I press add&#xD;
-&gt; done: AdditionSteps.WhenIPressAdd() (0.0s)&#xD;
Then the result should be 260 on the screen&#xD;
-&gt; done: AdditionSteps.ThenTheResultShouldBeOnTheScreen(260) (0.0s)</StdOut>
			</Output>
		</UnitTestResult>
		<UnitTestResult executionId="967b4a38-1c96-4d1a-a1e9-a7e717cf2a8b" testId="e911cad1-80be-36f6-3c0c-eb83f516c0a2" testName="ThisIsAScenarioOutlineWhereOneScenarioFails_Pass_1" computerName="DESKTOP" duration="00:00:00.0005414" startTime="2018-08-24T15:55:47.6818762+02:00" endTime="2018-08-24T15:55:47.6828742+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="967b4a38-1c96-4d1a-a1e9-a7e717cf2a8b">
			<Output>
				<StdOut>Then the scenario will 'pass_1'&#xD;
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("pass_1") (0.0s)</StdOut>
			</Output>
		</UnitTestResult>
		<UnitTestResult executionId="0c70771c-955b-4d77-80fa-661dbde4269f" testId="88355876-2c25-e325-4b36-89d1e192e74a" testName="DealWithMultipleNamedExampleSectionsWithDuplicateValues_FirstSet_Variant0" computerName="DESKTOP" duration="00:00:00.0004070" startTime="2018-08-24T15:55:47.7367294+02:00" endTime="2018-08-24T15:55:47.7377270+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0c70771c-955b-4d77-80fa-661dbde4269f">
			<Output>
				<StdOut>Then the scenario will 'pass'&#xD;
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("pass") (0.0s)</StdOut>
			</Output>
		</UnitTestResult>
		<UnitTestResult executionId="578418bb-4639-4f3e-9ec9-f3f43ee75a9f" testId="52d27672-31de-19f1-70ce-05bf3e83b4d2" testName="ThisScenarioContainsExamplesWithRegex_SpecialCharacters_Variant3" computerName="DESKTOP" duration="00:00:00.0001911" startTime="2018-08-24T15:55:47.7536865+02:00" endTime="2018-08-24T15:55:47.7536865+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="578418bb-4639-4f3e-9ec9-f3f43ee75a9f">
			<Output>
				<StdOut>Given the calculator has clean memory&#xD;
-&gt; done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0.0s)&#xD;
When I have special characters for regexes in the value, for example a '[]'&#xD;
-&gt; done: ScenarioOutlineSteps.WhenIHaveSpecialCharactersForRegexesInTheValueForExampleARegex("[]") (0.0s)&#xD;
Then the scenario will 'PASS'&#xD;
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("PASS") (0.0s)</StdOut>
			</Output>
		</UnitTestResult>
		<UnitTestResult executionId="12a7709d-e78b-427b-aeae-f1899ece629e" testId="b0a09bca-247a-a5bc-25cf-8aa3774a2d40" testName="ThisScenarioContainsExamplesWithRegex_SpecialCharacters_Variant4" computerName="DESKTOP" duration="00:00:00.0001834" startTime="2018-08-24T15:55:47.7536865+02:00" endTime="2018-08-24T15:55:47.7536865+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="12a7709d-e78b-427b-aeae-f1899ece629e">
			<Output>
				<StdOut>Given the calculator has clean memory&#xD;
-&gt; done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0.0s)&#xD;
When I have special characters for regexes in the value, for example a '{}'&#xD;
-&gt; done: ScenarioOutlineSteps.WhenIHaveSpecialCharactersForRegexesInTheValueForExampleARegex("{}") (0.0s)&#xD;
Then the scenario will 'PASS'&#xD;
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("PASS") (0.0s)</StdOut>
			</Output>
		</UnitTestResult>
		<UnitTestResult executionId="dd025cb9-4f51-45a9-8d6d-02e12624e9a7" testId="eeac1cb9-e9d0-de27-eeb7-a74ca0b65a36" testName="ThisIsAScenarioOutlineWithGermanUmlautsAouBAOU_Pass_1" computerName="DESKTOP" duration="00:00:00.0017621" startTime="2018-08-24T15:55:47.7556833+02:00" endTime="2018-08-24T15:55:47.7576779+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="dd025cb9-4f51-45a9-8d6d-02e12624e9a7">
			<Output>
				<StdOut>Given the calculator has clean memory&#xD;
-&gt; done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0.0s)&#xD;
Then the scenario will 'pass_1'&#xD;
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("pass_1") (0.0s)</StdOut>
			</Output>
		</UnitTestResult>
		<UnitTestResult executionId="59e21cda-c479-4ebf-be1a-f6a0048661bd" testId="30ce66e2-b6e0-fc97-fdc8-ab70b9085759" testName="DealWithMultipleExampleSectionsWithDuplicateValues_ExampleSet0_Variant1" computerName="DESKTOP" duration="00:00:00.0022203" startTime="2018-08-24T15:55:47.7187778+02:00" endTime="2018-08-24T15:55:47.7207721+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="59e21cda-c479-4ebf-be1a-f6a0048661bd">
			<Output>
				<StdOut>Then the scenario will 'fail'&#xD;
-&gt; error: 
The checked value is different from the expected one.
The checked value:
	[True]
The expected value:
	[False]</StdOut>
				<ErrorInfo>
					<Message>Test method Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.DealWithMultipleExampleSectionsWithDuplicateValues_ExampleSet0_Variant1 threw exception: &#xD;
NFluent.FluentCheckException: 
The checked value is different from the expected one.
The checked value:
	[True]
The expected value:
	[False]</Message>
					<StackTrace>    at NFluent.Helpers.EqualityHelper.IsEqualTo(Object instance, Object expected)&#xD;
   at NFluent.ObjectCheckExtensions.&lt;&gt;c__DisplayClass1`1.&lt;IsEqualTo&gt;b__0()&#xD;
   at NFluent.Extensibility.Checker`2.ExecuteCheck(Action action, String negatedExceptionMessage)&#xD;
   at NFluent.ObjectCheckExtensions.IsEqualTo[T](ICheck`1 check, Object expected)&#xD;
   at NFluent.ObjectCheckExtensions.IsEqualTo[T](ICheck`1 check, T expected)&#xD;
   at AutomationLayer.MarkTestAs.Failing() in C:\Git\pickles\test-harness\AutomationLayer\MarkTestAs.cs:line 15&#xD;
   at AutomationLayer.ScenarioOutlineSteps.ThenTheScenarioWill(String result) in C:\Git\pickles\test-harness\AutomationLayer\ScenarioOutlineSteps.cs:line 19&#xD;
   at lambda_method(Closure , IContextManager , String )&#xD;
   at TechTalk.SpecFlow.Bindings.BindingInvoker.InvokeBinding(IBinding binding, IContextManager contextManager, Object[] arguments, ITestTracer testTracer, TimeSpan&amp; duration)&#xD;
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStepMatch(BindingMatch match, Object[] arguments)&#xD;
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep(StepInstance stepInstance)&#xD;
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()&#xD;
   at TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()&#xD;
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.ScenarioCleanup()&#xD;
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.DealWithMultipleExampleSectionsWithDuplicateValues(String result, String[] exampleTags) in C:\Git\pickles\test-harness\MsTest\ScenarioOutlines.feature:line 101&#xD;
   at Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.DealWithMultipleExampleSectionsWithDuplicateValues_ExampleSet0_Variant1()&#xD;
					</StackTrace>
				</ErrorInfo>
			</Output>
		</UnitTestResult>
	</Results>
	<TestDefinitions>
		<UnitTest name="ThisIsAScenarioWithSpanishCharactersNaeiou" storage="C:\Git\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="83671065-aa96-4b23-83e8-5b7fb93bede0">
			<Execution id="355385b4-c8c3-4f36-b8bf-3ce72767507d" />
			<TestMethod codeBase="C:\Git\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="executor://mstestadapter/v1" className="Pickles.TestHarness.MsTest.ScenariosWithSpecialCharactersFeature" name="ThisIsAScenarioWithSpanishCharactersNaeiou" />
		</UnitTest>
		<UnitTest name="ThisIsAScenarioOutlineWhereAllScenariosPass_Pass_3" storage="C:\Git\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="90a44ab4-342d-ed3c-860e-39c8152c2fad">
			<Execution id="fc48a06b-7cce-4d97-9798-117c2cbf89f4" />
			<TestMethod codeBase="C:\Git\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="executor://mstestadapter/v1" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature" name="ThisIsAScenarioOutlineWhereAllScenariosPass_Pass_3" />
		</UnitTest>
		<UnitTest name="AddingSeveralNumbers_60" storage="C:\Git\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="140c2ca4-3d30-406e-fdc9-be44c10a340a">
			<TestCategory>
				<TestCategoryItem TestCategory="tag2" />
			</TestCategory>
			<Execution id="cbcafa6f-8e6e-41ba-b95f-f529bab92418" />
			<TestMethod codeBase="C:\Git\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="executor://mstestadapter/v1" className="Pickles.TestHarness.MsTest.AdditionFeature" name="AddingSeveralNumbers_60" />
		</UnitTest>
		<UnitTest name="DealCorrectlyWithParenthesisInTheExamples_ThisIsADescriptionAndMore" storage="C:\Git\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="ece5cdce-c3f9-32d6-6d48-bb2f6fd1ba91">
			<Execution id="d44ce89f-658f-4d89-b788-90dda0aedaed" />
			<TestMethod codeBase="C:\Git\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="executor://mstestadapter/v1" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature" name="DealCorrectlyWithParenthesisInTheExamples_ThisIsADescriptionAndMore" />
		</UnitTest>
		<UnitTest name="ThisIsAScenarioOutlineWhereOneScenarioFails_Pass_1" storage="C:\Git\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="e911cad1-80be-36f6-3c0c-eb83f516c0a2">
			<Execution id="967b4a38-1c96-4d1a-a1e9-a7e717cf2a8b" />
			<TestMethod codeBase="C:\Git\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="executor://mstestadapter/v1" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature" name="ThisIsAScenarioOutlineWhereOneScenarioFails_Pass_1" />
		</UnitTest>
		<UnitTest name="DealWithMultipleNamedExampleSectionsWithoutDuplicateValues_SecondSet_Inconclusive" storage="C:\Git\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="aa2a8cc1-e688-63c4-aaa8-48991a911b15">
			<Execution id="9cecc997-6e2a-4dfc-9915-d2f62a6f97e1" />
			<TestMethod codeBase="C:\Git\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="executor://mstestadapter/v1" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature" name="DealWithMultipleNamedExampleSectionsWithoutDuplicateValues_SecondSet_Inconclusive" />
		</UnitTest>
		<UnitTest name="FailToAddTwoNumbers" storage="C:\Git\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="0df655e6-c4cf-164c-b17f-7f9f92c19045">
			<TestCategory>
				<TestCategoryItem TestCategory="tag1" />
			</TestCategory>
			<Execution id="e7a308dc-efd0-4aad-b326-736418c522b3" />
			<TestMethod codeBase="C:\Git\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="executor://mstestadapter/v1" className="Pickles.TestHarness.MsTest.AdditionFeature" name="FailToAddTwoNumbers" />
		</UnitTest>
		<UnitTest name="DealWithMultipleExampleSectionsWithDuplicateValues_ExampleSet0_Variant0" storage="C:\Git\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="522385c4-21c5-f000-d373-cd3fcbd0a206">
			<Execution id="b54c18a7-5a28-4d86-aef5-642b7d6bb2a7" />
			<TestMethod codeBase="C:\Git\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="executor://mstestadapter/v1" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature" name="DealWithMultipleExampleSectionsWithDuplicateValues_ExampleSet0_Variant0" />
		</UnitTest>
		<UnitTest name="DealWithDuplicateValues_Variant2" storage="C:\Git\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="56d99493-ce4f-1ba5-fd53-ff9bcd3d5adb">
			<Execution id="9ce15d15-2dd7-410d-86f7-6c41e5c55b1c" />
			<TestMethod codeBase="C:\Git\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="executor://mstestadapter/v1" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature" name="DealWithDuplicateValues_Variant2" />
		</UnitTest>
		<UnitTest name="PassingFeaturePassingScenario" storage="C:\Git\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="272cd0db-3670-5256-8896-fd6e5899a9e6">
			<Execution id="cbcfb95b-f3ff-41e1-b341-02793c99a69b" />
			<TestMethod codeBase="C:\Git\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="executor://mstestadapter/v1" className="Pickles.TestHarness.MsTest.MinimalFeatures.PassingFeature" name="PassingFeaturePassingScenario" />
		</UnitTest>
		<UnitTest name="DealWithMultipleExampleSectionsWithDuplicateValues_ExampleSet0_Variant1" storage="C:\Git\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="30ce66e2-b6e0-fc97-fdc8-ab70b9085759">
			<Execution id="59e21cda-c479-4ebf-be1a-f6a0048661bd" />
			<TestMethod codeBase="C:\Git\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="executor://mstestadapter/v1" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature" name="DealWithMultipleExampleSectionsWithDuplicateValues_ExampleSet0_Variant1" />
		</UnitTest>
		<UnitTest name="TestMethod" storage="C:\Git\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="9fb96cdc-a81e-252c-1a41-7ecd9a592065">
			<Execution id="10d74c9c-0af4-45f5-9d33-a9d11029531a" />
			<TestMethod codeBase="C:\Git\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="executor://mstestadapter/v1" className="Pickles.TestHarness.MsTest.OrdinaryUnitTest" name="TestMethod" />
		</UnitTest>
		<UnitTest name="ThisScenarioContainsExamplesWithRegex_SpecialCharacters_Variant0" storage="C:\Git\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="860fe6a8-8ab8-da24-9ff4-8fc156cff05f">
			<Execution id="9d794357-2e96-41e8-a8de-ea8c0827d917" />
			<TestMethod codeBase="C:\Git\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="executor://mstestadapter/v1" className="Pickles.TestHarness.MsTest.ScenariosWithSpecialCharactersFeature" name="ThisScenarioContainsExamplesWithRegex_SpecialCharacters_Variant0" />
		</UnitTest>
		<UnitTest name="DealWithMultipleExampleSectionsWithDuplicateValues_ExampleSet1_Variant2" storage="C:\Git\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="66249adc-f801-3706-d96a-bb0915429b51">
			<Execution id="e008ce4d-665a-4f8e-95dd-aebd29d5fc8b" />
			<TestMethod codeBase="C:\Git\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="executor://mstestadapter/v1" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature" name="DealWithMultipleExampleSectionsWithDuplicateValues_ExampleSet1_Variant2" />
		</UnitTest>
		<UnitTest name="ThisIsAScenarioOutlineWhereAllScenariosPass_Pass_1" storage="C:\Git\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="f9a64263-f40d-f64d-0a5b-22b6db10eb26">
			<Execution id="90842bdc-cb67-4f84-9433-e6e9550f5d4b" />
			<TestMethod codeBase="C:\Git\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="executor://mstestadapter/v1" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature" name="ThisIsAScenarioOutlineWhereAllScenariosPass_Pass_1" />
		</UnitTest>
		<UnitTest name="NotAutomatedScenario2" storage="C:\Git\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="8bc041bd-d809-7992-ff2a-09b84d713da5">
			<Execution id="c3d1b665-efea-42de-be0c-d1f3504bbf9f" />
			<TestMethod codeBase="C:\Git\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="executor://mstestadapter/v1" className="Pickles.TestHarness.MsTest.NotAutomatedAtAllFeature" name="NotAutomatedScenario2" />
		</UnitTest>
		<UnitTest name="DealWithMultipleNamedExampleSectionsWithDuplicateValues_SecondSet_Variant1" storage="C:\Git\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="148fdc13-150c-f283-31f0-8c7fc289bb7c">
			<Execution id="b014a59c-d2c0-4bf0-9293-579d5d399a40" />
			<TestMethod codeBase="C:\Git\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="executor://mstestadapter/v1" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature" name="DealWithMultipleNamedExampleSectionsWithDuplicateValues_SecondSet_Variant1" />
		</UnitTest>
		<UnitTest name="ThisScenarioContainsExamplesWithRegex_SpecialCharacters_Variant6" storage="C:\Git\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="bd874ade-5d64-8f62-b83e-d52cd3e9a75c">
			<Execution id="a40dd773-0a13-4510-a394-6f16a5fe0df2" />
			<TestMethod codeBase="C:\Git\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="executor://mstestadapter/v1" className="Pickles.TestHarness.MsTest.ScenariosWithSpecialCharactersFeature" name="ThisScenarioContainsExamplesWithRegex_SpecialCharacters_Variant6" />
		</UnitTest>
		<UnitTest name="DealWithMultipleExampleSectionsWithDuplicateValues_ExampleSet0_Variant2" storage="C:\Git\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="0943972d-b8e7-5cf6-5903-3ab366248fb3">
			<Execution id="6d32e8ec-7229-4b81-a868-afef5b413b00" />
			<TestMethod codeBase="C:\Git\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="executor://mstestadapter/v1" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature" name="DealWithMultipleExampleSectionsWithDuplicateValues_ExampleSet0_Variant2" />
		</UnitTest>
		<UnitTest name="ThisIsAScenarioOutlineWhereOneScenarioFails_Fail_1" storage="C:\Git\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="5309a9c5-1ee0-31a6-55f5-b76209e03db3">
			<Execution id="6d4debec-359b-47dd-bbc4-9be164311f2e" />
			<TestMethod codeBase="C:\Git\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="executor://mstestadapter/v1" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature" name="ThisIsAScenarioOutlineWhereOneScenarioFails_Fail_1" />
		</UnitTest>
		<UnitTest name="FailingFeatureInconclusiveScenario" storage="C:\Git\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="68c045a3-263d-f215-70d9-bc46476ac556">
			<Execution id="b3067290-e057-4b0a-8ba2-0fea31ff3820" />
			<TestMethod codeBase="C:\Git\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="executor://mstestadapter/v1" className="Pickles.TestHarness.MsTest.MinimalFeatures.FailingFeature" name="FailingFeatureInconclusiveScenario" />
		</UnitTest>
		<UnitTest name="DealWithMultipleNamedExampleSectionsWithDuplicateValues_FirstSet_Variant1" storage="C:\Git\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="704f3991-3746-c4a7-d868-c680e23c1099">
			<Execution id="891b441b-ab1f-43d0-b86a-15faea0b8ab2" />
			<TestMethod codeBase="C:\Git\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="executor://mstestadapter/v1" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature" name="DealWithMultipleNamedExampleSectionsWithDuplicateValues_FirstSet_Variant1" />
		</UnitTest>
		<UnitTest name="DealWithMultipleNamedExampleSectionsWithoutDuplicateValues_FirstSet_Fail" storage="C:\Git\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="63ed1f0c-116c-1b91-305f-b10622ab77ce">
			<Execution id="f778cd7d-aa0c-4268-a194-025fa919966d" />
			<TestMethod codeBase="C:\Git\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="executor://mstestadapter/v1" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature" name="DealWithMultipleNamedExampleSectionsWithoutDuplicateValues_FirstSet_Fail" />
		</UnitTest>
		<UnitTest name="DealCorrectlyWithBackslashesInTheExamples_CTemp" storage="C:\Git\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="b2578459-aaca-c2fd-c57f-0405fafa6c43">
			<Execution id="623a289b-d32d-4012-b0a1-8e6dfe77f588" />
			<TestMethod codeBase="C:\Git\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="executor://mstestadapter/v1" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature" name="DealCorrectlyWithBackslashesInTheExamples_CTemp" />
		</UnitTest>
		<UnitTest name="InconclusiveFeaturePassingScenario" storage="C:\Git\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="4c1b1763-64a2-d451-5dd8-c0cd8cebb9f3">
			<Execution id="bd4bc900-1a0c-4eb4-98c2-ab4c3d7b993e" />
			<TestMethod codeBase="C:\Git\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="executor://mstestadapter/v1" className="Pickles.TestHarness.MsTest.MinimalFeatures.InconclusiveFeature" name="InconclusiveFeaturePassingScenario" />
		</UnitTest>
		<UnitTest name="AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet0_Pass_1" storage="C:\Git\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="635e5bc5-c3fe-72a8-367f-654037b1c1da">
			<Execution id="13e3f5c3-f92f-44ee-ad42-02311d13df5e" />
			<TestMethod codeBase="C:\Git\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="executor://mstestadapter/v1" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature" name="AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet0_Pass_1" />
		</UnitTest>
		<UnitTest name="DealWithMultipleNamedExampleSectionsWithDuplicateValues_SecondSet_Variant0" storage="C:\Git\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="bac4170c-1a63-a86c-98ab-970a14d6058b">
			<Execution id="f21bd6cf-0b40-4c93-8aea-507be391eba5" />
			<TestMethod codeBase="C:\Git\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="executor://mstestadapter/v1" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature" name="DealWithMultipleNamedExampleSectionsWithDuplicateValues_SecondSet_Variant0" />
		</UnitTest>
		<UnitTest name="ThisIsAScenarioOutlineWhereOneScenarioIsInconclusive_Inconclusive_1" storage="C:\Git\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="b4fa0e1c-5a4e-dabb-6fb2-000597c04404">
			<Execution id="9341d985-d5d8-4e6e-8e34-a13410b7f00d" />
			<TestMethod codeBase="C:\Git\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="executor://mstestadapter/v1" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature" name="ThisIsAScenarioOutlineWhereOneScenarioIsInconclusive_Inconclusive_1" />
		</UnitTest>
		<UnitTest name="ThisIsAScenarioWithDanishCharactersAEoaAEOA" storage="C:\Git\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="fe3a2fd1-be1c-0a5c-b0fd-93bfa634a24c">
			<Execution id="d04520ff-cf95-4bca-8115-2b781e12e9e9" />
			<TestMethod codeBase="C:\Git\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="executor://mstestadapter/v1" className="Pickles.TestHarness.MsTest.ScenariosWithSpecialCharactersFeature" name="ThisIsAScenarioWithDanishCharactersAEoaAEOA" />
		</UnitTest>
		<UnitTest name="DealWithMultipleExampleSectionsWithDuplicateValues_ExampleSet1_Variant0" storage="C:\Git\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="e9e8007f-b4e7-de1f-b091-ae2a70c6c359">
			<Execution id="f5afbaa6-6422-47e2-bd4e-093e30ee2300" />
			<TestMethod codeBase="C:\Git\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="executor://mstestadapter/v1" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature" name="DealWithMultipleExampleSectionsWithDuplicateValues_ExampleSet1_Variant0" />
		</UnitTest>
		<UnitTest name="DealWithMultipleNamedExampleSectionsWithDuplicateValues_SecondSet_Variant3" storage="C:\Git\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="cba8108c-d46f-3b56-65fe-7ea468397e20">
			<Execution id="a7c20f4c-e791-46c5-80e7-4762905f6999" />
			<TestMethod codeBase="C:\Git\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="executor://mstestadapter/v1" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature" name="DealWithMultipleNamedExampleSectionsWithDuplicateValues_SecondSet_Variant3" />
		</UnitTest>
		<UnitTest name="DealWithDuplicateValues_Variant1" storage="C:\Git\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="86c6835b-f515-3465-6b34-ed7f8a77fd53">
			<Execution id="908fdcbb-2250-4b60-924a-a6c09c71ad84" />
			<TestMethod codeBase="C:\Git\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="executor://mstestadapter/v1" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature" name="DealWithDuplicateValues_Variant1" />
		</UnitTest>
		<UnitTest name="ThisIsAScenarioOutlineWithGermanUmlautsAouBAOU_Pass_1" storage="C:\Git\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="eeac1cb9-e9d0-de27-eeb7-a74ca0b65a36">
			<Execution id="dd025cb9-4f51-45a9-8d6d-02e12624e9a7" />
			<TestMethod codeBase="C:\Git\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="executor://mstestadapter/v1" className="Pickles.TestHarness.MsTest.ScenariosWithSpecialCharactersFeature" name="ThisIsAScenarioOutlineWithGermanUmlautsAouBAOU_Pass_1" />
		</UnitTest>
		<UnitTest name="NotAutomatedScenario1" storage="C:\Git\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="d2820219-bd97-2273-945a-4d371724085a">
			<Execution id="e4a13633-9ddf-4d32-a34a-2d71dc4415b7" />
			<TestMethod codeBase="C:\Git\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="executor://mstestadapter/v1" className="Pickles.TestHarness.MsTest.NotAutomatedAtAllFeature" name="NotAutomatedScenario1" />
		</UnitTest>
		<UnitTest name="ThisIsAScenarioWithParenthesesHyphenAndComma10_2030_40" storage="C:\Git\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="53ebc13a-89fc-b58c-a6e0-dfd85e793e5f">
			<Execution id="ad23ef5b-ea86-4772-96fd-79de47b2538d" />
			<TestMethod codeBase="C:\Git\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="executor://mstestadapter/v1" className="Pickles.TestHarness.MsTest.ScenariosWithSpecialCharactersFeature" name="ThisIsAScenarioWithParenthesesHyphenAndComma10_2030_40" />
		</UnitTest>
		<UnitTest name="AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet0_Pass_2" storage="C:\Git\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="99ae1964-4272-f64b-08c7-beaae8bff30c">
			<Execution id="d2f2edbb-23d3-47b9-a184-2e1ffb523300" />
			<TestMethod codeBase="C:\Git\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="executor://mstestadapter/v1" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature" name="AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet0_Pass_2" />
		</UnitTest>
		<UnitTest name="DealWithMultipleExampleSectionsWithDuplicateValues_ExampleSet1_Variant1" storage="C:\Git\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="e74302e2-7ff3-8284-1c9e-66602f8f2cc3">
			<Execution id="15df8c0e-92b1-4768-bf94-b51eef985141" />
			<TestMethod codeBase="C:\Git\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="executor://mstestadapter/v1" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature" name="DealWithMultipleExampleSectionsWithDuplicateValues_ExampleSet1_Variant1" />
		</UnitTest>
		<UnitTest name="AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet1_Inconclusive_1" storage="C:\Git\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="6aa57053-5392-ab46-85c8-7e37adaaee43">
			<Execution id="426a5f1e-1e28-4c6b-a27d-88773a27f17b" />
			<TestMethod codeBase="C:\Git\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="executor://mstestadapter/v1" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature" name="AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet1_Inconclusive_1" />
		</UnitTest>
		<UnitTest name="DealWithDuplicateValues_Variant4" storage="C:\Git\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="023be1fc-43f7-a6ca-ba7e-e49bc730031f">
			<Execution id="df770803-4bfd-408b-a8b0-7222ff50afb4" />
			<TestMethod codeBase="C:\Git\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="executor://mstestadapter/v1" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature" name="DealWithDuplicateValues_Variant4" />
		</UnitTest>
		<UnitTest name="ThisIsAScenarioOutlineWhereOneScenarioIsInconclusive_Pass_1" storage="C:\Git\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="7e46cf81-dd4a-3fd0-4759-df967f754d0d">
			<Execution id="270417ab-9d58-4f2a-b34f-3be0c0d7f34f" />
			<TestMethod codeBase="C:\Git\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="executor://mstestadapter/v1" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature" name="ThisIsAScenarioOutlineWhereOneScenarioIsInconclusive_Pass_1" />
		</UnitTest>
		<UnitTest name="AddingSeveralNumbers_40" storage="C:\Git\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="7ef69afa-3afb-8791-c4d2-657df7ba5408">
			<Execution id="74cc9779-613e-4b5e-9d55-659f42905aba" />
			<TestMethod codeBase="C:\Git\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="executor://mstestadapter/v1" className="Pickles.TestHarness.MsTest.FailingBackgroundFeature" name="AddingSeveralNumbers_40" />
		</UnitTest>
		<UnitTest name="FailingFeatureFailingScenario" storage="C:\Git\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="27968872-ecbf-8ec7-3a98-d1be98533db7">
			<Execution id="286da3f9-1758-4b31-9ce1-26edc6d5249a" />
			<TestMethod codeBase="C:\Git\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="executor://mstestadapter/v1" className="Pickles.TestHarness.MsTest.MinimalFeatures.FailingFeature" name="FailingFeatureFailingScenario" />
		</UnitTest>
		<UnitTest name="ThisScenarioContainsExamplesWithRegex_SpecialCharacters_Variant4" storage="C:\Git\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="b0a09bca-247a-a5bc-25cf-8aa3774a2d40">
			<Execution id="12a7709d-e78b-427b-aeae-f1899ece629e" />
			<TestMethod codeBase="C:\Git\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="executor://mstestadapter/v1" className="Pickles.TestHarness.MsTest.ScenariosWithSpecialCharactersFeature" name="ThisScenarioContainsExamplesWithRegex_SpecialCharacters_Variant4" />
		</UnitTest>
		<UnitTest name="AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet2_Fail_1" storage="C:\Git\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="d6dd768f-20fc-ed4a-8542-86bee0adde9e">
			<Execution id="79c03a4c-24b7-49a5-8eda-08e28e4be38c" />
			<TestMethod codeBase="C:\Git\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="executor://mstestadapter/v1" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature" name="AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet2_Fail_1" />
		</UnitTest>
		<UnitTest name="ThisIsAScenarioOutlineWithParenthesesHyphenAndComma10_2030_40_Pass_1" storage="C:\Git\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="efcbe7cc-31a8-2063-2ba3-daddc29b814d">
			<Execution id="59065cca-abcb-4d5f-b1d0-1c4677e27042" />
			<TestMethod codeBase="C:\Git\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="executor://mstestadapter/v1" className="Pickles.TestHarness.MsTest.ScenariosWithSpecialCharactersFeature" name="ThisIsAScenarioOutlineWithParenthesesHyphenAndComma10_2030_40_Pass_1" />
		</UnitTest>
		<UnitTest name="AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet2_Fail_2" storage="C:\Git\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="ed9be2e6-2632-9fc1-c693-fe530d107927">
			<Execution id="225a56e1-4f79-4530-82fa-bd10863225fb" />
			<TestMethod codeBase="C:\Git\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="executor://mstestadapter/v1" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature" name="AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet2_Fail_2" />
		</UnitTest>
		<UnitTest name="DealWithMultipleNamedExampleSectionsWithoutDuplicateValues_FirstSet_Pass" storage="C:\Git\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="0a26fb5c-e736-30e7-7253-b17d330352c1">
			<Execution id="281067a9-8e93-4d92-8ec2-79edb88e3a27" />
			<TestMethod codeBase="C:\Git\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="executor://mstestadapter/v1" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature" name="DealWithMultipleNamedExampleSectionsWithoutDuplicateValues_FirstSet_Pass" />
		</UnitTest>
		<UnitTest name="AddingSeveralNumbers_40" storage="C:\Git\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="21bcc183-2ce2-c7f7-4a75-61985a78b639">
			<TestCategory>
				<TestCategoryItem TestCategory="tag2" />
			</TestCategory>
			<Execution id="25193dfc-04c7-4ff7-9fbc-641329d723b9" />
			<TestMethod codeBase="C:\Git\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="executor://mstestadapter/v1" className="Pickles.TestHarness.MsTest.AdditionFeature" name="AddingSeveralNumbers_40" />
		</UnitTest>
		<UnitTest name="ThisIsAScenarioOutlineWhereOneScenarioIsInconclusive_Pass_2" storage="C:\Git\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="a83adabc-7eb9-5e21-a7bc-6907dc0d83ea">
			<Execution id="ff1576ab-c58d-4614-a35a-eae0f28804d9" />
			<TestMethod codeBase="C:\Git\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="executor://mstestadapter/v1" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature" name="ThisIsAScenarioOutlineWhereOneScenarioIsInconclusive_Pass_2" />
		</UnitTest>
		<UnitTest name="ThisIsAScenarioOutlineWhereOneScenarioFails_Pass_2" storage="C:\Git\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="f3327e4b-92ea-d5bf-ceff-5062ff9febf5">
			<Execution id="49ea4a85-988b-4b51-9642-76d773abcd00" />
			<TestMethod codeBase="C:\Git\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="executor://mstestadapter/v1" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature" name="ThisIsAScenarioOutlineWhereOneScenarioFails_Pass_2" />
		</UnitTest>
		<UnitTest name="FailingFeaturePassingScenario" storage="C:\Git\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="b08cd0c6-1fb7-422e-7264-d77da39fe00d">
			<Execution id="83b3eee7-7b60-4306-831a-495f1324b81c" />
			<TestMethod codeBase="C:\Git\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="executor://mstestadapter/v1" className="Pickles.TestHarness.MsTest.MinimalFeatures.FailingFeature" name="FailingFeaturePassingScenario" />
		</UnitTest>
		<UnitTest name="NotAutomatedScenario3" storage="C:\Git\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="ee64b0d5-906e-5159-a108-531362c596d1">
			<Execution id="62e474fc-3499-48db-a7ed-b50740740132" />
			<TestMethod codeBase="C:\Git\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="executor://mstestadapter/v1" className="Pickles.TestHarness.MsTest.NotAutomatedAtAllFeature" name="NotAutomatedScenario3" />
		</UnitTest>
		<UnitTest name="NotAutomatedAddingTwoNumbers" storage="C:\Git\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="8c3089df-e8ec-4931-e07f-19784ba313d4">
			<Execution id="a391fa32-0fe7-41ef-b83a-fc8bc99a9f71" />
			<TestMethod codeBase="C:\Git\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="executor://mstestadapter/v1" className="Pickles.TestHarness.MsTest.AdditionFeature" name="NotAutomatedAddingTwoNumbers" />
		</UnitTest>
		<UnitTest name="ThisScenarioContainsExamplesWithRegex_SpecialCharacters_Variant3" storage="C:\Git\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="52d27672-31de-19f1-70ce-05bf3e83b4d2">
			<Execution id="578418bb-4639-4f3e-9ec9-f3f43ee75a9f" />
			<TestMethod codeBase="C:\Git\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="executor://mstestadapter/v1" className="Pickles.TestHarness.MsTest.ScenariosWithSpecialCharactersFeature" name="ThisScenarioContainsExamplesWithRegex_SpecialCharacters_Variant3" />
		</UnitTest>
		<UnitTest name="DealWithDuplicateValues_Variant0" storage="C:\Git\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="37e0f7ae-16bd-415a-3a74-c8c26c6e56f1">
			<Execution id="904b11dc-4cc5-4456-9c03-8c051628d198" />
			<TestMethod codeBase="C:\Git\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="executor://mstestadapter/v1" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature" name="DealWithDuplicateValues_Variant0" />
		</UnitTest>
		<UnitTest name="InconclusiveFeatureInconclusiveScenario" storage="C:\Git\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="8ec08426-4901-6383-e565-646137b3299c">
			<Execution id="1000920c-941f-44c3-a673-e5b762590076" />
			<TestMethod codeBase="C:\Git\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="executor://mstestadapter/v1" className="Pickles.TestHarness.MsTest.MinimalFeatures.InconclusiveFeature" name="InconclusiveFeatureInconclusiveScenario" />
		</UnitTest>
		<UnitTest name="DealWithMultipleNamedExampleSectionsWithDuplicateValues_SecondSet_Variant2" storage="C:\Git\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="f85c758e-c623-23ea-60d0-5cf3365fe6c7">
			<Execution id="871fbb17-911d-4502-8091-84c280cb96ad" />
			<TestMethod codeBase="C:\Git\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="executor://mstestadapter/v1" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature" name="DealWithMultipleNamedExampleSectionsWithDuplicateValues_SecondSet_Variant2" />
		</UnitTest>
		<UnitTest name="ThisScenarioContainsExamplesWithRegex_SpecialCharacters_Variant5" storage="C:\Git\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="d4e92e37-b370-9951-cf08-d28c8be3df76">
			<Execution id="5a94a155-3685-4947-9104-6bbcd5ad8e3c" />
			<TestMethod codeBase="C:\Git\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="executor://mstestadapter/v1" className="Pickles.TestHarness.MsTest.ScenariosWithSpecialCharactersFeature" name="ThisScenarioContainsExamplesWithRegex_SpecialCharacters_Variant5" />
		</UnitTest>
		<UnitTest name="IgnoredAddingTwoNumbers" storage="C:\Git\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="113ed7a2-61bc-45d6-3ad1-61ddbea77238">
			<Execution id="58884e2f-aeab-466e-b90c-d794736d8509" />
			<TestMethod codeBase="C:\Git\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="executor://mstestadapter/v1" className="Pickles.TestHarness.MsTest.AdditionFeature" name="IgnoredAddingTwoNumbers" />
		</UnitTest>
		<UnitTest name="DealWithMultipleNamedExampleSectionsWithDuplicateValues_FirstSet_Variant2" storage="C:\Git\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="cb3103e4-325a-9704-ce55-19a4255a20ad">
			<Execution id="2c7c61c4-e1de-47b4-95d3-2a06d6b5eb48" />
			<TestMethod codeBase="C:\Git\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="executor://mstestadapter/v1" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature" name="DealWithMultipleNamedExampleSectionsWithDuplicateValues_FirstSet_Variant2" />
		</UnitTest>
		<UnitTest name="ThisScenarioContainsExamplesWithRegex_SpecialCharacters_Variant2" storage="C:\Git\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="46f974ed-841e-26dd-a181-971cc88d892b">
			<Execution id="45b5ef97-b86e-4906-876c-b5a7b5d136ea" />
			<TestMethod codeBase="C:\Git\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="executor://mstestadapter/v1" className="Pickles.TestHarness.MsTest.ScenariosWithSpecialCharactersFeature" name="ThisScenarioContainsExamplesWithRegex_SpecialCharacters_Variant2" />
		</UnitTest>
		<UnitTest name="DealWithMultipleNamedExampleSectionsWithDuplicateValues_FirstSet_Variant0" storage="C:\Git\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="88355876-2c25-e325-4b36-89d1e192e74a">
			<Execution id="0c70771c-955b-4d77-80fa-661dbde4269f" />
			<TestMethod codeBase="C:\Git\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="executor://mstestadapter/v1" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature" name="DealWithMultipleNamedExampleSectionsWithDuplicateValues_FirstSet_Variant0" />
		</UnitTest>
		<UnitTest name="ThisIsAScenarioOutlineWhereAllScenariosPass_Pass_2" storage="C:\Git\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="aa38c998-4087-fdeb-c742-f6a940beef87">
			<Execution id="be19a94f-8ec9-4ec9-9657-499b08ced235" />
			<TestMethod codeBase="C:\Git\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="executor://mstestadapter/v1" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature" name="ThisIsAScenarioOutlineWhereAllScenariosPass_Pass_2" />
		</UnitTest>
		<UnitTest name="DealCorrectlyWithOverlongExampleValues_PleaseEnterAValidTwoLetterCountryCodeE_G_DE" storage="C:\Git\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="9404b577-698b-61ca-64fc-88ff799201bd">
			<Execution id="85343b94-e938-4f10-9c1b-59c5ceee26a2" />
			<TestMethod codeBase="C:\Git\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="executor://mstestadapter/v1" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature" name="DealCorrectlyWithOverlongExampleValues_PleaseEnterAValidTwoLetterCountryCodeE_G_DE" />
		</UnitTest>
		<UnitTest name="DealWithMultipleExampleSectionsWithDuplicateValues_ExampleSet1_Variant3" storage="C:\Git\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="263e5dc5-0d1b-01a3-8bd8-b8fe2d17245d">
			<Execution id="e965a662-af26-4b40-9f21-d04175674e35" />
			<TestMethod codeBase="C:\Git\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="executor://mstestadapter/v1" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature" name="DealWithMultipleExampleSectionsWithDuplicateValues_ExampleSet1_Variant3" />
		</UnitTest>
		<UnitTest name="DealWithDuplicateValues_Variant3" storage="C:\Git\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="6d989d5b-184b-a816-faf4-3b3820efbc92">
			<Execution id="67957a9a-2814-4b78-b06d-1f9741309a7e" />
			<TestMethod codeBase="C:\Git\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="executor://mstestadapter/v1" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature" name="DealWithDuplicateValues_Variant3" />
		</UnitTest>
		<UnitTest name="AddingSeveralNumbers_60" storage="C:\Git\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="bea8799b-89a4-d983-d6a9-57924ee5618e">
			<Execution id="348bc741-afb6-4263-a78b-0aa1d712bd4d" />
			<TestMethod codeBase="C:\Git\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="executor://mstestadapter/v1" className="Pickles.TestHarness.MsTest.FailingBackgroundFeature" name="AddingSeveralNumbers_60" />
		</UnitTest>
		<UnitTest name="ThisIsAScenarioOutlineWithAmpersand_Pass_1" storage="C:\Git\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="0943a703-db7d-3781-87ab-a7405aa83a66">
			<Execution id="682856cd-b0ef-41af-a08b-5789eb8f2477" />
			<TestMethod codeBase="C:\Git\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="executor://mstestadapter/v1" className="Pickles.TestHarness.MsTest.ScenariosWithSpecialCharactersFeature" name="ThisIsAScenarioOutlineWithAmpersand_Pass_1" />
		</UnitTest>
		<UnitTest name="ThisScenarioContainsExamplesWithRegex_SpecialCharacters_Variant1" storage="C:\Git\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="a900fecb-3728-fcea-67f2-b24d9d94cd5e">
			<Execution id="b8bbfbf9-0ddb-408b-bf22-f720df567805" />
			<TestMethod codeBase="C:\Git\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="executor://mstestadapter/v1" className="Pickles.TestHarness.MsTest.ScenariosWithSpecialCharactersFeature" name="ThisScenarioContainsExamplesWithRegex_SpecialCharacters_Variant1" />
		</UnitTest>
		<UnitTest name="AddTwoNumbers" storage="C:\Git\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="8b1ea73f-6162-3e0e-0c6c-d3a9edc3a6d1">
			<TestCategory>
				<TestCategoryItem TestCategory="tag1" />
			</TestCategory>
			<Execution id="8f0489bc-31c4-4af2-adea-2e868fa5a168" />
			<TestMethod codeBase="C:\Git\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="executor://mstestadapter/v1" className="Pickles.TestHarness.MsTest.AdditionFeature" name="AddTwoNumbers" />
		</UnitTest>
		<UnitTest name="AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet1_Inconclusive_2" storage="C:\Git\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="e8c43f8a-7359-f15b-4250-8ed752528b1b">
			<Execution id="9354de18-e3f6-47b8-9fb1-00bb54b00f16" />
			<TestMethod codeBase="C:\Git\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="executor://mstestadapter/v1" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature" name="AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet1_Inconclusive_2" />
		</UnitTest>
		<UnitTest name="AddTwoNumbers" storage="C:\Git\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="cd06647c-3ccf-9545-fdb0-c96daaba2ca8">
			<Execution id="66bd0269-855c-465a-9793-f969102204fb" />
			<TestMethod codeBase="C:\Git\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="executor://mstestadapter/v1" className="Pickles.TestHarness.MsTest.FailingBackgroundFeature" name="AddTwoNumbers" />
		</UnitTest>
	</TestDefinitions>
	<TestEntries>
		<TestEntry testId="90a44ab4-342d-ed3c-860e-39c8152c2fad" executionId="fc48a06b-7cce-4d97-9798-117c2cbf89f4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
		<TestEntry testId="37e0f7ae-16bd-415a-3a74-c8c26c6e56f1" executionId="904b11dc-4cc5-4456-9c03-8c051628d198" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
		<TestEntry testId="bd874ade-5d64-8f62-b83e-d52cd3e9a75c" executionId="a40dd773-0a13-4510-a394-6f16a5fe0df2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
		<TestEntry testId="a83adabc-7eb9-5e21-a7bc-6907dc0d83ea" executionId="ff1576ab-c58d-4614-a35a-eae0f28804d9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
		<TestEntry testId="bea8799b-89a4-d983-d6a9-57924ee5618e" executionId="348bc741-afb6-4263-a78b-0aa1d712bd4d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
		<TestEntry testId="113ed7a2-61bc-45d6-3ad1-61ddbea77238" executionId="58884e2f-aeab-466e-b90c-d794736d8509" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
		<TestEntry testId="8b1ea73f-6162-3e0e-0c6c-d3a9edc3a6d1" executionId="8f0489bc-31c4-4af2-adea-2e868fa5a168" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
		<TestEntry testId="4c1b1763-64a2-d451-5dd8-c0cd8cebb9f3" executionId="bd4bc900-1a0c-4eb4-98c2-ab4c3d7b993e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
		<TestEntry testId="7e46cf81-dd4a-3fd0-4759-df967f754d0d" executionId="270417ab-9d58-4f2a-b34f-3be0c0d7f34f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
		<TestEntry testId="63ed1f0c-116c-1b91-305f-b10622ab77ce" executionId="f778cd7d-aa0c-4268-a194-025fa919966d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
		<TestEntry testId="e9e8007f-b4e7-de1f-b091-ae2a70c6c359" executionId="f5afbaa6-6422-47e2-bd4e-093e30ee2300" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
		<TestEntry testId="efcbe7cc-31a8-2063-2ba3-daddc29b814d" executionId="59065cca-abcb-4d5f-b1d0-1c4677e27042" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
		<TestEntry testId="e74302e2-7ff3-8284-1c9e-66602f8f2cc3" executionId="15df8c0e-92b1-4768-bf94-b51eef985141" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
		<TestEntry testId="f3327e4b-92ea-d5bf-ceff-5062ff9febf5" executionId="49ea4a85-988b-4b51-9642-76d773abcd00" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
		<TestEntry testId="0943972d-b8e7-5cf6-5903-3ab366248fb3" executionId="6d32e8ec-7229-4b81-a868-afef5b413b00" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
		<TestEntry testId="263e5dc5-0d1b-01a3-8bd8-b8fe2d17245d" executionId="e965a662-af26-4b40-9f21-d04175674e35" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
		<TestEntry testId="27968872-ecbf-8ec7-3a98-d1be98533db7" executionId="286da3f9-1758-4b31-9ce1-26edc6d5249a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
		<TestEntry testId="86c6835b-f515-3465-6b34-ed7f8a77fd53" executionId="908fdcbb-2250-4b60-924a-a6c09c71ad84" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
		<TestEntry testId="023be1fc-43f7-a6ca-ba7e-e49bc730031f" executionId="df770803-4bfd-408b-a8b0-7222ff50afb4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
		<TestEntry testId="d6dd768f-20fc-ed4a-8542-86bee0adde9e" executionId="79c03a4c-24b7-49a5-8eda-08e28e4be38c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
		<TestEntry testId="6aa57053-5392-ab46-85c8-7e37adaaee43" executionId="426a5f1e-1e28-4c6b-a27d-88773a27f17b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
		<TestEntry testId="fe3a2fd1-be1c-0a5c-b0fd-93bfa634a24c" executionId="d04520ff-cf95-4bca-8115-2b781e12e9e9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
		<TestEntry testId="0a26fb5c-e736-30e7-7253-b17d330352c1" executionId="281067a9-8e93-4d92-8ec2-79edb88e3a27" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
		<TestEntry testId="46f974ed-841e-26dd-a181-971cc88d892b" executionId="45b5ef97-b86e-4906-876c-b5a7b5d136ea" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
		<TestEntry testId="bac4170c-1a63-a86c-98ab-970a14d6058b" executionId="f21bd6cf-0b40-4c93-8aea-507be391eba5" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
		<TestEntry testId="b4fa0e1c-5a4e-dabb-6fb2-000597c04404" executionId="9341d985-d5d8-4e6e-8e34-a13410b7f00d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
		<TestEntry testId="9fb96cdc-a81e-252c-1a41-7ecd9a592065" executionId="10d74c9c-0af4-45f5-9d33-a9d11029531a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
		<TestEntry testId="860fe6a8-8ab8-da24-9ff4-8fc156cff05f" executionId="9d794357-2e96-41e8-a8de-ea8c0827d917" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
		<TestEntry testId="8bc041bd-d809-7992-ff2a-09b84d713da5" executionId="c3d1b665-efea-42de-be0c-d1f3504bbf9f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
		<TestEntry testId="b2578459-aaca-c2fd-c57f-0405fafa6c43" executionId="623a289b-d32d-4012-b0a1-8e6dfe77f588" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
		<TestEntry testId="704f3991-3746-c4a7-d868-c680e23c1099" executionId="891b441b-ab1f-43d0-b86a-15faea0b8ab2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
		<TestEntry testId="68c045a3-263d-f215-70d9-bc46476ac556" executionId="b3067290-e057-4b0a-8ba2-0fea31ff3820" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
		<TestEntry testId="e8c43f8a-7359-f15b-4250-8ed752528b1b" executionId="9354de18-e3f6-47b8-9fb1-00bb54b00f16" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
		<TestEntry testId="f9a64263-f40d-f64d-0a5b-22b6db10eb26" executionId="90842bdc-cb67-4f84-9433-e6e9550f5d4b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
		<TestEntry testId="522385c4-21c5-f000-d373-cd3fcbd0a206" executionId="b54c18a7-5a28-4d86-aef5-642b7d6bb2a7" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
		<TestEntry testId="9404b577-698b-61ca-64fc-88ff799201bd" executionId="85343b94-e938-4f10-9c1b-59c5ceee26a2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
		<TestEntry testId="b08cd0c6-1fb7-422e-7264-d77da39fe00d" executionId="83b3eee7-7b60-4306-831a-495f1324b81c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
		<TestEntry testId="a900fecb-3728-fcea-67f2-b24d9d94cd5e" executionId="b8bbfbf9-0ddb-408b-bf22-f720df567805" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
		<TestEntry testId="0df655e6-c4cf-164c-b17f-7f9f92c19045" executionId="e7a308dc-efd0-4aad-b326-736418c522b3" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
		<TestEntry testId="99ae1964-4272-f64b-08c7-beaae8bff30c" executionId="d2f2edbb-23d3-47b9-a184-2e1ffb523300" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
		<TestEntry testId="cd06647c-3ccf-9545-fdb0-c96daaba2ca8" executionId="66bd0269-855c-465a-9793-f969102204fb" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
		<TestEntry testId="d2820219-bd97-2273-945a-4d371724085a" executionId="e4a13633-9ddf-4d32-a34a-2d71dc4415b7" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
		<TestEntry testId="21bcc183-2ce2-c7f7-4a75-61985a78b639" executionId="25193dfc-04c7-4ff7-9fbc-641329d723b9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
		<TestEntry testId="ece5cdce-c3f9-32d6-6d48-bb2f6fd1ba91" executionId="d44ce89f-658f-4d89-b788-90dda0aedaed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
		<TestEntry testId="6d989d5b-184b-a816-faf4-3b3820efbc92" executionId="67957a9a-2814-4b78-b06d-1f9741309a7e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
		<TestEntry testId="56d99493-ce4f-1ba5-fd53-ff9bcd3d5adb" executionId="9ce15d15-2dd7-410d-86f7-6c41e5c55b1c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
		<TestEntry testId="272cd0db-3670-5256-8896-fd6e5899a9e6" executionId="cbcfb95b-f3ff-41e1-b341-02793c99a69b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
		<TestEntry testId="d4e92e37-b370-9951-cf08-d28c8be3df76" executionId="5a94a155-3685-4947-9104-6bbcd5ad8e3c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
		<TestEntry testId="cb3103e4-325a-9704-ce55-19a4255a20ad" executionId="2c7c61c4-e1de-47b4-95d3-2a06d6b5eb48" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
		<TestEntry testId="cba8108c-d46f-3b56-65fe-7ea468397e20" executionId="a7c20f4c-e791-46c5-80e7-4762905f6999" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
		<TestEntry testId="7ef69afa-3afb-8791-c4d2-657df7ba5408" executionId="74cc9779-613e-4b5e-9d55-659f42905aba" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
		<TestEntry testId="ee64b0d5-906e-5159-a108-531362c596d1" executionId="62e474fc-3499-48db-a7ed-b50740740132" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
		<TestEntry testId="8c3089df-e8ec-4931-e07f-19784ba313d4" executionId="a391fa32-0fe7-41ef-b83a-fc8bc99a9f71" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
		<TestEntry testId="0943a703-db7d-3781-87ab-a7405aa83a66" executionId="682856cd-b0ef-41af-a08b-5789eb8f2477" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
		<TestEntry testId="148fdc13-150c-f283-31f0-8c7fc289bb7c" executionId="b014a59c-d2c0-4bf0-9293-579d5d399a40" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
		<TestEntry testId="53ebc13a-89fc-b58c-a6e0-dfd85e793e5f" executionId="ad23ef5b-ea86-4772-96fd-79de47b2538d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
		<TestEntry testId="66249adc-f801-3706-d96a-bb0915429b51" executionId="e008ce4d-665a-4f8e-95dd-aebd29d5fc8b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
		<TestEntry testId="83671065-aa96-4b23-83e8-5b7fb93bede0" executionId="355385b4-c8c3-4f36-b8bf-3ce72767507d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
		<TestEntry testId="635e5bc5-c3fe-72a8-367f-654037b1c1da" executionId="13e3f5c3-f92f-44ee-ad42-02311d13df5e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
		<TestEntry testId="5309a9c5-1ee0-31a6-55f5-b76209e03db3" executionId="6d4debec-359b-47dd-bbc4-9be164311f2e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
		<TestEntry testId="8ec08426-4901-6383-e565-646137b3299c" executionId="1000920c-941f-44c3-a673-e5b762590076" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
		<TestEntry testId="ed9be2e6-2632-9fc1-c693-fe530d107927" executionId="225a56e1-4f79-4530-82fa-bd10863225fb" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
		<TestEntry testId="f85c758e-c623-23ea-60d0-5cf3365fe6c7" executionId="871fbb17-911d-4502-8091-84c280cb96ad" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
		<TestEntry testId="aa2a8cc1-e688-63c4-aaa8-48991a911b15" executionId="9cecc997-6e2a-4dfc-9915-d2f62a6f97e1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
		<TestEntry testId="aa38c998-4087-fdeb-c742-f6a940beef87" executionId="be19a94f-8ec9-4ec9-9657-499b08ced235" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
		<TestEntry testId="140c2ca4-3d30-406e-fdc9-be44c10a340a" executionId="cbcafa6f-8e6e-41ba-b95f-f529bab92418" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
		<TestEntry testId="e911cad1-80be-36f6-3c0c-eb83f516c0a2" executionId="967b4a38-1c96-4d1a-a1e9-a7e717cf2a8b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
		<TestEntry testId="88355876-2c25-e325-4b36-89d1e192e74a" executionId="0c70771c-955b-4d77-80fa-661dbde4269f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
		<TestEntry testId="52d27672-31de-19f1-70ce-05bf3e83b4d2" executionId="578418bb-4639-4f3e-9ec9-f3f43ee75a9f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
		<TestEntry testId="b0a09bca-247a-a5bc-25cf-8aa3774a2d40" executionId="12a7709d-e78b-427b-aeae-f1899ece629e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
		<TestEntry testId="eeac1cb9-e9d0-de27-eeb7-a74ca0b65a36" executionId="dd025cb9-4f51-45a9-8d6d-02e12624e9a7" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
		<TestEntry testId="30ce66e2-b6e0-fc97-fdc8-ab70b9085759" executionId="59e21cda-c479-4ebf-be1a-f6a0048661bd" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
	</TestEntries>
	<TestLists>
		<TestList name="Results Not in a List" id="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
		<TestList name="All Loaded Results" id="19431567-8539-422a-85d7-44ee4e166bda" />
	</TestLists>
	<ResultSummary outcome="Failed">
		<Counters total="72" executed="58" passed="41" failed="17" error="0" timeout="0" aborted="0" inconclusive="0" passedButRunAborted="0" notRunnable="0" notExecuted="0" disconnected="0" warning="0" completed="0" inProgress="0" pending="0" />
		<Output>
			<StdOut>Test 'IgnoredAddingTwoNumbers' was skipped in the test run.Test 'NotAutomatedAddingTwoNumbers' was skipped in the test run.Test 'NotAutomatedScenario1' was skipped in the test run.Test 'NotAutomatedScenario2' was skipped in the test run.Test 'NotAutomatedScenario3' was skipped in the test run.Test 'ThisIsAScenarioOutlineWhereOneScenarioIsInconclusive_Inconclusive_1' was skipped in the test run.Test 'AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet1_Inconclusive_1' was skipped in the test run.Test 'AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet1_Inconclusive_2' was skipped in the test run.Test 'DealWithDuplicateValues_Variant2' was skipped in the test run.Test 'DealWithMultipleExampleSectionsWithDuplicateValues_ExampleSet1_Variant1' was skipped in the test run.Test 'DealWithMultipleNamedExampleSectionsWithoutDuplicateValues_SecondSet_Inconclusive' was skipped in the test run.Test 'DealWithMultipleNamedExampleSectionsWithDuplicateValues_SecondSet_Variant1' was skipped in the test run.Test 'FailingFeatureInconclusiveScenario' was skipped in the test run.Test 'InconclusiveFeatureInconclusiveScenario' was skipped in the test run.</StdOut>
		</Output>
	</ResultSummary>
</TestRun>