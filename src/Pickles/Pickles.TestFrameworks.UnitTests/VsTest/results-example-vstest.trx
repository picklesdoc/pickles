<?xml version="1.0" encoding="UTF-8"?>
<TestRun id="b949f52e-0720-4e25-9101-635c69b4b5b2" name="pju@DT000326 2017-08-08 12:20:01" runUser="BRFKREDIT\pju" xmlns="http://microsoft.com/schemas/VisualStudio/TeamTest/2010">
  <Times creation="2017-08-08T12:20:01.7877531+02:00" queuing="2017-08-08T12:20:01.7877531+02:00" start="2017-08-08T12:20:01.4913493+02:00" finish="2017-08-08T12:20:01.9593553+02:00" />
  <TestSettings name="default" id="909f5698-c10b-46d4-9e84-6c21ff974bfa">
    <Execution>
      <TestTypeSpecific />
    </Execution>
    <Deployment runDeploymentRoot="pju_DT000326 2017-08-08 12_20_01" />
    <Properties />
  </TestSettings>
  <Results>
    <UnitTestResult executionId="29eee0b9-1134-4df4-bd2c-6685d6295298" testId="140c2ca4-3d30-406e-fdc9-be44c10a340a" testName="AddingSeveralNumbers_60" computerName="DT000326" duration="00:00:00.0606258" startTime="2017-08-08T12:20:01.4913493+02:00" endTime="2017-08-08T12:20:01.6629515+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="29eee0b9-1134-4df4-bd2c-6685d6295298">
      <Output>
        <StdOut>Given the calculator has clean memory
-&gt; done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0,0s)
Given I have entered 60 into the calculator
-&gt; done: AdditionSteps.GivenIHaveEnteredIntoTheCalculator(60) (0,0s)
And I have entered 70 into the calculator
-&gt; done: AdditionSteps.GivenIHaveEnteredIntoTheCalculator(70) (0,0s)
And I have entered 130 into the calculator
-&gt; done: AdditionSteps.GivenIHaveEnteredIntoTheCalculator(130) (0,0s)
When I press add
-&gt; done: AdditionSteps.WhenIPressAdd() (0,0s)
Then the result should be 260 on the screen
-&gt; done: AdditionSteps.ThenTheResultShouldBeOnTheScreen(260) (0,0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="465feb0a-9700-42cd-99d8-9ea88d1e0f95" testId="21bcc183-2ce2-c7f7-4a75-61985a78b639" testName="AddingSeveralNumbers_40" computerName="DT000326" duration="00:00:00.0004094" startTime="2017-08-08T12:20:01.6785517+02:00" endTime="2017-08-08T12:20:01.6785517+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="465feb0a-9700-42cd-99d8-9ea88d1e0f95">
      <Output>
        <StdOut>Given the calculator has clean memory
-&gt; done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0,0s)
Given I have entered 40 into the calculator
-&gt; done: AdditionSteps.GivenIHaveEnteredIntoTheCalculator(40) (0,0s)
And I have entered 50 into the calculator
-&gt; done: AdditionSteps.GivenIHaveEnteredIntoTheCalculator(50) (0,0s)
And I have entered 90 into the calculator
-&gt; done: AdditionSteps.GivenIHaveEnteredIntoTheCalculator(90) (0,0s)
When I press add
-&gt; done: AdditionSteps.WhenIPressAdd() (0,0s)
Then the result should be 180 on the screen
-&gt; done: AdditionSteps.ThenTheResultShouldBeOnTheScreen(180) (0,0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="bea5acdb-7a8e-4267-bd23-398ed391be11" testId="8b1ea73f-6162-3e0e-0c6c-d3a9edc3a6d1" testName="AddTwoNumbers" computerName="DT000326" duration="00:00:00.0004079" startTime="2017-08-08T12:20:01.6785517+02:00" endTime="2017-08-08T12:20:01.6785517+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="bea5acdb-7a8e-4267-bd23-398ed391be11">
      <Output>
        <StdOut>Given the calculator has clean memory
-&gt; done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0,0s)
Given I have entered 1 into the calculator
-&gt; done: AdditionSteps.GivenIHaveEnteredIntoTheCalculator(1) (0,0s)
And I have entered 2 into the calculator
-&gt; done: AdditionSteps.GivenIHaveEnteredIntoTheCalculator(2) (0,0s)
When I press add
-&gt; done: AdditionSteps.WhenIPressAdd() (0,0s)
Then the result should be 3 on the screen
-&gt; done: AdditionSteps.ThenTheResultShouldBeOnTheScreen(3) (0,0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="596c6e88-3f98-45ca-8f68-2458b9aad073" testId="0df655e6-c4cf-164c-b17f-7f9f92c19045" testName="FailToAddTwoNumbers" computerName="DT000326" duration="00:00:00.0181178" startTime="2017-08-08T12:20:01.6785517+02:00" endTime="2017-08-08T12:20:01.6941519+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="596c6e88-3f98-45ca-8f68-2458b9aad073">
      <Output>
        <StdOut>Given the calculator has clean memory
-&gt; done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0,0s)
Given I have entered 1 into the calculator
-&gt; done: AdditionSteps.GivenIHaveEnteredIntoTheCalculator(1) (0,0s)
And I have entered 2.2 into the calculator
-&gt; done: AdditionSteps.GivenIHaveEnteredIntoTheCalculator(2,2) (0,0s)
When I press add
-&gt; done: AdditionSteps.WhenIPressAdd() (0,0s)
Then the result should be 3.2 on the screen
-&gt; error: Inputstrengen var ikke i et korrekt format.</StdOut>
        <ErrorInfo>
          <Message>Test method Pickles.TestHarness.MsTest.AdditionFeature.FailToAddTwoNumbers threw exception: 
System.FormatException: Inputstrengen var ikke i et korrekt format.</Message>
          <StackTrace>    ved System.Number.StringToNumber(String str, NumberStyles options, NumberBuffer&amp; number, NumberFormatInfo info, Boolean parseDecimal)
   ved System.Number.ParseInt32(String s, NumberStyles style, NumberFormatInfo info)
   ved System.String.System.IConvertible.ToInt32(IFormatProvider provider)
   ved System.Convert.ChangeType(Object value, Type conversionType, IFormatProvider provider)
   ved TechTalk.SpecFlow.Bindings.StepArgumentTypeConverter.ConvertSimple(Type typeToConvertTo, Object value, CultureInfo cultureInfo)
   ved TechTalk.SpecFlow.Bindings.StepArgumentTypeConverter.ConvertSimple(IBindingType typeToConvertTo, Object value, CultureInfo cultureInfo)
   ved TechTalk.SpecFlow.Bindings.StepArgumentTypeConverter.Convert(Object value, IBindingType typeToConvertTo, CultureInfo cultureInfo)
   ved TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ConvertArg(Object value, IBindingType typeToConvertTo)
   ved TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.&lt;&gt;c__DisplayClass5.&lt;GetExecuteArguments&gt;b__4(Object arg, Int32 argIndex)
   ved System.Linq.Enumerable.&lt;SelectIterator&gt;d__5`2.MoveNext()
   ved System.Linq.Buffer`1..ctor(IEnumerable`1 source)
   ved System.Linq.Enumerable.ToArray[TSource](IEnumerable`1 source)
   ved TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.GetExecuteArguments(BindingMatch match)
   ved TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep(StepInstance stepInstance)
   ved TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   ved TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()
   ved Pickles.TestHarness.MsTest.AdditionFeature.ScenarioCleanup()
   ved Pickles.TestHarness.MsTest.AdditionFeature.FailToAddTwoNumbers() i C:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\MsTest\Addition.feature:linje 34
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="cb3c980f-3304-4a0d-9296-ac1dc02ab253" testId="113ed7a2-61bc-45d6-3ad1-61ddbea77238" testName="IgnoredAddingTwoNumbers" computerName="DT000326" startTime="2017-08-08T12:20:01.6941519+02:00" endTime="2017-08-08T12:20:01.6941519+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="NotExecuted" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="cb3c980f-3304-4a0d-9296-ac1dc02ab253" />
    <UnitTestResult executionId="66de0781-befe-4bd0-a429-2910def65367" testId="8c3089df-e8ec-4931-e07f-19784ba313d4" testName="NotAutomatedAddingTwoNumbers" computerName="DT000326" duration="00:00:00.0353951" startTime="2017-08-08T12:20:01.6941519+02:00" endTime="2017-08-08T12:20:01.7409525+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="NotExecuted" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="66de0781-befe-4bd0-a429-2910def65367">
      <Output>
        <StdOut>Given the calculator has clean memory
-&gt; done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0,0s)
Given unimplemented step
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Given(@"unimplemented step")]
        public void GivenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }

When unimplemented step
-&gt; No matching step definition found for the step. Use the following code to create one:
        [When(@"unimplemented step")]
        public void WhenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }

Then unimplemented step
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Then(@"unimplemented step")]
        public void ThenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }</StdOut>
        <ErrorInfo>
          <Message>Assert.Inconclusive failed. No matching step definition found for one or more steps.
using System;
using TechTalk.SpecFlow;

namespace MyNamespace
{
    [Binding]
    public class StepDefinitions
    {
        [Given(@"unimplemented step")]
        public void GivenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }
        
        [When(@"unimplemented step")]
        public void WhenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }
        
        [Then(@"unimplemented step")]
        public void ThenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }
    }
}
</Message>
          <StackTrace>   ved lambda_method(Closure , String , Object[] )
   ved TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestInconclusive(String message)
   ved TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestPending(String message)
   ved TechTalk.SpecFlow.ErrorHandling.ErrorProvider.ThrowPendingError(TestStatus testStatus, String message)
   ved TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   ved TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()
   ved Pickles.TestHarness.MsTest.AdditionFeature.ScenarioCleanup()
   ved Pickles.TestHarness.MsTest.AdditionFeature.NotAutomatedAddingTwoNumbers() i C:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\MsTest\Addition.feature:linje 46
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="ec4505ad-06d3-44af-bc13-11a9ae17cecc" testId="cd06647c-3ccf-9545-fdb0-c96daaba2ca8" testName="AddTwoNumbers" computerName="DT000326" duration="00:00:00.0066191" startTime="2017-08-08T12:20:01.7409525+02:00" endTime="2017-08-08T12:20:01.7409525+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ec4505ad-06d3-44af-bc13-11a9ae17cecc">
      <Output>
        <StdOut>Given the background step fails
-&gt; error: 
The checked value is different from the expected one.
The checked value:
	[True]
The expected value:
	[False]
And the calculator has clean memory
-&gt; skipped because of previous errors
Given I have entered 50 into the calculator
-&gt; skipped because of previous errors
And I have entered 70 into the calculator
-&gt; skipped because of previous errors
When I press add
-&gt; skipped because of previous errors
Then the result should be 120 on the screen
-&gt; skipped because of previous errors</StdOut>
        <ErrorInfo>
          <Message>Test method Pickles.TestHarness.MsTest.FailingBackgroundFeature.AddTwoNumbers threw exception: 
NFluent.FluentCheckException: 
The checked value is different from the expected one.
The checked value:
	[True]
The expected value:
	[False]</Message>
          <StackTrace>    ved NFluent.Helpers.EqualityHelper.IsEqualTo(Object instance, Object expected)
   ved NFluent.ObjectCheckExtensions.&lt;&gt;c__DisplayClass1`1.&lt;IsEqualTo&gt;b__0()
   ved NFluent.Extensibility.Checker`2.ExecuteCheck(Action action, String negatedExceptionMessage)
   ved NFluent.ObjectCheckExtensions.IsEqualTo[T](ICheck`1 check, Object expected)
   ved NFluent.ObjectCheckExtensions.IsEqualTo[T](ICheck`1 check, T expected)
   ved AutomationLayer.MarkTestAs.Failing() i C:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\AutomationLayer\MarkTestAs.cs:linje 15
   ved AutomationLayer.AdditionSteps.GivenTheBackgroundStepFails() i C:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\AutomationLayer\AdditionSteps.cs:linje 25
   ved lambda_method(Closure , IContextManager )
   ved TechTalk.SpecFlow.Bindings.BindingInvoker.InvokeBinding(IBinding binding, IContextManager contextManager, Object[] arguments, ITestTracer testTracer, TimeSpan&amp; duration)
   ved TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStepMatch(BindingMatch match, Object[] arguments)
   ved TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep(StepInstance stepInstance)
   ved TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   ved TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()
   ved Pickles.TestHarness.MsTest.FailingBackgroundFeature.ScenarioCleanup()
   ved Pickles.TestHarness.MsTest.FailingBackgroundFeature.AddTwoNumbers() i C:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\MsTest\FailingBackground.feature:linje 12
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="79f7adb4-bcca-45e4-ab66-fb3707b45944" testId="bea8799b-89a4-d983-d6a9-57924ee5618e" testName="AddingSeveralNumbers_60" computerName="DT000326" duration="00:00:00.0018617" startTime="2017-08-08T12:20:01.7409525+02:00" endTime="2017-08-08T12:20:01.7409525+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="79f7adb4-bcca-45e4-ab66-fb3707b45944">
      <Output>
        <StdOut>Given the background step fails
-&gt; error: 
The checked value is different from the expected one.
The checked value:
	[True]
The expected value:
	[False]
And the calculator has clean memory
-&gt; skipped because of previous errors
Given I have entered 60 into the calculator
-&gt; skipped because of previous errors
And I have entered 70 into the calculator
-&gt; skipped because of previous errors
And I have entered 130 into the calculator
-&gt; skipped because of previous errors
When I press add
-&gt; skipped because of previous errors
Then the result should be 260 on the screen
-&gt; skipped because of previous errors</StdOut>
        <ErrorInfo>
          <Message>Test method Pickles.TestHarness.MsTest.FailingBackgroundFeature.AddingSeveralNumbers_60 threw exception: 
NFluent.FluentCheckException: 
The checked value is different from the expected one.
The checked value:
	[True]
The expected value:
	[False]</Message>
          <StackTrace>    ved NFluent.Helpers.EqualityHelper.IsEqualTo(Object instance, Object expected)
   ved NFluent.ObjectCheckExtensions.&lt;&gt;c__DisplayClass1`1.&lt;IsEqualTo&gt;b__0()
   ved NFluent.Extensibility.Checker`2.ExecuteCheck(Action action, String negatedExceptionMessage)
   ved NFluent.ObjectCheckExtensions.IsEqualTo[T](ICheck`1 check, Object expected)
   ved NFluent.ObjectCheckExtensions.IsEqualTo[T](ICheck`1 check, T expected)
   ved AutomationLayer.MarkTestAs.Failing() i C:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\AutomationLayer\MarkTestAs.cs:linje 15
   ved AutomationLayer.AdditionSteps.GivenTheBackgroundStepFails() i C:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\AutomationLayer\AdditionSteps.cs:linje 25
   ved lambda_method(Closure , IContextManager )
   ved TechTalk.SpecFlow.Bindings.BindingInvoker.InvokeBinding(IBinding binding, IContextManager contextManager, Object[] arguments, ITestTracer testTracer, TimeSpan&amp; duration)
   ved TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStepMatch(BindingMatch match, Object[] arguments)
   ved TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep(StepInstance stepInstance)
   ved TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   ved TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()
   ved Pickles.TestHarness.MsTest.FailingBackgroundFeature.ScenarioCleanup()
   ved Pickles.TestHarness.MsTest.FailingBackgroundFeature.AddingSeveralNumbers(String firstNumber, String secondNumber, String thirdNumber, String result, String[] exampleTags) i C:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\MsTest\FailingBackground.feature:linje 19
   ved Pickles.TestHarness.MsTest.FailingBackgroundFeature.AddingSeveralNumbers_60()
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="02cdfdd0-f7b4-47e9-9b7e-41be5a9b90d9" testId="7ef69afa-3afb-8791-c4d2-657df7ba5408" testName="AddingSeveralNumbers_40" computerName="DT000326" duration="00:00:00.0015948" startTime="2017-08-08T12:20:01.7409525+02:00" endTime="2017-08-08T12:20:01.7409525+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="02cdfdd0-f7b4-47e9-9b7e-41be5a9b90d9">
      <Output>
        <StdOut>Given the background step fails
-&gt; error: 
The checked value is different from the expected one.
The checked value:
	[True]
The expected value:
	[False]
And the calculator has clean memory
-&gt; skipped because of previous errors
Given I have entered 40 into the calculator
-&gt; skipped because of previous errors
And I have entered 50 into the calculator
-&gt; skipped because of previous errors
And I have entered 90 into the calculator
-&gt; skipped because of previous errors
When I press add
-&gt; skipped because of previous errors
Then the result should be 180 on the screen
-&gt; skipped because of previous errors</StdOut>
        <ErrorInfo>
          <Message>Test method Pickles.TestHarness.MsTest.FailingBackgroundFeature.AddingSeveralNumbers_40 threw exception: 
NFluent.FluentCheckException: 
The checked value is different from the expected one.
The checked value:
	[True]
The expected value:
	[False]</Message>
          <StackTrace>    ved NFluent.Helpers.EqualityHelper.IsEqualTo(Object instance, Object expected)
   ved NFluent.ObjectCheckExtensions.&lt;&gt;c__DisplayClass1`1.&lt;IsEqualTo&gt;b__0()
   ved NFluent.Extensibility.Checker`2.ExecuteCheck(Action action, String negatedExceptionMessage)
   ved NFluent.ObjectCheckExtensions.IsEqualTo[T](ICheck`1 check, Object expected)
   ved NFluent.ObjectCheckExtensions.IsEqualTo[T](ICheck`1 check, T expected)
   ved AutomationLayer.MarkTestAs.Failing() i C:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\AutomationLayer\MarkTestAs.cs:linje 15
   ved AutomationLayer.AdditionSteps.GivenTheBackgroundStepFails() i C:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\AutomationLayer\AdditionSteps.cs:linje 25
   ved lambda_method(Closure , IContextManager )
   ved TechTalk.SpecFlow.Bindings.BindingInvoker.InvokeBinding(IBinding binding, IContextManager contextManager, Object[] arguments, ITestTracer testTracer, TimeSpan&amp; duration)
   ved TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStepMatch(BindingMatch match, Object[] arguments)
   ved TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep(StepInstance stepInstance)
   ved TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   ved TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()
   ved Pickles.TestHarness.MsTest.FailingBackgroundFeature.ScenarioCleanup()
   ved Pickles.TestHarness.MsTest.FailingBackgroundFeature.AddingSeveralNumbers(String firstNumber, String secondNumber, String thirdNumber, String result, String[] exampleTags) i C:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\MsTest\FailingBackground.feature:linje 19
   ved Pickles.TestHarness.MsTest.FailingBackgroundFeature.AddingSeveralNumbers_40()
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="5667504a-1c22-46b0-9dea-92819b0c7a70" testId="d2820219-bd97-2273-945a-4d371724085a" testName="NotAutomatedScenario1" computerName="DT000326" duration="00:00:00.0055374" startTime="2017-08-08T12:20:01.7565527+02:00" endTime="2017-08-08T12:20:01.7565527+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="NotExecuted" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5667504a-1c22-46b0-9dea-92819b0c7a70">
      <Output>
        <StdOut>Given unimplemented step
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Given(@"unimplemented step")]
        public void GivenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }

Given unimplemented step
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Given(@"unimplemented step")]
        public void GivenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }

When unimplemented step
-&gt; No matching step definition found for the step. Use the following code to create one:
        [When(@"unimplemented step")]
        public void WhenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }

Then unimplemented step
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Then(@"unimplemented step")]
        public void ThenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }</StdOut>
        <ErrorInfo>
          <Message>Assert.Inconclusive failed. No matching step definition found for one or more steps.
using System;
using TechTalk.SpecFlow;

namespace MyNamespace
{
    [Binding]
    public class StepDefinitions
    {
        [Given(@"unimplemented step")]
        public void GivenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }
        
        [When(@"unimplemented step")]
        public void WhenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }
        
        [Then(@"unimplemented step")]
        public void ThenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }
    }
}
</Message>
          <StackTrace>   ved lambda_method(Closure , String , Object[] )
   ved TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestInconclusive(String message)
   ved TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestPending(String message)
   ved TechTalk.SpecFlow.ErrorHandling.ErrorProvider.ThrowPendingError(TestStatus testStatus, String message)
   ved TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   ved TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()
   ved Pickles.TestHarness.MsTest.NotAutomatedAtAllFeature.ScenarioCleanup()
   ved Pickles.TestHarness.MsTest.NotAutomatedAtAllFeature.NotAutomatedScenario1() i C:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\MsTest\NotAutomatedAtAll.feature:linje 9
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="a2feebcf-b4ff-4430-ba7a-834d0edf0659" testId="8bc041bd-d809-7992-ff2a-09b84d713da5" testName="NotAutomatedScenario2" computerName="DT000326" duration="00:00:00.0050997" startTime="2017-08-08T12:20:01.7565527+02:00" endTime="2017-08-08T12:20:01.7721529+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="NotExecuted" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a2feebcf-b4ff-4430-ba7a-834d0edf0659">
      <Output>
        <StdOut>Given unimplemented step
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Given(@"unimplemented step")]
        public void GivenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }

Given unimplemented step
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Given(@"unimplemented step")]
        public void GivenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }

When unimplemented step
-&gt; No matching step definition found for the step. Use the following code to create one:
        [When(@"unimplemented step")]
        public void WhenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }

Then unimplemented step
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Then(@"unimplemented step")]
        public void ThenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }</StdOut>
        <ErrorInfo>
          <Message>Assert.Inconclusive failed. No matching step definition found for one or more steps.
using System;
using TechTalk.SpecFlow;

namespace MyNamespace
{
    [Binding]
    public class StepDefinitions
    {
        [Given(@"unimplemented step")]
        public void GivenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }
        
        [When(@"unimplemented step")]
        public void WhenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }
        
        [Then(@"unimplemented step")]
        public void ThenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }
    }
}
</Message>
          <StackTrace>   ved lambda_method(Closure , String , Object[] )
   ved TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestInconclusive(String message)
   ved TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestPending(String message)
   ved TechTalk.SpecFlow.ErrorHandling.ErrorProvider.ThrowPendingError(TestStatus testStatus, String message)
   ved TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   ved TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()
   ved Pickles.TestHarness.MsTest.NotAutomatedAtAllFeature.ScenarioCleanup()
   ved Pickles.TestHarness.MsTest.NotAutomatedAtAllFeature.NotAutomatedScenario2() i C:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\MsTest\NotAutomatedAtAll.feature:linje 14
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f7b8c99f-cfd4-4404-9c6b-935d551f3965" testId="ee64b0d5-906e-5159-a108-531362c596d1" testName="NotAutomatedScenario3" computerName="DT000326" duration="00:00:00.0063646" startTime="2017-08-08T12:20:01.7721529+02:00" endTime="2017-08-08T12:20:01.7721529+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="NotExecuted" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f7b8c99f-cfd4-4404-9c6b-935d551f3965">
      <Output>
        <StdOut>Given unimplemented step
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Given(@"unimplemented step")]
        public void GivenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }

Given unimplemented step
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Given(@"unimplemented step")]
        public void GivenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }

When unimplemented step
-&gt; No matching step definition found for the step. Use the following code to create one:
        [When(@"unimplemented step")]
        public void WhenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }

Then unimplemented step
-&gt; No matching step definition found for the step. Use the following code to create one:
        [Then(@"unimplemented step")]
        public void ThenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }</StdOut>
        <ErrorInfo>
          <Message>Assert.Inconclusive failed. No matching step definition found for one or more steps.
using System;
using TechTalk.SpecFlow;

namespace MyNamespace
{
    [Binding]
    public class StepDefinitions
    {
        [Given(@"unimplemented step")]
        public void GivenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }
        
        [When(@"unimplemented step")]
        public void WhenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }
        
        [Then(@"unimplemented step")]
        public void ThenUnimplementedStep()
        {
            ScenarioContext.Current.Pending();
        }
    }
}
</Message>
          <StackTrace>   ved lambda_method(Closure , String , Object[] )
   ved TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestInconclusive(String message)
   ved TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestPending(String message)
   ved TechTalk.SpecFlow.ErrorHandling.ErrorProvider.ThrowPendingError(TestStatus testStatus, String message)
   ved TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   ved TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()
   ved Pickles.TestHarness.MsTest.NotAutomatedAtAllFeature.ScenarioCleanup()
   ved Pickles.TestHarness.MsTest.NotAutomatedAtAllFeature.NotAutomatedScenario3() i C:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\MsTest\NotAutomatedAtAll.feature:linje 19
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0f286a4a-df60-4bbb-a5c6-e30ea4e9ac5c" testId="f9a64263-f40d-f64d-0a5b-22b6db10eb26" testName="ThisIsAScenarioOutlineWhereAllScenariosPass_Pass_1" computerName="DT000326" duration="00:00:00.0018278" startTime="2017-08-08T12:20:01.7721529+02:00" endTime="2017-08-08T12:20:01.7721529+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0f286a4a-df60-4bbb-a5c6-e30ea4e9ac5c">
      <Output>
        <StdOut>Then the scenario will 'pass_1'
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("pass_1") (0,0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="79fcb72e-8bd5-429c-a782-cf6739487d99" testId="aa38c998-4087-fdeb-c742-f6a940beef87" testName="ThisIsAScenarioOutlineWhereAllScenariosPass_Pass_2" computerName="DT000326" duration="00:00:00.0001857" startTime="2017-08-08T12:20:01.7721529+02:00" endTime="2017-08-08T12:20:01.7721529+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="79fcb72e-8bd5-429c-a782-cf6739487d99">
      <Output>
        <StdOut>Then the scenario will 'pass_2'
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("pass_2") (0,0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="81fd0623-fe03-4335-b15f-3d2c231f459d" testId="90a44ab4-342d-ed3c-860e-39c8152c2fad" testName="ThisIsAScenarioOutlineWhereAllScenariosPass_Pass_3" computerName="DT000326" duration="00:00:00.0001960" startTime="2017-08-08T12:20:01.7721529+02:00" endTime="2017-08-08T12:20:01.7721529+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="81fd0623-fe03-4335-b15f-3d2c231f459d">
      <Output>
        <StdOut>Then the scenario will 'pass_3'
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("pass_3") (0,0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6bc2d446-52bf-40d2-8d07-e2a858308954" testId="7e46cf81-dd4a-3fd0-4759-df967f754d0d" testName="ThisIsAScenarioOutlineWhereOneScenarioIsInconclusive_Pass_1" computerName="DT000326" duration="00:00:00.0003320" startTime="2017-08-08T12:20:01.7721529+02:00" endTime="2017-08-08T12:20:01.7721529+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6bc2d446-52bf-40d2-8d07-e2a858308954">
      <Output>
        <StdOut>Then the scenario will 'pass_1'
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("pass_1") (0,0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="ae02beeb-6c1b-4bf0-86bc-14677812e707" testId="a83adabc-7eb9-5e21-a7bc-6907dc0d83ea" testName="ThisIsAScenarioOutlineWhereOneScenarioIsInconclusive_Pass_2" computerName="DT000326" duration="00:00:00.0001719" startTime="2017-08-08T12:20:01.7721529+02:00" endTime="2017-08-08T12:20:01.7721529+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ae02beeb-6c1b-4bf0-86bc-14677812e707">
      <Output>
        <StdOut>Then the scenario will 'pass_2'
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("pass_2") (0,0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="aa45eb18-457c-482b-8b36-4fbf4b09a165" testId="b4fa0e1c-5a4e-dabb-6fb2-000597c04404" testName="ThisIsAScenarioOutlineWhereOneScenarioIsInconclusive_Inconclusive_1" computerName="DT000326" duration="00:00:00.0081231" startTime="2017-08-08T12:20:01.7721529+02:00" endTime="2017-08-08T12:20:01.7877531+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="NotExecuted" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="aa45eb18-457c-482b-8b36-4fbf4b09a165">
      <Output>
        <StdOut>Then the scenario will 'inconclusive_1'
-&gt; pending: ScenarioOutlineSteps.ThenTheScenarioWill("inconclusive_1")</StdOut>
        <ErrorInfo>
          <Message>Assert.Inconclusive failed. One or more step definitions are not implemented yet.
  ScenarioOutlineSteps.ThenTheScenarioWill("inconclusive_1")</Message>
          <StackTrace>   ved lambda_method(Closure , String , Object[] )
   ved TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestInconclusive(String message)
   ved TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestPending(String message)
   ved TechTalk.SpecFlow.ErrorHandling.ErrorProvider.ThrowPendingError(TestStatus testStatus, String message)
   ved TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   ved TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()
   ved Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.ScenarioCleanup()
   ved Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.ThisIsAScenarioOutlineWhereOneScenarioIsInconclusive(String result, String[] exampleTags) i C:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\MsTest\ScenarioOutlines.feature:linje 21
   ved Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.ThisIsAScenarioOutlineWhereOneScenarioIsInconclusive_Inconclusive_1()
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="35a9b9bc-6bfe-4263-b59c-a6b05f7c60ac" testId="e911cad1-80be-36f6-3c0c-eb83f516c0a2" testName="ThisIsAScenarioOutlineWhereOneScenarioFails_Pass_1" computerName="DT000326" duration="00:00:00.0005198" startTime="2017-08-08T12:20:01.7877531+02:00" endTime="2017-08-08T12:20:01.7877531+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="35a9b9bc-6bfe-4263-b59c-a6b05f7c60ac">
      <Output>
        <StdOut>Then the scenario will 'pass_1'
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("pass_1") (0,0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="38913a5e-be0e-49a6-93c4-5a982e465570" testId="f3327e4b-92ea-d5bf-ceff-5062ff9febf5" testName="ThisIsAScenarioOutlineWhereOneScenarioFails_Pass_2" computerName="DT000326" duration="00:00:00.0002016" startTime="2017-08-08T12:20:01.7877531+02:00" endTime="2017-08-08T12:20:01.7877531+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="38913a5e-be0e-49a6-93c4-5a982e465570">
      <Output>
        <StdOut>Then the scenario will 'pass_2'
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("pass_2") (0,0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="59ecccc8-2246-4944-b0d0-31a81adea942" testId="5309a9c5-1ee0-31a6-55f5-b76209e03db3" testName="ThisIsAScenarioOutlineWhereOneScenarioFails_Fail_1" computerName="DT000326" duration="00:00:00.0021998" startTime="2017-08-08T12:20:01.7877531+02:00" endTime="2017-08-08T12:20:01.7877531+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="59ecccc8-2246-4944-b0d0-31a81adea942">
      <Output>
        <StdOut>Then the scenario will 'fail_1'
-&gt; error: 
The checked value is different from the expected one.
The checked value:
	[True]
The expected value:
	[False]</StdOut>
        <ErrorInfo>
          <Message>Test method Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.ThisIsAScenarioOutlineWhereOneScenarioFails_Fail_1 threw exception: 
NFluent.FluentCheckException: 
The checked value is different from the expected one.
The checked value:
	[True]
The expected value:
	[False]</Message>
          <StackTrace>    ved NFluent.Helpers.EqualityHelper.IsEqualTo(Object instance, Object expected)
   ved NFluent.ObjectCheckExtensions.&lt;&gt;c__DisplayClass1`1.&lt;IsEqualTo&gt;b__0()
   ved NFluent.Extensibility.Checker`2.ExecuteCheck(Action action, String negatedExceptionMessage)
   ved NFluent.ObjectCheckExtensions.IsEqualTo[T](ICheck`1 check, Object expected)
   ved NFluent.ObjectCheckExtensions.IsEqualTo[T](ICheck`1 check, T expected)
   ved AutomationLayer.MarkTestAs.Failing() i C:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\AutomationLayer\MarkTestAs.cs:linje 15
   ved AutomationLayer.ScenarioOutlineSteps.ThenTheScenarioWill(String result) i C:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\AutomationLayer\ScenarioOutlineSteps.cs:linje 19
   ved lambda_method(Closure , IContextManager , String )
   ved TechTalk.SpecFlow.Bindings.BindingInvoker.InvokeBinding(IBinding binding, IContextManager contextManager, Object[] arguments, ITestTracer testTracer, TimeSpan&amp; duration)
   ved TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStepMatch(BindingMatch match, Object[] arguments)
   ved TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep(StepInstance stepInstance)
   ved TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   ved TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()
   ved Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.ScenarioCleanup()
   ved Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.ThisIsAScenarioOutlineWhereOneScenarioFails(String result, String[] exampleTags) i C:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\MsTest\ScenarioOutlines.feature:linje 34
   ved Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.ThisIsAScenarioOutlineWhereOneScenarioFails_Fail_1()
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="4307eee1-bcf6-4e34-9827-0cd81846726e" testId="635e5bc5-c3fe-72a8-367f-654037b1c1da" testName="AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet0_Pass_1" computerName="DT000326" duration="00:00:00.0003638" startTime="2017-08-08T12:20:01.7877531+02:00" endTime="2017-08-08T12:20:01.7877531+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4307eee1-bcf6-4e34-9827-0cd81846726e">
      <Output>
        <StdOut>Then the scenario will 'pass_1'
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("pass_1") (0,0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="878408b5-f736-43a2-830c-0005283de724" testId="99ae1964-4272-f64b-08c7-beaae8bff30c" testName="AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet0_Pass_2" computerName="DT000326" duration="00:00:00.0002083" startTime="2017-08-08T12:20:01.7877531+02:00" endTime="2017-08-08T12:20:01.7877531+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="878408b5-f736-43a2-830c-0005283de724">
      <Output>
        <StdOut>Then the scenario will 'pass_2'
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("pass_2") (0,0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="24ffabc5-3632-42e8-bd69-d597305ce856" testId="6aa57053-5392-ab46-85c8-7e37adaaee43" testName="AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet1_Inconclusive_1" computerName="DT000326" duration="00:00:00.0022116" startTime="2017-08-08T12:20:01.7877531+02:00" endTime="2017-08-08T12:20:01.7877531+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="NotExecuted" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="24ffabc5-3632-42e8-bd69-d597305ce856">
      <Output>
        <StdOut>Then the scenario will 'inconclusive_1'
-&gt; pending: ScenarioOutlineSteps.ThenTheScenarioWill("inconclusive_1")</StdOut>
        <ErrorInfo>
          <Message>Assert.Inconclusive failed. One or more step definitions are not implemented yet.
  ScenarioOutlineSteps.ThenTheScenarioWill("inconclusive_1")</Message>
          <StackTrace>   ved lambda_method(Closure , String , Object[] )
   ved TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestInconclusive(String message)
   ved TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestPending(String message)
   ved TechTalk.SpecFlow.ErrorHandling.ErrorProvider.ThrowPendingError(TestStatus testStatus, String message)
   ved TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   ved TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()
   ved Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.ScenarioCleanup()
   ved Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.AndWeCanGoTotallyBonkersWithMultipleExampleSections_(String result, String[] exampleTags) i C:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\MsTest\ScenarioOutlines.feature:linje 45
   ved Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet1_Inconclusive_1()
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="abb26c3f-850e-4e2d-a869-5344b43554dd" testId="e8c43f8a-7359-f15b-4250-8ed752528b1b" testName="AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet1_Inconclusive_2" computerName="DT000326" duration="00:00:00.0020490" startTime="2017-08-08T12:20:01.7877531+02:00" endTime="2017-08-08T12:20:01.7877531+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="NotExecuted" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="abb26c3f-850e-4e2d-a869-5344b43554dd">
      <Output>
        <StdOut>Then the scenario will 'inconclusive_2'
-&gt; pending: ScenarioOutlineSteps.ThenTheScenarioWill("inconclusive_2")</StdOut>
        <ErrorInfo>
          <Message>Assert.Inconclusive failed. One or more step definitions are not implemented yet.
  ScenarioOutlineSteps.ThenTheScenarioWill("inconclusive_2")</Message>
          <StackTrace>   ved lambda_method(Closure , String , Object[] )
   ved TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestInconclusive(String message)
   ved TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestPending(String message)
   ved TechTalk.SpecFlow.ErrorHandling.ErrorProvider.ThrowPendingError(TestStatus testStatus, String message)
   ved TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   ved TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()
   ved Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.ScenarioCleanup()
   ved Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.AndWeCanGoTotallyBonkersWithMultipleExampleSections_(String result, String[] exampleTags) i C:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\MsTest\ScenarioOutlines.feature:linje 45
   ved Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet1_Inconclusive_2()
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="a61b55e8-210d-421c-9b4b-eb39e62e83f1" testId="d6dd768f-20fc-ed4a-8542-86bee0adde9e" testName="AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet2_Fail_1" computerName="DT000326" duration="00:00:00.0020372" startTime="2017-08-08T12:20:01.7877531+02:00" endTime="2017-08-08T12:20:01.8033533+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a61b55e8-210d-421c-9b4b-eb39e62e83f1">
      <Output>
        <StdOut>Then the scenario will 'fail_1'
-&gt; error: 
The checked value is different from the expected one.
The checked value:
	[True]
The expected value:
	[False]</StdOut>
        <ErrorInfo>
          <Message>Test method Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet2_Fail_1 threw exception: 
NFluent.FluentCheckException: 
The checked value is different from the expected one.
The checked value:
	[True]
The expected value:
	[False]</Message>
          <StackTrace>    ved NFluent.Helpers.EqualityHelper.IsEqualTo(Object instance, Object expected)
   ved NFluent.ObjectCheckExtensions.&lt;&gt;c__DisplayClass1`1.&lt;IsEqualTo&gt;b__0()
   ved NFluent.Extensibility.Checker`2.ExecuteCheck(Action action, String negatedExceptionMessage)
   ved NFluent.ObjectCheckExtensions.IsEqualTo[T](ICheck`1 check, Object expected)
   ved NFluent.ObjectCheckExtensions.IsEqualTo[T](ICheck`1 check, T expected)
   ved AutomationLayer.MarkTestAs.Failing() i C:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\AutomationLayer\MarkTestAs.cs:linje 15
   ved AutomationLayer.ScenarioOutlineSteps.ThenTheScenarioWill(String result) i C:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\AutomationLayer\ScenarioOutlineSteps.cs:linje 19
   ved lambda_method(Closure , IContextManager , String )
   ved TechTalk.SpecFlow.Bindings.BindingInvoker.InvokeBinding(IBinding binding, IContextManager contextManager, Object[] arguments, ITestTracer testTracer, TimeSpan&amp; duration)
   ved TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStepMatch(BindingMatch match, Object[] arguments)
   ved TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep(StepInstance stepInstance)
   ved TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   ved TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()
   ved Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.ScenarioCleanup()
   ved Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.AndWeCanGoTotallyBonkersWithMultipleExampleSections_(String result, String[] exampleTags) i C:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\MsTest\ScenarioOutlines.feature:linje 45
   ved Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet2_Fail_1()
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="23639c5c-6d25-4a76-bf23-21ae369c0b80" testId="ed9be2e6-2632-9fc1-c693-fe530d107927" testName="AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet2_Fail_2" computerName="DT000326" duration="00:00:00.0019479" startTime="2017-08-08T12:20:01.8033533+02:00" endTime="2017-08-08T12:20:01.8033533+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="23639c5c-6d25-4a76-bf23-21ae369c0b80">
      <Output>
        <StdOut>Then the scenario will 'fail_2'
-&gt; error: 
The checked value is different from the expected one.
The checked value:
	[True]
The expected value:
	[False]</StdOut>
        <ErrorInfo>
          <Message>Test method Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet2_Fail_2 threw exception: 
NFluent.FluentCheckException: 
The checked value is different from the expected one.
The checked value:
	[True]
The expected value:
	[False]</Message>
          <StackTrace>    ved NFluent.Helpers.EqualityHelper.IsEqualTo(Object instance, Object expected)
   ved NFluent.ObjectCheckExtensions.&lt;&gt;c__DisplayClass1`1.&lt;IsEqualTo&gt;b__0()
   ved NFluent.Extensibility.Checker`2.ExecuteCheck(Action action, String negatedExceptionMessage)
   ved NFluent.ObjectCheckExtensions.IsEqualTo[T](ICheck`1 check, Object expected)
   ved NFluent.ObjectCheckExtensions.IsEqualTo[T](ICheck`1 check, T expected)
   ved AutomationLayer.MarkTestAs.Failing() i C:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\AutomationLayer\MarkTestAs.cs:linje 15
   ved AutomationLayer.ScenarioOutlineSteps.ThenTheScenarioWill(String result) i C:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\AutomationLayer\ScenarioOutlineSteps.cs:linje 19
   ved lambda_method(Closure , IContextManager , String )
   ved TechTalk.SpecFlow.Bindings.BindingInvoker.InvokeBinding(IBinding binding, IContextManager contextManager, Object[] arguments, ITestTracer testTracer, TimeSpan&amp; duration)
   ved TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStepMatch(BindingMatch match, Object[] arguments)
   ved TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep(StepInstance stepInstance)
   ved TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   ved TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()
   ved Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.ScenarioCleanup()
   ved Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.AndWeCanGoTotallyBonkersWithMultipleExampleSections_(String result, String[] exampleTags) i C:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\MsTest\ScenarioOutlines.feature:linje 45
   ved Pickles.TestHarness.MsTest.ScenarioOutlinesFeature.AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet2_Fail_2()
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="7998974f-4101-457d-9ce1-458e839b7b7f" testId="b2578459-aaca-c2fd-c57f-0405fafa6c43" testName="DealCorrectlyWithBackslashesInTheExamples_CTemp" computerName="DT000326" duration="00:00:00.0011084" startTime="2017-08-08T12:20:01.8033533+02:00" endTime="2017-08-08T12:20:01.8033533+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7998974f-4101-457d-9ce1-458e839b7b7f">
      <Output>
        <StdOut>When I have backslashes in the value, for example a 'c:\Temp\'
-&gt; done: ScenarioOutlineSteps.WhenIHaveBackslashesInTheValueForExampleAFilePath("c:\Temp\") (0,0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0118c8a1-4427-4977-8630-e6f8026667f6" testId="ece5cdce-c3f9-32d6-6d48-bb2f6fd1ba91" testName="DealCorrectlyWithParenthesisInTheExamples_ThisIsADescriptionAndMore" computerName="DT000326" duration="00:00:00.0008928" startTime="2017-08-08T12:20:01.8033533+02:00" endTime="2017-08-08T12:20:01.8033533+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0118c8a1-4427-4977-8630-e6f8026667f6">
      <Output>
        <StdOut>When I have parenthesis in the value, for example an 'This is a description (and more)'
-&gt; done: ScenarioOutlineSteps.WhenIHaveParenthesisInTheValueForExampleAnOverlyDescriptiveField("This is a descrip...") (0,0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b5e5fd72-9417-440d-9097-10c55387a046" testId="9404b577-698b-61ca-64fc-88ff799201bd" testName="DealCorrectlyWithOverlongExampleValues_PleaseEnterAValidTwoLetterCountryCodeE_G_DE" computerName="DT000326" duration="00:00:00.0010601" startTime="2017-08-08T12:20:01.8033533+02:00" endTime="2017-08-08T12:20:01.8033533+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b5e5fd72-9417-440d-9097-10c55387a046">
      <Output>
        <StdOut>When I have a field with value 'Please enter a valid two letter country code (e.g. DE)!'
-&gt; done: ScenarioOutlineSteps.WhenIHaveAFieldWithValue("Please enter a va...") (0,0s)
And I have a field with value 'This is just a very very very veery long error message!'
-&gt; done: ScenarioOutlineSteps.WhenIHaveAFieldWithValue("This is just a ve...") (0,0s)
Then the scenario will 'pass_1'
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("pass_1") (0,0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="887d93ed-f927-42a3-9039-3d34037cb054" testId="9fb96cdc-a81e-252c-1a41-7ecd9a592065" testName="TestMethod" computerName="DT000326" duration="00:00:00.0000990" startTime="2017-08-08T12:20:01.8033533+02:00" endTime="2017-08-08T12:20:01.8033533+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="887d93ed-f927-42a3-9039-3d34037cb054" />
    <UnitTestResult executionId="e50effa9-d752-4109-aa1f-64da365ff3df" testId="53ebc13a-89fc-b58c-a6e0-dfd85e793e5f" testName="ThisIsAScenarioWithParenthesesHyphenAndComma10_2030_40" computerName="DT000326" duration="00:00:00.0011545" startTime="2017-08-08T12:20:01.8033533+02:00" endTime="2017-08-08T12:20:01.8033533+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e50effa9-d752-4109-aa1f-64da365ff3df">
      <Output>
        <StdOut>Given the calculator has clean memory
-&gt; done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0,0s)
Given I have entered 50 into the calculator
-&gt; done: AdditionSteps.GivenIHaveEnteredIntoTheCalculator(50) (0,0s)
And I have entered 70 into the calculator
-&gt; done: AdditionSteps.GivenIHaveEnteredIntoTheCalculator(70) (0,0s)
When I press add
-&gt; done: AdditionSteps.WhenIPressAdd() (0,0s)
Then the result should be 120 on the screen
-&gt; done: AdditionSteps.ThenTheResultShouldBeOnTheScreen(120) (0,0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="1de82f2d-0bd8-4294-a21e-5ecc1cf562e4" testId="efcbe7cc-31a8-2063-2ba3-daddc29b814d" testName="ThisIsAScenarioOutlineWithParenthesesHyphenAndComma10_2030_40_Pass_1" computerName="DT000326" duration="00:00:00.0004382" startTime="2017-08-08T12:20:01.8033533+02:00" endTime="2017-08-08T12:20:01.8033533+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1de82f2d-0bd8-4294-a21e-5ecc1cf562e4">
      <Output>
        <StdOut>Given the calculator has clean memory
-&gt; done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0,0s)
Then the scenario will 'pass_1'
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("pass_1") (0,0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6819f556-4082-4ada-b920-3e6d41f32525" testId="860fe6a8-8ab8-da24-9ff4-8fc156cff05f" testName="ThisScenarioContainsExamplesWithRegex_SpecialCharacters_Variant0" computerName="DT000326" duration="00:00:00.0009908" startTime="2017-08-08T12:20:01.8033533+02:00" endTime="2017-08-08T12:20:01.8033533+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6819f556-4082-4ada-b920-3e6d41f32525">
      <Output>
        <StdOut>Given the calculator has clean memory
-&gt; done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0,0s)
When I have special characters for regexes in the value, for example a '**'
-&gt; done: ScenarioOutlineSteps.WhenIHaveSpecialCharactersForRegexesInTheValueForExampleARegex("**") (0,0s)
Then the scenario will 'PASS'
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("PASS") (0,0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="a6281dff-00a4-431e-8c42-c438ae15797c" testId="a900fecb-3728-fcea-67f2-b24d9d94cd5e" testName="ThisScenarioContainsExamplesWithRegex_SpecialCharacters_Variant1" computerName="DT000326" duration="00:00:00.0002581" startTime="2017-08-08T12:20:01.8033533+02:00" endTime="2017-08-08T12:20:01.8033533+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a6281dff-00a4-431e-8c42-c438ae15797c">
      <Output>
        <StdOut>Given the calculator has clean memory
-&gt; done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0,0s)
When I have special characters for regexes in the value, for example a '++'
-&gt; done: ScenarioOutlineSteps.WhenIHaveSpecialCharactersForRegexesInTheValueForExampleARegex("++") (0,0s)
Then the scenario will 'PASS'
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("PASS") (0,0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="03219d9a-b120-495d-abb9-7d0f8486bd9f" testId="46f974ed-841e-26dd-a181-971cc88d892b" testName="ThisScenarioContainsExamplesWithRegex_SpecialCharacters_Variant2" computerName="DT000326" duration="00:00:00.0002729" startTime="2017-08-08T12:20:01.8033533+02:00" endTime="2017-08-08T12:20:01.8033533+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="03219d9a-b120-495d-abb9-7d0f8486bd9f">
      <Output>
        <StdOut>Given the calculator has clean memory
-&gt; done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0,0s)
When I have special characters for regexes in the value, for example a '.*'
-&gt; done: ScenarioOutlineSteps.WhenIHaveSpecialCharactersForRegexesInTheValueForExampleARegex(".*") (0,0s)
Then the scenario will 'PASS'
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("PASS") (0,0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="67da7d40-5227-403c-93e1-69ce26b4c726" testId="52d27672-31de-19f1-70ce-05bf3e83b4d2" testName="ThisScenarioContainsExamplesWithRegex_SpecialCharacters_Variant3" computerName="DT000326" duration="00:00:00.0002509" startTime="2017-08-08T12:20:01.8033533+02:00" endTime="2017-08-08T12:20:01.8033533+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="67da7d40-5227-403c-93e1-69ce26b4c726">
      <Output>
        <StdOut>Given the calculator has clean memory
-&gt; done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0,0s)
When I have special characters for regexes in the value, for example a '[]'
-&gt; done: ScenarioOutlineSteps.WhenIHaveSpecialCharactersForRegexesInTheValueForExampleARegex("[]") (0,0s)
Then the scenario will 'PASS'
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("PASS") (0,0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="07334380-3ea2-43f4-b989-22fa79221479" testId="b0a09bca-247a-a5bc-25cf-8aa3774a2d40" testName="ThisScenarioContainsExamplesWithRegex_SpecialCharacters_Variant4" computerName="DT000326" duration="00:00:00.0002504" startTime="2017-08-08T12:20:01.8033533+02:00" endTime="2017-08-08T12:20:01.8033533+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="07334380-3ea2-43f4-b989-22fa79221479">
      <Output>
        <StdOut>Given the calculator has clean memory
-&gt; done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0,0s)
When I have special characters for regexes in the value, for example a '{}'
-&gt; done: ScenarioOutlineSteps.WhenIHaveSpecialCharactersForRegexesInTheValueForExampleARegex("{}") (0,0s)
Then the scenario will 'PASS'
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("PASS") (0,0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f268f41b-fe00-40fc-b94c-d5a02a2eac34" testId="d4e92e37-b370-9951-cf08-d28c8be3df76" testName="ThisScenarioContainsExamplesWithRegex_SpecialCharacters_Variant5" computerName="DT000326" duration="00:00:00.0002724" startTime="2017-08-08T12:20:01.8033533+02:00" endTime="2017-08-08T12:20:01.8033533+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f268f41b-fe00-40fc-b94c-d5a02a2eac34">
      <Output>
        <StdOut>Given the calculator has clean memory
-&gt; done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0,0s)
When I have special characters for regexes in the value, for example a '()'
-&gt; done: ScenarioOutlineSteps.WhenIHaveSpecialCharactersForRegexesInTheValueForExampleARegex("()") (0,0s)
Then the scenario will 'PASS'
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("PASS") (0,0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="fe33b3d3-0978-4480-8390-7a12d087b832" testId="bd874ade-5d64-8f62-b83e-d52cd3e9a75c" testName="ThisScenarioContainsExamplesWithRegex_SpecialCharacters_Variant6" computerName="DT000326" duration="00:00:00.0002524" startTime="2017-08-08T12:20:01.8033533+02:00" endTime="2017-08-08T12:20:01.8033533+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="fe33b3d3-0978-4480-8390-7a12d087b832">
      <Output>
        <StdOut>Given the calculator has clean memory
-&gt; done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0,0s)
When I have special characters for regexes in the value, for example a '^.*(?&lt;foo&gt;BAR)\s[^0-9]{3,4}A+$'
-&gt; done: ScenarioOutlineSteps.WhenIHaveSpecialCharactersForRegexesInTheValueForExampleARegex("^.*(?&lt;foo&gt;BAR)\s[...") (0,0s)
Then the scenario will 'PASS'
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("PASS") (0,0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="14de0beb-5f54-4bde-9a97-c61192b658ff" testId="eeac1cb9-e9d0-de27-eeb7-a74ca0b65a36" testName="ThisIsAScenarioOutlineWithGermanUmlautsAouBAOU_Pass_1" computerName="DT000326" duration="00:00:00.0004372" startTime="2017-08-08T12:20:01.8033533+02:00" endTime="2017-08-08T12:20:01.8033533+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="14de0beb-5f54-4bde-9a97-c61192b658ff">
      <Output>
        <StdOut>Given the calculator has clean memory
-&gt; done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0,0s)
Then the scenario will 'pass_1'
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("pass_1") (0,0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c3daa0a9-de9c-42e4-a93b-0a4a0385b676" testId="0943a703-db7d-3781-87ab-a7405aa83a66" testName="ThisIsAScenarioOutlineWithAmpersand_Pass_1" computerName="DT000326" duration="00:00:00.0004556" startTime="2017-08-08T12:20:01.8033533+02:00" endTime="2017-08-08T12:20:01.8189535+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c3daa0a9-de9c-42e4-a93b-0a4a0385b676">
      <Output>
        <StdOut>Given the calculator has clean memory
-&gt; done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0,0s)
Then the scenario will 'pass_1'
-&gt; done: ScenarioOutlineSteps.ThenTheScenarioWill("pass_1") (0,0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="4dcc16d7-561f-4b17-a8b3-01396336479c" testId="fe3a2fd1-be1c-0a5c-b0fd-93bfa634a24c" testName="ThisIsAScenarioWithDanishCharactersAEoaAEOA" computerName="DT000326" duration="00:00:00.0009339" startTime="2017-08-08T12:20:01.8189535+02:00" endTime="2017-08-08T12:20:01.8189535+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4dcc16d7-561f-4b17-a8b3-01396336479c">
      <Output>
        <StdOut>Given the calculator has clean memory
-&gt; done: AdditionSteps.GivenTheCalculatorHasCleanMemory() (0,0s)
Then the step with danish characters like æøå and ÆØÅ shall pass
-&gt; done: MinimalSteps.ThenPassingDanishStep() (0,0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="4f0ce609-7311-46b2-b219-01abe0a9e591" testId="b08cd0c6-1fb7-422e-7264-d77da39fe00d" testName="FailingFeaturePassingScenario" computerName="DT000326" duration="00:00:00.0012053" startTime="2017-08-08T12:20:01.8189535+02:00" endTime="2017-08-08T12:20:01.8189535+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4f0ce609-7311-46b2-b219-01abe0a9e591">
      <Output>
        <StdOut>Then passing step
-&gt; done: MinimalSteps.ThenPassingStep() (0,0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="956bde2a-7808-40e9-9c6a-d6c60b6a48f1" testId="68c045a3-263d-f215-70d9-bc46476ac556" testName="FailingFeatureInconclusiveScenario" computerName="DT000326" duration="00:00:00.0028325" startTime="2017-08-08T12:20:01.8189535+02:00" endTime="2017-08-08T12:20:01.8189535+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="NotExecuted" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="956bde2a-7808-40e9-9c6a-d6c60b6a48f1">
      <Output>
        <StdOut>Then inconclusive step
-&gt; pending: MinimalSteps.ThenInconclusiveStep()</StdOut>
        <ErrorInfo>
          <Message>Assert.Inconclusive failed. One or more step definitions are not implemented yet.
  MinimalSteps.ThenInconclusiveStep()</Message>
          <StackTrace>   ved lambda_method(Closure , String , Object[] )
   ved TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestInconclusive(String message)
   ved TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestPending(String message)
   ved TechTalk.SpecFlow.ErrorHandling.ErrorProvider.ThrowPendingError(TestStatus testStatus, String message)
   ved TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   ved TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()
   ved Pickles.TestHarness.MsTest.MinimalFeatures.FailingFeature.ScenarioCleanup()
   ved Pickles.TestHarness.MsTest.MinimalFeatures.FailingFeature.FailingFeatureInconclusiveScenario() i C:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\MsTest\Minimal Features\Failing.feature:linje 7
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f35f6b04-a3fd-4b00-9001-e845b8dfa13b" testId="27968872-ecbf-8ec7-3a98-d1be98533db7" testName="FailingFeatureFailingScenario" computerName="DT000326" duration="00:00:00.0025221" startTime="2017-08-08T12:20:01.8189535+02:00" endTime="2017-08-08T12:20:01.8189535+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f35f6b04-a3fd-4b00-9001-e845b8dfa13b">
      <Output>
        <StdOut>Then failing step
-&gt; error: 
The checked value is different from the expected one.
The checked value:
	[True]
The expected value:
	[False]</StdOut>
        <ErrorInfo>
          <Message>Test method Pickles.TestHarness.MsTest.MinimalFeatures.FailingFeature.FailingFeatureFailingScenario threw exception: 
NFluent.FluentCheckException: 
The checked value is different from the expected one.
The checked value:
	[True]
The expected value:
	[False]</Message>
          <StackTrace>    ved NFluent.Helpers.EqualityHelper.IsEqualTo(Object instance, Object expected)
   ved NFluent.ObjectCheckExtensions.&lt;&gt;c__DisplayClass1`1.&lt;IsEqualTo&gt;b__0()
   ved NFluent.Extensibility.Checker`2.ExecuteCheck(Action action, String negatedExceptionMessage)
   ved NFluent.ObjectCheckExtensions.IsEqualTo[T](ICheck`1 check, Object expected)
   ved NFluent.ObjectCheckExtensions.IsEqualTo[T](ICheck`1 check, T expected)
   ved AutomationLayer.MarkTestAs.Failing() i C:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\AutomationLayer\MarkTestAs.cs:linje 15
   ved AutomationLayer.MinimalFeatures.MinimalSteps.ThenFailingStep() i C:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\AutomationLayer\MinimalFeatures\MinimalSteps.cs:linje 30
   ved lambda_method(Closure , IContextManager )
   ved TechTalk.SpecFlow.Bindings.BindingInvoker.InvokeBinding(IBinding binding, IContextManager contextManager, Object[] arguments, ITestTracer testTracer, TimeSpan&amp; duration)
   ved TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStepMatch(BindingMatch match, Object[] arguments)
   ved TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep(StepInstance stepInstance)
   ved TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   ved TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()
   ved Pickles.TestHarness.MsTest.MinimalFeatures.FailingFeature.ScenarioCleanup()
   ved Pickles.TestHarness.MsTest.MinimalFeatures.FailingFeature.FailingFeatureFailingScenario() i C:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\MsTest\Minimal Features\Failing.feature:linje 10
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="7d6c46dd-c78a-48e9-9c54-171d65d694fa" testId="4c1b1763-64a2-d451-5dd8-c0cd8cebb9f3" testName="InconclusiveFeaturePassingScenario" computerName="DT000326" duration="00:00:00.0007220" startTime="2017-08-08T12:20:01.8189535+02:00" endTime="2017-08-08T12:20:01.8189535+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7d6c46dd-c78a-48e9-9c54-171d65d694fa">
      <Output>
        <StdOut>Then passing step
-&gt; done: MinimalSteps.ThenPassingStep() (0,0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="bd7fd11f-f996-496a-8ba0-7dcf9db037c9" testId="8ec08426-4901-6383-e565-646137b3299c" testName="InconclusiveFeatureInconclusiveScenario" computerName="DT000326" duration="00:00:00.0021655" startTime="2017-08-08T12:20:01.8189535+02:00" endTime="2017-08-08T12:20:01.8189535+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="NotExecuted" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="bd7fd11f-f996-496a-8ba0-7dcf9db037c9">
      <Output>
        <StdOut>Then inconclusive step
-&gt; pending: MinimalSteps.ThenInconclusiveStep()</StdOut>
        <ErrorInfo>
          <Message>Assert.Inconclusive failed. One or more step definitions are not implemented yet.
  MinimalSteps.ThenInconclusiveStep()</Message>
          <StackTrace>   ved lambda_method(Closure , String , Object[] )
   ved TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestInconclusive(String message)
   ved TechTalk.SpecFlow.UnitTestProvider.MsTestRuntimeProvider.TestPending(String message)
   ved TechTalk.SpecFlow.ErrorHandling.ErrorProvider.ThrowPendingError(TestStatus testStatus, String message)
   ved TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep()
   ved TechTalk.SpecFlow.TestRunner.CollectScenarioErrors()
   ved Pickles.TestHarness.MsTest.MinimalFeatures.InconclusiveFeature.ScenarioCleanup()
   ved Pickles.TestHarness.MsTest.MinimalFeatures.InconclusiveFeature.InconclusiveFeatureInconclusiveScenario() i C:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\MsTest\Minimal Features\Inconclusive.feature:linje 7
</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f15b2703-f613-414e-acba-94a184cd1b53" testId="272cd0db-3670-5256-8896-fd6e5899a9e6" testName="PassingFeaturePassingScenario" computerName="DT000326" duration="00:00:00.0007060" startTime="2017-08-08T12:20:01.8189535+02:00" endTime="2017-08-08T12:20:01.8189535+02:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f15b2703-f613-414e-acba-94a184cd1b53">
      <Output>
        <StdOut>Then passing step
-&gt; done: MinimalSteps.ThenPassingStep() (0,0s)</StdOut>
      </Output>
    </UnitTestResult>
  </Results>
  <TestDefinitions>
    <UnitTest name="AddingSeveralNumbers_60" storage="c:\dev\code\github\dirkrombauts\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="140c2ca4-3d30-406e-fdc9-be44c10a340a">
      <TestCategory>
        <TestCategoryItem TestCategory="tag2" />
      </TestCategory>
      <Execution id="29eee0b9-1134-4df4-bd2c-6685d6295298" />
      <TestMethod codeBase="c:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter" className="Pickles.TestHarness.MsTest.AdditionFeature" name="AddingSeveralNumbers_60" />
    </UnitTest>
    <UnitTest name="AddingSeveralNumbers_40" storage="c:\dev\code\github\dirkrombauts\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="21bcc183-2ce2-c7f7-4a75-61985a78b639">
      <TestCategory>
        <TestCategoryItem TestCategory="tag2" />
      </TestCategory>
      <Execution id="465feb0a-9700-42cd-99d8-9ea88d1e0f95" />
      <TestMethod codeBase="c:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter" className="Pickles.TestHarness.MsTest.AdditionFeature" name="AddingSeveralNumbers_40" />
    </UnitTest>
    <UnitTest name="AddTwoNumbers" storage="c:\dev\code\github\dirkrombauts\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="8b1ea73f-6162-3e0e-0c6c-d3a9edc3a6d1">
      <TestCategory>
        <TestCategoryItem TestCategory="tag1" />
      </TestCategory>
      <Execution id="bea5acdb-7a8e-4267-bd23-398ed391be11" />
      <TestMethod codeBase="c:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter" className="Pickles.TestHarness.MsTest.AdditionFeature" name="AddTwoNumbers" />
    </UnitTest>
    <UnitTest name="FailToAddTwoNumbers" storage="c:\dev\code\github\dirkrombauts\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="0df655e6-c4cf-164c-b17f-7f9f92c19045">
      <TestCategory>
        <TestCategoryItem TestCategory="tag1" />
      </TestCategory>
      <Execution id="596c6e88-3f98-45ca-8f68-2458b9aad073" />
      <TestMethod codeBase="c:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter" className="Pickles.TestHarness.MsTest.AdditionFeature" name="FailToAddTwoNumbers" />
    </UnitTest>
    <UnitTest name="IgnoredAddingTwoNumbers" storage="c:\dev\code\github\dirkrombauts\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="113ed7a2-61bc-45d6-3ad1-61ddbea77238">
      <Execution id="cb3c980f-3304-4a0d-9296-ac1dc02ab253" />
      <TestMethod codeBase="c:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter" className="Pickles.TestHarness.MsTest.AdditionFeature" name="IgnoredAddingTwoNumbers" />
    </UnitTest>
    <UnitTest name="NotAutomatedAddingTwoNumbers" storage="c:\dev\code\github\dirkrombauts\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="8c3089df-e8ec-4931-e07f-19784ba313d4">
      <Execution id="66de0781-befe-4bd0-a429-2910def65367" />
      <TestMethod codeBase="c:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter" className="Pickles.TestHarness.MsTest.AdditionFeature" name="NotAutomatedAddingTwoNumbers" />
    </UnitTest>
    <UnitTest name="AddTwoNumbers" storage="c:\dev\code\github\dirkrombauts\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="cd06647c-3ccf-9545-fdb0-c96daaba2ca8">
      <Execution id="ec4505ad-06d3-44af-bc13-11a9ae17cecc" />
      <TestMethod codeBase="c:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter" className="Pickles.TestHarness.MsTest.FailingBackgroundFeature" name="AddTwoNumbers" />
    </UnitTest>
    <UnitTest name="AddingSeveralNumbers_60" storage="c:\dev\code\github\dirkrombauts\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="bea8799b-89a4-d983-d6a9-57924ee5618e">
      <Execution id="79f7adb4-bcca-45e4-ab66-fb3707b45944" />
      <TestMethod codeBase="c:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter" className="Pickles.TestHarness.MsTest.FailingBackgroundFeature" name="AddingSeveralNumbers_60" />
    </UnitTest>
    <UnitTest name="AddingSeveralNumbers_40" storage="c:\dev\code\github\dirkrombauts\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="7ef69afa-3afb-8791-c4d2-657df7ba5408">
      <Execution id="02cdfdd0-f7b4-47e9-9b7e-41be5a9b90d9" />
      <TestMethod codeBase="c:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter" className="Pickles.TestHarness.MsTest.FailingBackgroundFeature" name="AddingSeveralNumbers_40" />
    </UnitTest>
    <UnitTest name="NotAutomatedScenario1" storage="c:\dev\code\github\dirkrombauts\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="d2820219-bd97-2273-945a-4d371724085a">
      <Execution id="5667504a-1c22-46b0-9dea-92819b0c7a70" />
      <TestMethod codeBase="c:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter" className="Pickles.TestHarness.MsTest.NotAutomatedAtAllFeature" name="NotAutomatedScenario1" />
    </UnitTest>
    <UnitTest name="NotAutomatedScenario2" storage="c:\dev\code\github\dirkrombauts\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="8bc041bd-d809-7992-ff2a-09b84d713da5">
      <Execution id="a2feebcf-b4ff-4430-ba7a-834d0edf0659" />
      <TestMethod codeBase="c:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter" className="Pickles.TestHarness.MsTest.NotAutomatedAtAllFeature" name="NotAutomatedScenario2" />
    </UnitTest>
    <UnitTest name="NotAutomatedScenario3" storage="c:\dev\code\github\dirkrombauts\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="ee64b0d5-906e-5159-a108-531362c596d1">
      <Execution id="f7b8c99f-cfd4-4404-9c6b-935d551f3965" />
      <TestMethod codeBase="c:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter" className="Pickles.TestHarness.MsTest.NotAutomatedAtAllFeature" name="NotAutomatedScenario3" />
    </UnitTest>
    <UnitTest name="ThisIsAScenarioOutlineWhereAllScenariosPass_Pass_1" storage="c:\dev\code\github\dirkrombauts\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="f9a64263-f40d-f64d-0a5b-22b6db10eb26">
      <Execution id="0f286a4a-df60-4bbb-a5c6-e30ea4e9ac5c" />
      <TestMethod codeBase="c:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature" name="ThisIsAScenarioOutlineWhereAllScenariosPass_Pass_1" />
    </UnitTest>
    <UnitTest name="ThisIsAScenarioOutlineWhereAllScenariosPass_Pass_2" storage="c:\dev\code\github\dirkrombauts\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="aa38c998-4087-fdeb-c742-f6a940beef87">
      <Execution id="79fcb72e-8bd5-429c-a782-cf6739487d99" />
      <TestMethod codeBase="c:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature" name="ThisIsAScenarioOutlineWhereAllScenariosPass_Pass_2" />
    </UnitTest>
    <UnitTest name="ThisIsAScenarioOutlineWhereAllScenariosPass_Pass_3" storage="c:\dev\code\github\dirkrombauts\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="90a44ab4-342d-ed3c-860e-39c8152c2fad">
      <Execution id="81fd0623-fe03-4335-b15f-3d2c231f459d" />
      <TestMethod codeBase="c:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature" name="ThisIsAScenarioOutlineWhereAllScenariosPass_Pass_3" />
    </UnitTest>
    <UnitTest name="ThisIsAScenarioOutlineWhereOneScenarioIsInconclusive_Pass_1" storage="c:\dev\code\github\dirkrombauts\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="7e46cf81-dd4a-3fd0-4759-df967f754d0d">
      <Execution id="6bc2d446-52bf-40d2-8d07-e2a858308954" />
      <TestMethod codeBase="c:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature" name="ThisIsAScenarioOutlineWhereOneScenarioIsInconclusive_Pass_1" />
    </UnitTest>
    <UnitTest name="ThisIsAScenarioOutlineWhereOneScenarioIsInconclusive_Pass_2" storage="c:\dev\code\github\dirkrombauts\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="a83adabc-7eb9-5e21-a7bc-6907dc0d83ea">
      <Execution id="ae02beeb-6c1b-4bf0-86bc-14677812e707" />
      <TestMethod codeBase="c:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature" name="ThisIsAScenarioOutlineWhereOneScenarioIsInconclusive_Pass_2" />
    </UnitTest>
    <UnitTest name="ThisIsAScenarioOutlineWhereOneScenarioIsInconclusive_Inconclusive_1" storage="c:\dev\code\github\dirkrombauts\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="b4fa0e1c-5a4e-dabb-6fb2-000597c04404">
      <Execution id="aa45eb18-457c-482b-8b36-4fbf4b09a165" />
      <TestMethod codeBase="c:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature" name="ThisIsAScenarioOutlineWhereOneScenarioIsInconclusive_Inconclusive_1" />
    </UnitTest>
    <UnitTest name="ThisIsAScenarioOutlineWhereOneScenarioFails_Pass_1" storage="c:\dev\code\github\dirkrombauts\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="e911cad1-80be-36f6-3c0c-eb83f516c0a2">
      <Execution id="35a9b9bc-6bfe-4263-b59c-a6b05f7c60ac" />
      <TestMethod codeBase="c:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature" name="ThisIsAScenarioOutlineWhereOneScenarioFails_Pass_1" />
    </UnitTest>
    <UnitTest name="ThisIsAScenarioOutlineWhereOneScenarioFails_Pass_2" storage="c:\dev\code\github\dirkrombauts\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="f3327e4b-92ea-d5bf-ceff-5062ff9febf5">
      <Execution id="38913a5e-be0e-49a6-93c4-5a982e465570" />
      <TestMethod codeBase="c:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature" name="ThisIsAScenarioOutlineWhereOneScenarioFails_Pass_2" />
    </UnitTest>
    <UnitTest name="ThisIsAScenarioOutlineWhereOneScenarioFails_Fail_1" storage="c:\dev\code\github\dirkrombauts\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="5309a9c5-1ee0-31a6-55f5-b76209e03db3">
      <Execution id="59ecccc8-2246-4944-b0d0-31a81adea942" />
      <TestMethod codeBase="c:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature" name="ThisIsAScenarioOutlineWhereOneScenarioFails_Fail_1" />
    </UnitTest>
    <UnitTest name="AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet0_Pass_1" storage="c:\dev\code\github\dirkrombauts\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="635e5bc5-c3fe-72a8-367f-654037b1c1da">
      <Execution id="4307eee1-bcf6-4e34-9827-0cd81846726e" />
      <TestMethod codeBase="c:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature" name="AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet0_Pass_1" />
    </UnitTest>
    <UnitTest name="AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet0_Pass_2" storage="c:\dev\code\github\dirkrombauts\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="99ae1964-4272-f64b-08c7-beaae8bff30c">
      <Execution id="878408b5-f736-43a2-830c-0005283de724" />
      <TestMethod codeBase="c:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature" name="AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet0_Pass_2" />
    </UnitTest>
    <UnitTest name="AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet1_Inconclusive_1" storage="c:\dev\code\github\dirkrombauts\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="6aa57053-5392-ab46-85c8-7e37adaaee43">
      <Execution id="24ffabc5-3632-42e8-bd69-d597305ce856" />
      <TestMethod codeBase="c:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature" name="AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet1_Inconclusive_1" />
    </UnitTest>
    <UnitTest name="AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet1_Inconclusive_2" storage="c:\dev\code\github\dirkrombauts\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="e8c43f8a-7359-f15b-4250-8ed752528b1b">
      <Execution id="abb26c3f-850e-4e2d-a869-5344b43554dd" />
      <TestMethod codeBase="c:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature" name="AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet1_Inconclusive_2" />
    </UnitTest>
    <UnitTest name="AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet2_Fail_1" storage="c:\dev\code\github\dirkrombauts\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="d6dd768f-20fc-ed4a-8542-86bee0adde9e">
      <Execution id="a61b55e8-210d-421c-9b4b-eb39e62e83f1" />
      <TestMethod codeBase="c:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature" name="AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet2_Fail_1" />
    </UnitTest>
    <UnitTest name="AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet2_Fail_2" storage="c:\dev\code\github\dirkrombauts\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="ed9be2e6-2632-9fc1-c693-fe530d107927">
      <Execution id="23639c5c-6d25-4a76-bf23-21ae369c0b80" />
      <TestMethod codeBase="c:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature" name="AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet2_Fail_2" />
    </UnitTest>
    <UnitTest name="DealCorrectlyWithBackslashesInTheExamples_CTemp" storage="c:\dev\code\github\dirkrombauts\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="b2578459-aaca-c2fd-c57f-0405fafa6c43">
      <Execution id="7998974f-4101-457d-9ce1-458e839b7b7f" />
      <TestMethod codeBase="c:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature" name="DealCorrectlyWithBackslashesInTheExamples_CTemp" />
    </UnitTest>
    <UnitTest name="DealCorrectlyWithParenthesisInTheExamples_ThisIsADescriptionAndMore" storage="c:\dev\code\github\dirkrombauts\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="ece5cdce-c3f9-32d6-6d48-bb2f6fd1ba91">
      <Execution id="0118c8a1-4427-4977-8630-e6f8026667f6" />
      <TestMethod codeBase="c:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature" name="DealCorrectlyWithParenthesisInTheExamples_ThisIsADescriptionAndMore" />
    </UnitTest>
    <UnitTest name="DealCorrectlyWithOverlongExampleValues_PleaseEnterAValidTwoLetterCountryCodeE_G_DE" storage="c:\dev\code\github\dirkrombauts\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="9404b577-698b-61ca-64fc-88ff799201bd">
      <Execution id="b5e5fd72-9417-440d-9097-10c55387a046" />
      <TestMethod codeBase="c:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter" className="Pickles.TestHarness.MsTest.ScenarioOutlinesFeature" name="DealCorrectlyWithOverlongExampleValues_PleaseEnterAValidTwoLetterCountryCodeE_G_DE" />
    </UnitTest>
    <UnitTest name="TestMethod" storage="c:\dev\code\github\dirkrombauts\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="9fb96cdc-a81e-252c-1a41-7ecd9a592065">
      <Execution id="887d93ed-f927-42a3-9039-3d34037cb054" />
      <TestMethod codeBase="c:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter" className="Pickles.TestHarness.MsTest.OrdinaryUnitTest" name="TestMethod" />
    </UnitTest>
    <UnitTest name="ThisIsAScenarioWithParenthesesHyphenAndComma10_2030_40" storage="c:\dev\code\github\dirkrombauts\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="53ebc13a-89fc-b58c-a6e0-dfd85e793e5f">
      <Execution id="e50effa9-d752-4109-aa1f-64da365ff3df" />
      <TestMethod codeBase="c:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter" className="Pickles.TestHarness.MsTest.ScenariosWithSpecialCharactersFeature" name="ThisIsAScenarioWithParenthesesHyphenAndComma10_2030_40" />
    </UnitTest>
    <UnitTest name="ThisIsAScenarioOutlineWithParenthesesHyphenAndComma10_2030_40_Pass_1" storage="c:\dev\code\github\dirkrombauts\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="efcbe7cc-31a8-2063-2ba3-daddc29b814d">
      <Execution id="1de82f2d-0bd8-4294-a21e-5ecc1cf562e4" />
      <TestMethod codeBase="c:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter" className="Pickles.TestHarness.MsTest.ScenariosWithSpecialCharactersFeature" name="ThisIsAScenarioOutlineWithParenthesesHyphenAndComma10_2030_40_Pass_1" />
    </UnitTest>
    <UnitTest name="ThisScenarioContainsExamplesWithRegex_SpecialCharacters_Variant0" storage="c:\dev\code\github\dirkrombauts\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="860fe6a8-8ab8-da24-9ff4-8fc156cff05f">
      <Execution id="6819f556-4082-4ada-b920-3e6d41f32525" />
      <TestMethod codeBase="c:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter" className="Pickles.TestHarness.MsTest.ScenariosWithSpecialCharactersFeature" name="ThisScenarioContainsExamplesWithRegex_SpecialCharacters_Variant0" />
    </UnitTest>
    <UnitTest name="ThisScenarioContainsExamplesWithRegex_SpecialCharacters_Variant1" storage="c:\dev\code\github\dirkrombauts\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="a900fecb-3728-fcea-67f2-b24d9d94cd5e">
      <Execution id="a6281dff-00a4-431e-8c42-c438ae15797c" />
      <TestMethod codeBase="c:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter" className="Pickles.TestHarness.MsTest.ScenariosWithSpecialCharactersFeature" name="ThisScenarioContainsExamplesWithRegex_SpecialCharacters_Variant1" />
    </UnitTest>
    <UnitTest name="ThisScenarioContainsExamplesWithRegex_SpecialCharacters_Variant2" storage="c:\dev\code\github\dirkrombauts\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="46f974ed-841e-26dd-a181-971cc88d892b">
      <Execution id="03219d9a-b120-495d-abb9-7d0f8486bd9f" />
      <TestMethod codeBase="c:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter" className="Pickles.TestHarness.MsTest.ScenariosWithSpecialCharactersFeature" name="ThisScenarioContainsExamplesWithRegex_SpecialCharacters_Variant2" />
    </UnitTest>
    <UnitTest name="ThisScenarioContainsExamplesWithRegex_SpecialCharacters_Variant3" storage="c:\dev\code\github\dirkrombauts\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="52d27672-31de-19f1-70ce-05bf3e83b4d2">
      <Execution id="67da7d40-5227-403c-93e1-69ce26b4c726" />
      <TestMethod codeBase="c:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter" className="Pickles.TestHarness.MsTest.ScenariosWithSpecialCharactersFeature" name="ThisScenarioContainsExamplesWithRegex_SpecialCharacters_Variant3" />
    </UnitTest>
    <UnitTest name="ThisScenarioContainsExamplesWithRegex_SpecialCharacters_Variant4" storage="c:\dev\code\github\dirkrombauts\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="b0a09bca-247a-a5bc-25cf-8aa3774a2d40">
      <Execution id="07334380-3ea2-43f4-b989-22fa79221479" />
      <TestMethod codeBase="c:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter" className="Pickles.TestHarness.MsTest.ScenariosWithSpecialCharactersFeature" name="ThisScenarioContainsExamplesWithRegex_SpecialCharacters_Variant4" />
    </UnitTest>
    <UnitTest name="ThisScenarioContainsExamplesWithRegex_SpecialCharacters_Variant5" storage="c:\dev\code\github\dirkrombauts\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="d4e92e37-b370-9951-cf08-d28c8be3df76">
      <Execution id="f268f41b-fe00-40fc-b94c-d5a02a2eac34" />
      <TestMethod codeBase="c:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter" className="Pickles.TestHarness.MsTest.ScenariosWithSpecialCharactersFeature" name="ThisScenarioContainsExamplesWithRegex_SpecialCharacters_Variant5" />
    </UnitTest>
    <UnitTest name="ThisScenarioContainsExamplesWithRegex_SpecialCharacters_Variant6" storage="c:\dev\code\github\dirkrombauts\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="bd874ade-5d64-8f62-b83e-d52cd3e9a75c">
      <Execution id="fe33b3d3-0978-4480-8390-7a12d087b832" />
      <TestMethod codeBase="c:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter" className="Pickles.TestHarness.MsTest.ScenariosWithSpecialCharactersFeature" name="ThisScenarioContainsExamplesWithRegex_SpecialCharacters_Variant6" />
    </UnitTest>
    <UnitTest name="ThisIsAScenarioOutlineWithGermanUmlautsAouBAOU_Pass_1" storage="c:\dev\code\github\dirkrombauts\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="eeac1cb9-e9d0-de27-eeb7-a74ca0b65a36">
      <Execution id="14de0beb-5f54-4bde-9a97-c61192b658ff" />
      <TestMethod codeBase="c:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter" className="Pickles.TestHarness.MsTest.ScenariosWithSpecialCharactersFeature" name="ThisIsAScenarioOutlineWithGermanUmlautsAouBAOU_Pass_1" />
    </UnitTest>
    <UnitTest name="ThisIsAScenarioOutlineWithAmpersand_Pass_1" storage="c:\dev\code\github\dirkrombauts\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="0943a703-db7d-3781-87ab-a7405aa83a66">
      <Execution id="c3daa0a9-de9c-42e4-a93b-0a4a0385b676" />
      <TestMethod codeBase="c:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter" className="Pickles.TestHarness.MsTest.ScenariosWithSpecialCharactersFeature" name="ThisIsAScenarioOutlineWithAmpersand_Pass_1" />
    </UnitTest>
    <UnitTest name="ThisIsAScenarioWithDanishCharactersAEoaAEOA" storage="c:\dev\code\github\dirkrombauts\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="fe3a2fd1-be1c-0a5c-b0fd-93bfa634a24c">
      <Execution id="4dcc16d7-561f-4b17-a8b3-01396336479c" />
      <TestMethod codeBase="c:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter" className="Pickles.TestHarness.MsTest.ScenariosWithSpecialCharactersFeature" name="ThisIsAScenarioWithDanishCharactersAEoaAEOA" />
    </UnitTest>
    <UnitTest name="FailingFeaturePassingScenario" storage="c:\dev\code\github\dirkrombauts\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="b08cd0c6-1fb7-422e-7264-d77da39fe00d">
      <Execution id="4f0ce609-7311-46b2-b219-01abe0a9e591" />
      <TestMethod codeBase="c:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter" className="Pickles.TestHarness.MsTest.MinimalFeatures.FailingFeature" name="FailingFeaturePassingScenario" />
    </UnitTest>
    <UnitTest name="FailingFeatureInconclusiveScenario" storage="c:\dev\code\github\dirkrombauts\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="68c045a3-263d-f215-70d9-bc46476ac556">
      <Execution id="956bde2a-7808-40e9-9c6a-d6c60b6a48f1" />
      <TestMethod codeBase="c:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter" className="Pickles.TestHarness.MsTest.MinimalFeatures.FailingFeature" name="FailingFeatureInconclusiveScenario" />
    </UnitTest>
    <UnitTest name="FailingFeatureFailingScenario" storage="c:\dev\code\github\dirkrombauts\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="27968872-ecbf-8ec7-3a98-d1be98533db7">
      <Execution id="f35f6b04-a3fd-4b00-9001-e845b8dfa13b" />
      <TestMethod codeBase="c:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter" className="Pickles.TestHarness.MsTest.MinimalFeatures.FailingFeature" name="FailingFeatureFailingScenario" />
    </UnitTest>
    <UnitTest name="InconclusiveFeaturePassingScenario" storage="c:\dev\code\github\dirkrombauts\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="4c1b1763-64a2-d451-5dd8-c0cd8cebb9f3">
      <Execution id="7d6c46dd-c78a-48e9-9c54-171d65d694fa" />
      <TestMethod codeBase="c:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter" className="Pickles.TestHarness.MsTest.MinimalFeatures.InconclusiveFeature" name="InconclusiveFeaturePassingScenario" />
    </UnitTest>
    <UnitTest name="InconclusiveFeatureInconclusiveScenario" storage="c:\dev\code\github\dirkrombauts\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="8ec08426-4901-6383-e565-646137b3299c">
      <Execution id="bd7fd11f-f996-496a-8ba0-7dcf9db037c9" />
      <TestMethod codeBase="c:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter" className="Pickles.TestHarness.MsTest.MinimalFeatures.InconclusiveFeature" name="InconclusiveFeatureInconclusiveScenario" />
    </UnitTest>
    <UnitTest name="PassingFeaturePassingScenario" storage="c:\dev\code\github\dirkrombauts\pickles\test-harness\mstest\bin\debug\mstestharness.dll" id="272cd0db-3670-5256-8896-fd6e5899a9e6">
      <Execution id="f15b2703-f613-414e-acba-94a184cd1b53" />
      <TestMethod codeBase="c:\Dev\Code\GitHub\DirkRombauts\pickles\test-harness\mstest\bin\Debug\mstestHarness.dll" adapterTypeName="Microsoft.VisualStudio.TestTools.TestTypes.Unit.UnitTestAdapter" className="Pickles.TestHarness.MsTest.MinimalFeatures.PassingFeature" name="PassingFeaturePassingScenario" />
    </UnitTest>
  </TestDefinitions>
  <TestEntries>
    <TestEntry testId="140c2ca4-3d30-406e-fdc9-be44c10a340a" executionId="29eee0b9-1134-4df4-bd2c-6685d6295298" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="21bcc183-2ce2-c7f7-4a75-61985a78b639" executionId="465feb0a-9700-42cd-99d8-9ea88d1e0f95" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8b1ea73f-6162-3e0e-0c6c-d3a9edc3a6d1" executionId="bea5acdb-7a8e-4267-bd23-398ed391be11" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0df655e6-c4cf-164c-b17f-7f9f92c19045" executionId="596c6e88-3f98-45ca-8f68-2458b9aad073" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="113ed7a2-61bc-45d6-3ad1-61ddbea77238" executionId="cb3c980f-3304-4a0d-9296-ac1dc02ab253" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8c3089df-e8ec-4931-e07f-19784ba313d4" executionId="66de0781-befe-4bd0-a429-2910def65367" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="cd06647c-3ccf-9545-fdb0-c96daaba2ca8" executionId="ec4505ad-06d3-44af-bc13-11a9ae17cecc" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="bea8799b-89a4-d983-d6a9-57924ee5618e" executionId="79f7adb4-bcca-45e4-ab66-fb3707b45944" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7ef69afa-3afb-8791-c4d2-657df7ba5408" executionId="02cdfdd0-f7b4-47e9-9b7e-41be5a9b90d9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d2820219-bd97-2273-945a-4d371724085a" executionId="5667504a-1c22-46b0-9dea-92819b0c7a70" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8bc041bd-d809-7992-ff2a-09b84d713da5" executionId="a2feebcf-b4ff-4430-ba7a-834d0edf0659" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ee64b0d5-906e-5159-a108-531362c596d1" executionId="f7b8c99f-cfd4-4404-9c6b-935d551f3965" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f9a64263-f40d-f64d-0a5b-22b6db10eb26" executionId="0f286a4a-df60-4bbb-a5c6-e30ea4e9ac5c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="aa38c998-4087-fdeb-c742-f6a940beef87" executionId="79fcb72e-8bd5-429c-a782-cf6739487d99" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="90a44ab4-342d-ed3c-860e-39c8152c2fad" executionId="81fd0623-fe03-4335-b15f-3d2c231f459d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7e46cf81-dd4a-3fd0-4759-df967f754d0d" executionId="6bc2d446-52bf-40d2-8d07-e2a858308954" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a83adabc-7eb9-5e21-a7bc-6907dc0d83ea" executionId="ae02beeb-6c1b-4bf0-86bc-14677812e707" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b4fa0e1c-5a4e-dabb-6fb2-000597c04404" executionId="aa45eb18-457c-482b-8b36-4fbf4b09a165" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e911cad1-80be-36f6-3c0c-eb83f516c0a2" executionId="35a9b9bc-6bfe-4263-b59c-a6b05f7c60ac" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f3327e4b-92ea-d5bf-ceff-5062ff9febf5" executionId="38913a5e-be0e-49a6-93c4-5a982e465570" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="5309a9c5-1ee0-31a6-55f5-b76209e03db3" executionId="59ecccc8-2246-4944-b0d0-31a81adea942" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="635e5bc5-c3fe-72a8-367f-654037b1c1da" executionId="4307eee1-bcf6-4e34-9827-0cd81846726e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="99ae1964-4272-f64b-08c7-beaae8bff30c" executionId="878408b5-f736-43a2-830c-0005283de724" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6aa57053-5392-ab46-85c8-7e37adaaee43" executionId="24ffabc5-3632-42e8-bd69-d597305ce856" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e8c43f8a-7359-f15b-4250-8ed752528b1b" executionId="abb26c3f-850e-4e2d-a869-5344b43554dd" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d6dd768f-20fc-ed4a-8542-86bee0adde9e" executionId="a61b55e8-210d-421c-9b4b-eb39e62e83f1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ed9be2e6-2632-9fc1-c693-fe530d107927" executionId="23639c5c-6d25-4a76-bf23-21ae369c0b80" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b2578459-aaca-c2fd-c57f-0405fafa6c43" executionId="7998974f-4101-457d-9ce1-458e839b7b7f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ece5cdce-c3f9-32d6-6d48-bb2f6fd1ba91" executionId="0118c8a1-4427-4977-8630-e6f8026667f6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9404b577-698b-61ca-64fc-88ff799201bd" executionId="b5e5fd72-9417-440d-9097-10c55387a046" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9fb96cdc-a81e-252c-1a41-7ecd9a592065" executionId="887d93ed-f927-42a3-9039-3d34037cb054" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="53ebc13a-89fc-b58c-a6e0-dfd85e793e5f" executionId="e50effa9-d752-4109-aa1f-64da365ff3df" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="efcbe7cc-31a8-2063-2ba3-daddc29b814d" executionId="1de82f2d-0bd8-4294-a21e-5ecc1cf562e4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="860fe6a8-8ab8-da24-9ff4-8fc156cff05f" executionId="6819f556-4082-4ada-b920-3e6d41f32525" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a900fecb-3728-fcea-67f2-b24d9d94cd5e" executionId="a6281dff-00a4-431e-8c42-c438ae15797c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="46f974ed-841e-26dd-a181-971cc88d892b" executionId="03219d9a-b120-495d-abb9-7d0f8486bd9f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="52d27672-31de-19f1-70ce-05bf3e83b4d2" executionId="67da7d40-5227-403c-93e1-69ce26b4c726" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b0a09bca-247a-a5bc-25cf-8aa3774a2d40" executionId="07334380-3ea2-43f4-b989-22fa79221479" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d4e92e37-b370-9951-cf08-d28c8be3df76" executionId="f268f41b-fe00-40fc-b94c-d5a02a2eac34" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="bd874ade-5d64-8f62-b83e-d52cd3e9a75c" executionId="fe33b3d3-0978-4480-8390-7a12d087b832" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="eeac1cb9-e9d0-de27-eeb7-a74ca0b65a36" executionId="14de0beb-5f54-4bde-9a97-c61192b658ff" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0943a703-db7d-3781-87ab-a7405aa83a66" executionId="c3daa0a9-de9c-42e4-a93b-0a4a0385b676" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="fe3a2fd1-be1c-0a5c-b0fd-93bfa634a24c" executionId="4dcc16d7-561f-4b17-a8b3-01396336479c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b08cd0c6-1fb7-422e-7264-d77da39fe00d" executionId="4f0ce609-7311-46b2-b219-01abe0a9e591" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="68c045a3-263d-f215-70d9-bc46476ac556" executionId="956bde2a-7808-40e9-9c6a-d6c60b6a48f1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="27968872-ecbf-8ec7-3a98-d1be98533db7" executionId="f35f6b04-a3fd-4b00-9001-e845b8dfa13b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4c1b1763-64a2-d451-5dd8-c0cd8cebb9f3" executionId="7d6c46dd-c78a-48e9-9c54-171d65d694fa" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8ec08426-4901-6383-e565-646137b3299c" executionId="bd7fd11f-f996-496a-8ba0-7dcf9db037c9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="272cd0db-3670-5256-8896-fd6e5899a9e6" executionId="f15b2703-f613-414e-acba-94a184cd1b53" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
  </TestEntries>
  <TestLists>
    <TestList name="Results Not in a List" id="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestList name="All Loaded Results" id="19431567-8539-422a-85d7-44ee4e166bda" />
  </TestLists>
  <ResultSummary outcome="Failed">
    <Counters total="49" executed="39" passed="31" failed="8" error="0" timeout="0" aborted="0" inconclusive="0" passedButRunAborted="0" notRunnable="0" notExecuted="0" disconnected="0" warning="0" completed="0" inProgress="0" pending="0" />
    <Output>
      <StdOut>Test 'IgnoredAddingTwoNumbers' was skipped in the test run.Test 'NotAutomatedAddingTwoNumbers' was skipped in the test run.Test 'NotAutomatedScenario1' was skipped in the test run.Test 'NotAutomatedScenario2' was skipped in the test run.Test 'NotAutomatedScenario3' was skipped in the test run.Test 'ThisIsAScenarioOutlineWhereOneScenarioIsInconclusive_Inconclusive_1' was skipped in the test run.Test 'AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet1_Inconclusive_1' was skipped in the test run.Test 'AndWeCanGoTotallyBonkersWithMultipleExampleSections__ExampleSet1_Inconclusive_2' was skipped in the test run.Test 'FailingFeatureInconclusiveScenario' was skipped in the test run.Test 'InconclusiveFeatureInconclusiveScenario' was skipped in the test run.</StdOut>
    </Output>
  </ResultSummary>
</TestRun>